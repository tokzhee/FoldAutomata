2025/07/16 08:40:32: Initialize (UBLINK - Version 15.0.1 (Revision 202312281028) (Jul  9 2024))
	[0002291980832691]
	JOB = Issuer=PROD_AUB_OMAN_VISA_DEBIT,BIN=42637103,Card Program=VSDC29_STPay_Kiosk_000863,Version=Kiosk v1.01,CPID=
	DESCRIPTION = 1st relase from NBS
	HSM = ERACOM
	SOURCE = C:\PersoProduction\ABO\426371\20250716.084009.173.REQ
	EMBOSSER = DCC9kServer
	IC = DCC9KServer

2025/07/16 08:40:32: Function: UBCALC, arguments: Crd_Tmp, aCrd_CpId
0000: 43 72 64 5F 54 6D 70                                Crd_Tmp         

Value of aCrd_CpId:
0000: 30 30 30 38 36 33                                   000863          

2025/07/16 08:40:32: Function: UBCALC, result: 0
0000: 03 5F                                                _              

2025/07/16 08:40:32: Function: UBCALC, arguments: Crd_Tmp, aCrd_InfoHdrName
0000: 43 72 64 5F 54 6D 70                                Crd_Tmp         

Value of aCrd_InfoHdrName:
0000: 53 54 5F 53 54 50 61 79-5F 54 69 67 65 72           ST_STPay_Tiger  

2025/07/16 08:40:32: Function: UBCALC, result: 0
0000: 53 54 5F 53 54 50 61 79-5F 54 69 67 65 72           ST_STPay_Tiger  

2025/07/16 08:40:32: Function: UBCALC, arguments: Crd_Tmp, aCrd_InfoHdrRev
0000: 43 72 64 5F 54 6D 70                                Crd_Tmp         

Value of aCrd_InfoHdrRev:
0000: 31 2E 30 2E 34                                      1.0.4           

2025/07/16 08:40:32: Function: UBCALC, result: 0
0000: 31 2E 30 2E 34                                      1.0.4           

2025/07/16 08:40:32: Function: UBCALC, arguments: Crd_Tmp, aCrd_InfoHdrDate
0000: 43 72 64 5F 54 6D 70                                Crd_Tmp         

Value of aCrd_InfoHdrDate:
0000: 30 31 2F 30 35 2F 32 30-32 32                       01/05/2022      

2025/07/16 08:40:32: Function: UBCALC, result: 0
0000: 30 31 2F 30 35 2F 32 30-32 32                       01/05/2022      

2025/07/16 08:40:32: Function: UBCALC, arguments: aCrd_ApReg, aCrd_ApRegClr
0000: 61 43 72 64 5F 41 70 52-65 67                       aCrd_ApReg      

Value of aCrd_ApRegClr:
0000: 43 41 52 44 4D 47 52                                CARDMGR         

2025/07/16 08:40:32: Function: UBCALC, result: 0
0000: 43 41 52 44 4D 47 52                                CARDMGR         

2025/07/16 08:40:32: Function: IF, arguments: (aCrd_ArtIc != 'ubique')

Value of aCrd_ArtIc:
0000: 64 63 63 39 6B 73 65 72-76 65 72                    dcc9kserver     

2025/07/16 08:40:32: Function: IF, result: 0

2025/07/16 08:40:32: Function: UBExGetCardId, arguments: aCrd_CardId
0000: 61 43 72 64 5F 43 61 72-64 49 64                    aCrd_CardId     

2025/07/16 08:40:32: Function: UBExGetCardId, result: 0
0000: 43 37 36 38 5F 31 39 33-32 30 5F 31                 C768_19320_1    

2025/07/16 08:40:32: Function: UBExGetJobId, arguments: aCrd_JobId
0000: 61 43 72 64 5F 4A 6F 62-49 64                       aCrd_JobId      

2025/07/16 08:40:32: Function: UBExGetJobId, result: 0
0000: 4A 37 36 38 5F 31 39 33-32 30 5F 31 37 35 32 36     J768_19320_17526
0010: 34 34 34 33 32                                      44432           

2025/07/16 08:40:32: Function: ENDIF, arguments: <none>

2025/07/16 08:40:32: Function: ENDIF, result: 0

2025/07/16 08:40:32: Function: UBCALC, arguments: Ct_Tmp, aCt_InfoHdrName
0000: 43 74 5F 54 6D 70                                   Ct_Tmp          

Value of aCt_InfoHdrName:
0000: 56 53 44 43 32 39 5F 53-54 50 61 79                 VSDC29_STPay    

2025/07/16 08:40:32: Function: UBCALC, result: 0
0000: 56 53 44 43 32 39 5F 53-54 50 61 79                 VSDC29_STPay    

2025/07/16 08:40:32: Function: UBCALC, arguments: Ct_Tmp, aCt_InfoHdrRev
0000: 43 74 5F 54 6D 70                                   Ct_Tmp          

Value of aCt_InfoHdrRev:
0000: 31 2E 30 2E 31                                      1.0.1           

2025/07/16 08:40:32: Function: UBCALC, result: 0
0000: 31 2E 30 2E 31                                      1.0.1           

2025/07/16 08:40:32: Function: UBCALC, arguments: Ct_Tmp, aCt_InfoHdrDate
0000: 43 74 5F 54 6D 70                                   Ct_Tmp          

Value of aCt_InfoHdrDate:
0000: 31 32 2F 31 33 2F 32 30-32 31                       12/13/2021      

2025/07/16 08:40:32: Function: UBCALC, result: 0
0000: 31 32 2F 31 33 2F 32 30-32 31                       12/13/2021      

2025/07/16 08:40:32: Function: UBCALC, arguments: Ct_Tmp, aCt_TemplateName
0000: 43 74 5F 54 6D 70                                   Ct_Tmp          

Value of aCt_TemplateName:
0000: 56 53 44 43                                         VSDC            

2025/07/16 08:40:32: Function: UBCALC, result: 0
0000: 56 53 44 43                                         VSDC            

2025/07/16 08:40:32: Function: UBCALC, arguments: aCrd_ApReg, aCt_ApReg
0000: 61 43 72 64 5F 41 70 52-65 67                       aCrd_ApReg      

Value of aCt_ApReg:
0000: 43 41 52 44 4D 47 52 2C-56 53 44 43                 CARDMGR,VSDC    

2025/07/16 08:40:32: Function: UBCALC, result: 0
0000: 43 41 52 44 4D 47 52 2C-56 53 44 43                 CARDMGR,VSDC    

2025/07/16 08:40:33: DCC9kServer IC Start Card Response
0000: 3B 7F 96 00 00 31 01 F1-56 40 11 00 19 00 00 00     ;   1  V@      
0010: 00 00 00 00                                                         

2025/07/16 08:40:33: Function: UBExecuteJavaScript, arguments: aCrd_JsDataMethods
null: null

2025/07/16 08:40:33: Line 21: art.enableExtensions();
2025/07/16 08:40:33: Line 21: Art.enableExtensions arguments

Void: undefined

2025/07/16 08:40:33: Function: UBExecuteJavaScript, result: 0

2025/07/16 08:40:33: Function: UBExecuteJavaScript, arguments: aCrd_JsPerso
2025/07/16 08:40:33: Line 25: art.enableExtensions();
2025/07/16 08:40:33: Line 25: Art.enableExtensions arguments

Void: undefined

2025/07/16 08:40:33: Line 26: art.getErrorMessages(); // Clear error messages
2025/07/16 08:40:33: Line 26: Art.getErrorMessages arguments

String: 

2025/07/16 08:40:33: Line 369: var c_bsChainMac = new ByteString(); // Chaining MAC
2025/07/16 08:40:33: Line 369: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:33: Line 1390: card = new Card();     // Create card object
2025/07/16 08:40:33: Line 1390: Function.Card arguments

Card: 

2025/07/16 08:40:33: Line 1391: crypto = new Crypto(); // Create crypto object
2025/07/16 08:40:33: Line 1391: Function.Crypto arguments

Crypto: 

2025/07/16 08:40:33: Line 1395: var c_sArtIc = art.getVariableValue("aCrd_ArtIc").toString(ASCII); // ART file settings
2025/07/16 08:40:33: Line 1395: Art.getVariableValue arguments
1: String: aCrd_ArtIc

ByteString: 646363396B736572766572

2025/07/16 08:40:33: Line 1395: var c_sArtIc = art.getVariableValue("aCrd_ArtIc").toString(ASCII); // ART file settings
2025/07/16 08:40:33: Line 1395: ByteString.toString arguments
1: Double: 1

String: dcc9kserver

2025/07/16 08:40:33: Line 1396: var c_bsCplc = new ByteString(); // CPLC data
2025/07/16 08:40:33: Line 1396: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:33: Line 1397: var c_sCpid = art.getVariableValue("aCrd_Cpid").toString(ASCII); // CPID
2025/07/16 08:40:33: Line 1397: Art.getVariableValue arguments
1: String: aCrd_Cpid

ByteString: 303030383633

2025/07/16 08:40:33: Line 1397: var c_sCpid = art.getVariableValue("aCrd_Cpid").toString(ASCII); // CPID
2025/07/16 08:40:33: Line 1397: ByteString.toString arguments
1: Double: 1

String: 000863

2025/07/16 08:40:33: Line 1401: var c_bsCmAid = new ByteString(); // Card Manager ID
2025/07/16 08:40:33: Line 1401: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:33: Line 1412: var c_bsKek = art.getVariableValue("xCrdKv_Kek");
2025/07/16 08:40:33: Line 1412: Art.getVariableValue arguments
1: String: xCrdKv_Kek

ByteString

2025/07/16 08:40:33: Line 1413: var c_kKek = new Key(c_bsKek);
2025/07/16 08:40:33: Line 1413: Function.Key arguments
1: ByteString

Key

2025/07/16 08:40:33: Line 1414: c_kKek.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:33: Line 1414: Key.getKcv arguments
1: Double: 1048576

ByteString: 82E13665B4624DF5

2025/07/16 08:40:33: Line 522: function c_KeyBlkImport(sCat, nTyp)
2025/07/16 08:40:33: Line 522: UBJSGlobalClass.c_KeyBlkImport arguments
1: String: xCrdP3i_DF30_Kmc

2: Int: 4

2025/07/16 08:40:33: Line 531: new ByteString("!"+"!+"+CALL+"("+sCat+", "+nTyp+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 531: Function.ByteString arguments
1: String: !!+000863.c_KeyBlkImport(xCrdP3i_DF30_Kmc, 4)

2: Double: 1

ByteString: 21212B3030303836332E635F4B6579426C6B496D706F727428784372645033695F444633305F4B6D632C203429

2025/07/16 08:40:33: Line 537: var bsBlk = art.getVariableValue(sCat);
2025/07/16 08:40:33: Line 537: Art.getVariableValue arguments
1: String: xCrdP3i_DF30_Kmc

ByteString: DF0110127E61E41CD26A3742D58164B16B7C1FDF0201DB

2025/07/16 08:40:33: Line 541: if (!bsBlk.left(2).equals(new ByteString("DF01",HEX))) // Find key tag
2025/07/16 08:40:33: Line 541: ByteString.left arguments
1: Int: 2

ByteString: DF01

2025/07/16 08:40:33: Line 541: if (!bsBlk.left(2).equals(new ByteString("DF01",HEX))) // Find key tag
2025/07/16 08:40:33: Line 541: Function.ByteString arguments
1: String: DF01

2: Double: 4

ByteString: DF01

2025/07/16 08:40:33: Line 541: if (!bsBlk.left(2).equals(new ByteString("DF01",HEX))) // Find key tag
2025/07/16 08:40:33: Line 541: ByteString.equals arguments
1: ByteString: DF01

Int: 1

2025/07/16 08:40:33: Line 543: var tlBlk = new TLVList(bsBlk, TLV.EMV);
2025/07/16 08:40:33: Line 543: Function.TLVList arguments
1: ByteString: DF0110127E61E41CD26A3742D58164B16B7C1FDF0201DB

2: Double: 2

TLVList: DF0110127E61E41CD26A3742D58164B16B7C1FDF0201DB

2025/07/16 08:40:33: Line 544: var tKey = tlBlk.find(0xDF01);
2025/07/16 08:40:33: Line 544: TLVList.find arguments
1: Int: 57089

TLV: DF0110127E61E41CD26A3742D58164B16B7C1F

2025/07/16 08:40:33: Line 545: if ((tKey == null)||(tKey.getValue().length%8 != 0))
2025/07/16 08:40:33: Line 545: TLV.getValue arguments

ByteString: 127E61E41CD26A3742D58164B16B7C1F

2025/07/16 08:40:33: Line 547: var bsKey = tKey.getValue();
2025/07/16 08:40:33: Line 547: TLV.getValue arguments

ByteString: 127E61E41CD26A3742D58164B16B7C1F

2025/07/16 08:40:33: Line 551: var tKcv = tlBlk.find(0xDF02);
2025/07/16 08:40:33: Line 551: TLVList.find arguments
1: Int: 57090

TLV: DF0201DB

2025/07/16 08:40:33: Line 554: var bsBlkKcv = tKcv.getValue();
2025/07/16 08:40:33: Line 554: TLV.getValue arguments

ByteString: DB

2025/07/16 08:40:33: Line 559: var bsKek = c_kKek.getComponent(Key.DES);
2025/07/16 08:40:33: Line 559: Key.getComponent arguments
1: Double: 393216

ByteString

2025/07/16 08:40:33: Line 560: var bsTok = new ByteString();
2025/07/16 08:40:33: Line 560: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:33: Line 561: art.execute("UBDesEcb", sMode, bsKek, bsKey, bsTok);
2025/07/16 08:40:33: Line 561: Art.execute arguments
1: String: UBDesEcb

2: String: DecryptKey3{T4}

3: ByteString

4: ByteString: 127E61E41CD26A3742D58164B16B7C1F

5: ByteString: 

Int: 0

2025/07/16 08:40:33: Line 562: var kKey = new Key(bsTok);
2025/07/16 08:40:33: Line 562: Function.Key arguments
1: ByteString

Key

2025/07/16 08:40:33: Line 566: var bsKcv = kKey.getKcv(Key.EIGHTZEROS).left(bsBlkKcv.length);
2025/07/16 08:40:33: Line 566: Key.getKcv arguments
1: Double: 1048576

ByteString: DBF2EE51D6CFA822

2025/07/16 08:40:33: Line 566: var bsKcv = kKey.getKcv(Key.EIGHTZEROS).left(bsBlkKcv.length);
2025/07/16 08:40:33: Line 566: ByteString.left arguments
1: Int: 1

ByteString: DB

2025/07/16 08:40:33: Line 567: if (bsKcv.toString() != bsBlkKcv.toString())
2025/07/16 08:40:33: Line 567: ByteString.toString arguments

String: DB

2025/07/16 08:40:33: Line 567: if (bsKcv.toString() != bsBlkKcv.toString())
2025/07/16 08:40:33: Line 567: ByteString.toString arguments

String: DB

2025/07/16 08:40:33: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 577: Key.getComponent arguments
1: Double: 393216

ByteString

2025/07/16 08:40:33: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 577: ByteString.toString arguments

String

2025/07/16 08:40:33: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 577: ByteString.toString arguments

String: DB

2025/07/16 08:40:33: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 577: Function.ByteString arguments
1: String: !!-000863.c_KeyBlkImport(xCrdP3i_DF30_Kmc

2: Double: 1

ByteString

2025/07/16 08:40:33: Line 578: UBJSGlobalClass.c_KeyBlkImport result
Key

2025/07/16 08:40:33: Line 1424: var c_bsKmc = c_kKmc.getComponent(Key.DES);
2025/07/16 08:40:33: Line 1424: Key.getComponent arguments
1: Double: 393216

ByteString

2025/07/16 08:40:33: Line 522: function c_KeyBlkImport(sCat, nTyp)
2025/07/16 08:40:33: Line 522: UBJSGlobalClass.c_KeyBlkImport arguments
1: String: xCrdP3i_DF30_Kmc

2: Int: 0

2025/07/16 08:40:33: Line 531: new ByteString("!"+"!+"+CALL+"("+sCat+", "+nTyp+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 531: Function.ByteString arguments
1: String: !!+000863.c_KeyBlkImport(xCrdP3i_DF30_Kmc, 0)

2: Double: 1

ByteString: 21212B3030303836332E635F4B6579426C6B496D706F727428784372645033695F444633305F4B6D632C203029

2025/07/16 08:40:33: Line 537: var bsBlk = art.getVariableValue(sCat);
2025/07/16 08:40:33: Line 537: Art.getVariableValue arguments
1: String: xCrdP3i_DF30_Kmc

ByteString: DF0110127E61E41CD26A3742D58164B16B7C1FDF0201DB

2025/07/16 08:40:33: Line 541: if (!bsBlk.left(2).equals(new ByteString("DF01",HEX))) // Find key tag
2025/07/16 08:40:33: Line 541: ByteString.left arguments
1: Int: 2

ByteString: DF01

2025/07/16 08:40:33: Line 541: if (!bsBlk.left(2).equals(new ByteString("DF01",HEX))) // Find key tag
2025/07/16 08:40:33: Line 541: Function.ByteString arguments
1: String: DF01

2: Double: 4

ByteString: DF01

2025/07/16 08:40:33: Line 541: if (!bsBlk.left(2).equals(new ByteString("DF01",HEX))) // Find key tag
2025/07/16 08:40:33: Line 541: ByteString.equals arguments
1: ByteString: DF01

Int: 1

2025/07/16 08:40:33: Line 543: var tlBlk = new TLVList(bsBlk, TLV.EMV);
2025/07/16 08:40:33: Line 543: Function.TLVList arguments
1: ByteString: DF0110127E61E41CD26A3742D58164B16B7C1FDF0201DB

2: Double: 2

TLVList: DF0110127E61E41CD26A3742D58164B16B7C1FDF0201DB

2025/07/16 08:40:33: Line 544: var tKey = tlBlk.find(0xDF01);
2025/07/16 08:40:33: Line 544: TLVList.find arguments
1: Int: 57089

TLV: DF0110127E61E41CD26A3742D58164B16B7C1F

2025/07/16 08:40:33: Line 545: if ((tKey == null)||(tKey.getValue().length%8 != 0))
2025/07/16 08:40:33: Line 545: TLV.getValue arguments

ByteString: 127E61E41CD26A3742D58164B16B7C1F

2025/07/16 08:40:33: Line 547: var bsKey = tKey.getValue();
2025/07/16 08:40:33: Line 547: TLV.getValue arguments

ByteString: 127E61E41CD26A3742D58164B16B7C1F

2025/07/16 08:40:33: Line 551: var tKcv = tlBlk.find(0xDF02);
2025/07/16 08:40:33: Line 551: TLVList.find arguments
1: Int: 57090

TLV: DF0201DB

2025/07/16 08:40:33: Line 554: var bsBlkKcv = tKcv.getValue();
2025/07/16 08:40:33: Line 554: TLV.getValue arguments

ByteString: DB

2025/07/16 08:40:33: Line 559: var bsKek = c_kKek.getComponent(Key.DES);
2025/07/16 08:40:33: Line 559: Key.getComponent arguments
1: Double: 393216

ByteString

2025/07/16 08:40:33: Line 560: var bsTok = new ByteString();
2025/07/16 08:40:33: Line 560: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:33: Line 561: art.execute("UBDesEcb", sMode, bsKek, bsKey, bsTok);
2025/07/16 08:40:33: Line 561: Art.execute arguments
1: String: UBDesEcb

2: String: DecryptKey3{T0}

3: ByteString

4: ByteString: 127E61E41CD26A3742D58164B16B7C1F

5: ByteString: 

Int: 0

2025/07/16 08:40:33: Line 562: var kKey = new Key(bsTok);
2025/07/16 08:40:33: Line 562: Function.Key arguments
1: ByteString

Key

2025/07/16 08:40:33: Line 566: var bsKcv = kKey.getKcv(Key.EIGHTZEROS).left(bsBlkKcv.length);
2025/07/16 08:40:33: Line 566: Key.getKcv arguments
1: Double: 1048576

ByteString: DBF2EE51D6CFA822

2025/07/16 08:40:33: Line 566: var bsKcv = kKey.getKcv(Key.EIGHTZEROS).left(bsBlkKcv.length);
2025/07/16 08:40:33: Line 566: ByteString.left arguments
1: Int: 1

ByteString: DB

2025/07/16 08:40:33: Line 567: if (bsKcv.toString() != bsBlkKcv.toString())
2025/07/16 08:40:33: Line 567: ByteString.toString arguments

String: DB

2025/07/16 08:40:33: Line 567: if (bsKcv.toString() != bsBlkKcv.toString())
2025/07/16 08:40:33: Line 567: ByteString.toString arguments

String: DB

2025/07/16 08:40:33: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 577: Key.getComponent arguments
1: Double: 393216

ByteString

2025/07/16 08:40:33: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 577: ByteString.toString arguments

String

2025/07/16 08:40:33: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 577: ByteString.toString arguments

String: DB

2025/07/16 08:40:33: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 577: Function.ByteString arguments
1: String: !!-000863.c_KeyBlkImport(xCrdP3i_DF30_Kmc

2: Double: 1

ByteString

2025/07/16 08:40:33: Line 578: UBJSGlobalClass.c_KeyBlkImport result
Key

2025/07/16 08:40:33: Line 1427: var c_bsKmcT0 = c_kKmcT0.getComponent(Key.DES);
2025/07/16 08:40:33: Line 1427: Key.getComponent arguments
1: Double: 393216

ByteString

2025/07/16 08:40:33: Line 1431: if (art.getVariableValue("xCrdCki_DF31_Cmk").length > 0)
2025/07/16 08:40:33: Line 1431: Art.getVariableValue arguments
1: String: xCrdCki_DF31_Cmk

ByteString: 

2025/07/16 08:40:33: Line 1439: var c_kDKenc   = new Key(); // Generating key
2025/07/16 08:40:33: Line 1439: Function.Key arguments

Key: 

2025/07/16 08:40:33: Line 1440: var c_kDKmac   = new Key(); // Generating key
2025/07/16 08:40:33: Line 1440: Function.Key arguments

Key: 

2025/07/16 08:40:33: Line 1441: var c_kDKdek   = new Key(); // Generating key
2025/07/16 08:40:33: Line 1441: Function.Key arguments

Key: 

2025/07/16 08:40:33: Line 1442: var c_kDKdekT0 = new Key(); // KEK
2025/07/16 08:40:33: Line 1442: Function.Key arguments

Key: 

2025/07/16 08:40:33: Line 1444: c_kDKenc.setUsage(Key.DERIVE);
2025/07/16 08:40:33: Line 1444: Key.setUsage arguments
1: Double: 4

Void: undefined

2025/07/16 08:40:33: Line 1445: c_kDKmac.setUsage(Key.DERIVE);
2025/07/16 08:40:33: Line 1445: Key.setUsage arguments
1: Double: 4

Void: undefined

2025/07/16 08:40:33: Line 1446: c_kDKdek.setUsage(Key.DERIVE);
2025/07/16 08:40:33: Line 1446: Key.setUsage arguments
1: Double: 4

Void: undefined

2025/07/16 08:40:33: Line 1447: c_kDKdekT0.setUsage(Key.WRAP|Key.UNWRAP);
2025/07/16 08:40:33: Line 1447: Key.setUsage arguments
1: Int: 192

Void: undefined

2025/07/16 08:40:33: Line 1451: var c_kSkuEnc   = new Key(); // Data key
2025/07/16 08:40:33: Line 1451: Function.Key arguments

Key: 

2025/07/16 08:40:33: Line 1452: var c_kSkuEncT2 = new Key(); // MAC key
2025/07/16 08:40:33: Line 1452: Function.Key arguments

Key: 

2025/07/16 08:40:33: Line 1453: var c_kSkuMac   = new Key(); // MAC key
2025/07/16 08:40:33: Line 1453: Function.Key arguments

Key: 

2025/07/16 08:40:33: Line 1454: var c_kSkuMacT3s= new Key(); // Data key - single length
2025/07/16 08:40:33: Line 1454: Function.Key arguments

Key: 

2025/07/16 08:40:33: Line 1455: var c_kSkuDek   = new Key(); // KEK
2025/07/16 08:40:33: Line 1455: Function.Key arguments

Key: 

2025/07/16 08:40:33: Line 1456: var c_kSkuDekT3 = new Key(); // Data key
2025/07/16 08:40:33: Line 1456: Function.Key arguments

Key: 

2025/07/16 08:40:33: Line 1458: c_kSkuEnc.setUsage(Key.ENCRYPT|Key.DECRYPT);
2025/07/16 08:40:33: Line 1458: Key.setUsage arguments
1: Int: 9

Void: undefined

2025/07/16 08:40:33: Line 1459: c_kSkuEncT2.setUsage(Key.SIGN|Key.VERIFY);
2025/07/16 08:40:33: Line 1459: Key.setUsage arguments
1: Int: 48

Void: undefined

2025/07/16 08:40:33: Line 1460: c_kSkuMac.setUsage(Key.SIGN|Key.VERIFY);
2025/07/16 08:40:33: Line 1460: Key.setUsage arguments
1: Int: 48

Void: undefined

2025/07/16 08:40:33: Line 1461: c_kSkuMacT3s.setUsage(Key.ENCRYPT|Key.DECRYPT);
2025/07/16 08:40:33: Line 1461: Key.setUsage arguments
1: Int: 9

Void: undefined

2025/07/16 08:40:33: Line 1462: c_kSkuDek.setUsage(Key.WRAP|Key.UNWRAP);
2025/07/16 08:40:33: Line 1462: Key.setUsage arguments
1: Int: 192

Void: undefined

2025/07/16 08:40:33: Line 1463: c_kSkuDekT3.setUsage(Key.ENCRYPT|Key.DECRYPT);
2025/07/16 08:40:33: Line 1463: Key.setUsage arguments
1: Int: 9

Void: undefined

2025/07/16 08:40:33: Line 1467: var c_kNewKenc   = new Key(); // Generating key
2025/07/16 08:40:33: Line 1467: Function.Key arguments

Key: 

2025/07/16 08:40:33: Line 1468: var c_kNewKmac   = new Key(); // Generating key
2025/07/16 08:40:33: Line 1468: Function.Key arguments

Key: 

2025/07/16 08:40:33: Line 1469: var c_kNewKdek   = new Key(); // Generating key
2025/07/16 08:40:33: Line 1469: Function.Key arguments

Key: 

2025/07/16 08:40:33: Line 1470: var c_kNewKdekT0 = new Key(); // KEK
2025/07/16 08:40:33: Line 1470: Function.Key arguments

Key: 

2025/07/16 08:40:33: Line 1490: function c_Main()
2025/07/16 08:40:33: Line 1490: UBJSGlobalClass.c_Main arguments

2025/07/16 08:40:33: Line 1497: new ByteString("!"+"!+"+CALL+"()",ASCII); // Log begin func
2025/07/16 08:40:33: Line 1497: Function.ByteString arguments
1: String: !!+000863.c_Main()

2: Double: 1

ByteString: 21212B3030303836332E635F4D61696E2829

2025/07/16 08:40:33: Line 1281: function c_GetConfig()
2025/07/16 08:40:33: Line 1281: UBJSGlobalClass.c_GetConfig arguments

2025/07/16 08:40:33: Line 1288: new ByteString("!"+"!+"+CALL+"()",ASCII); // Log begin func
2025/07/16 08:40:33: Line 1288: Function.ByteString arguments
1: String: !!+000863.c_GetConfig()

2: Double: 1

ByteString: 21212B3030303836332E635F476574436F6E6669672829

2025/07/16 08:40:33: Line 1227: function c_ReadCat(sCat, bFailOnErr, sErrMsg)
2025/07/16 08:40:33: Line 1227: UBJSGlobalClass.c_ReadCat arguments
1: String: aCrd_CmAid

2: Void: undefined

3: Void: undefined

2025/07/16 08:40:33: Line 1240: new ByteString("!"+"!+"+CALL+"("+sCat+", "+bFailOnErr+", "+sErrMsg+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 1240: Function.ByteString arguments
1: String: !!+000863.c_ReadCat(aCrd_CmAid, false, )

2: Double: 1

ByteString: 21212B3030303836332E635F5265616443617428614372645F436D4169642C2066616C73652C2029

2025/07/16 08:40:33: Line 1246: var bsOut = art.getVariableValue(sCat);
2025/07/16 08:40:33: Line 1246: Art.getVariableValue arguments
1: String: aCrd_CmAid

ByteString: 41303030303030313531303030303030

2025/07/16 08:40:33: Line 1247: var sOut = bsOut.toString();
2025/07/16 08:40:33: Line 1247: ByteString.toString arguments

String: 41303030303030313531303030303030

2025/07/16 08:40:33: Line 1263: new ByteString("!"+"!-"+CALL+"("+sCat+", "+bFailOnErr+", "+sOut+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 1263: Function.ByteString arguments
1: String: !!-000863.c_ReadCat(aCrd_CmAid, false, 41303030303030313531303030303030)

2: Double: 1

ByteString: 21212D3030303836332E635F5265616443617428614372645F436D4169642C2066616C73652C20343133303330333033303330333033313335333133303330333033303330333029

2025/07/16 08:40:33: Line 1264: UBJSGlobalClass.c_ReadCat result
ByteString: 41303030303030313531303030303030

2025/07/16 08:40:33: Line 1144: function c_ProcessDef(bsDat, nEncod, bFailOnErr, sErrMsg)
2025/07/16 08:40:33: Line 1144: UBJSGlobalClass.c_ProcessDef arguments
1: ByteString: 41303030303030313531303030303030

2: Double: 4

3: Boolean: true

4: String: Card Manager AID default: Error evaluating value

2025/07/16 08:40:33: Line 1159: new ByteString("!"+"!+"+CALL+"("+bsDat.toString()+", "+nEncod+", "+bFailOnErr+", "+sErrMsg+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 1159: ByteString.toString arguments

String: 41303030303030313531303030303030

2025/07/16 08:40:33: Line 1159: new ByteString("!"+"!+"+CALL+"("+bsDat.toString()+", "+nEncod+", "+bFailOnErr+", "+sErrMsg+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 1159: Function.ByteString arguments
1: String: !!+000863.c_ProcessDef(41303030303030313531303030303030, 4, true, Card Manager AID default: Error evaluating value)

2: Double: 1

ByteString: 21212B3030303836332E635F50726F636573734465662834313330333033303330333033303331333533313330333033303330333033302C20342C20747275652C2043617264204D616E61676572204149442064656661756C743A204572726F72206576616C756174696E672076616C756529

2025/07/16 08:40:33: Line 1165: var sDat = bsDat.toString(ASCII);
2025/07/16 08:40:33: Line 1165: ByteString.toString arguments
1: Double: 1

String: A000000151000000

2025/07/16 08:40:33: Line 1169: var sTrim = sDat.replace(/^\s+|\s+$/g,''); // Trim L&R spaces
2025/07/16 08:40:33: Line 1169: String.replace arguments
1: RegExp: /^\s+|\s+$/g

2: String: 

String: A000000151000000

2025/07/16 08:40:33: Line 929: function c_MakeBsHex(sDat, bFailOnErr, sErrMsg)
2025/07/16 08:40:33: Line 929: UBJSGlobalClass.c_MakeBsHex arguments
1: String: A000000151000000

2: Boolean: true

3: String: Card Manager AID default: Error evaluating value

2025/07/16 08:40:33: Line 942: new ByteString("!"+"!+"+CALL+"("+sDat+", "+bFailOnErr+", "+sErrMsg+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 942: Function.ByteString arguments
1: String: !!+000863.c_MakeBsHex(A000000151000000, true, Card Manager AID default: Error evaluating value)

2: Double: 1

ByteString: 21212B3030303836332E635F4D616B65427348657828413030303030303135313030303030302C20747275652C2043617264204D616E61676572204149442064656661756C743A204572726F72206576616C756174696E672076616C756529

2025/07/16 08:40:33: Line 950: var arChk = sDat.match(/[0-9a-f]+/i); // Get HEX chars
2025/07/16 08:40:33: Line 950: String.match arguments
1: RegExp: /[0-9a-f]+/i

Array: A000000151000000

2025/07/16 08:40:33: Line 959: var bsOut = new ByteString(sDat, HEX);
2025/07/16 08:40:33: Line 959: Function.ByteString arguments
1: String: A000000151000000

2: Double: 4

ByteString: A000000151000000

2025/07/16 08:40:33: Line 960: var sOut = bsOut.toString();
2025/07/16 08:40:33: Line 960: ByteString.toString arguments

String: A000000151000000

2025/07/16 08:40:33: Line 976: new ByteString("!"+"!-"+CALL+"("+sDat+", "+bFailOnErr+", "+sOut+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 976: Function.ByteString arguments
1: String: !!-000863.c_MakeBsHex(A000000151000000, true, A000000151000000)

2: Double: 1

ByteString: 21212D3030303836332E635F4D616B65427348657828413030303030303135313030303030302C20747275652C204130303030303031353130303030303029

2025/07/16 08:40:33: Line 977: UBJSGlobalClass.c_MakeBsHex result
ByteString: A000000151000000

2025/07/16 08:40:33: Line 1179: var sOut = bsOut.toString();
2025/07/16 08:40:33: Line 1179: ByteString.toString arguments

String: A000000151000000

2025/07/16 08:40:33: Line 1202: new ByteString("!"+"!-"+CALL+"("+bsDat.toString()+", "+nEncod+", "+bFailOnErr+", "+sOut+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 1202: ByteString.toString arguments

String: 41303030303030313531303030303030

2025/07/16 08:40:33: Line 1202: new ByteString("!"+"!-"+CALL+"("+bsDat.toString()+", "+nEncod+", "+bFailOnErr+", "+sOut+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 1202: Function.ByteString arguments
1: String: !!-000863.c_ProcessDef(41303030303030313531303030303030, 4, true, A000000151000000)

2: Double: 1

ByteString: 21212D3030303836332E635F50726F636573734465662834313330333033303330333033303331333533313330333033303330333033302C20342C20747275652C204130303030303031353130303030303029

2025/07/16 08:40:33: Line 1203: UBJSGlobalClass.c_ProcessDef result
ByteString: A000000151000000

2025/07/16 08:40:33: Line 1227: function c_ReadCat(sCat, bFailOnErr, sErrMsg)
2025/07/16 08:40:33: Line 1227: UBJSGlobalClass.c_ReadCat arguments
1: String: aCrd_AuthMeth

2: Void: undefined

3: Void: undefined

2025/07/16 08:40:33: Line 1240: new ByteString("!"+"!+"+CALL+"("+sCat+", "+bFailOnErr+", "+sErrMsg+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 1240: Function.ByteString arguments
1: String: !!+000863.c_ReadCat(aCrd_AuthMeth, false, )

2: Double: 1

ByteString: 21212B3030303836332E635F5265616443617428614372645F417574684D6574682C2066616C73652C2029

2025/07/16 08:40:33: Line 1246: var bsOut = art.getVariableValue(sCat);
2025/07/16 08:40:33: Line 1246: Art.getVariableValue arguments
1: String: aCrd_AuthMeth

ByteString: 3232

2025/07/16 08:40:33: Line 1247: var sOut = bsOut.toString();
2025/07/16 08:40:33: Line 1247: ByteString.toString arguments

String: 3232

2025/07/16 08:40:33: Line 1263: new ByteString("!"+"!-"+CALL+"("+sCat+", "+bFailOnErr+", "+sOut+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 1263: Function.ByteString arguments
1: String: !!-000863.c_ReadCat(aCrd_AuthMeth, false, 3232)

2: Double: 1

ByteString: 21212D3030303836332E635F5265616443617428614372645F417574684D6574682C2066616C73652C203332333229

2025/07/16 08:40:33: Line 1264: UBJSGlobalClass.c_ReadCat result
ByteString: 3232

2025/07/16 08:40:33: Line 1144: function c_ProcessDef(bsDat, nEncod, bFailOnErr, sErrMsg)
2025/07/16 08:40:33: Line 1144: UBJSGlobalClass.c_ProcessDef arguments
1: ByteString: 3232

2: Double: 1

3: Boolean: true

4: String: Card Authentication Method default: Error evaluating value

2025/07/16 08:40:33: Line 1159: new ByteString("!"+"!+"+CALL+"("+bsDat.toString()+", "+nEncod+", "+bFailOnErr+", "+sErrMsg+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 1159: ByteString.toString arguments

String: 3232

2025/07/16 08:40:33: Line 1159: new ByteString("!"+"!+"+CALL+"("+bsDat.toString()+", "+nEncod+", "+bFailOnErr+", "+sErrMsg+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 1159: Function.ByteString arguments
1: String: !!+000863.c_ProcessDef(3232, 1, true, Card Authentication Method default: Error evaluating value)

2: Double: 1

ByteString: 21212B3030303836332E635F50726F6365737344656628333233322C20312C20747275652C20436172642041757468656E7469636174696F6E204D6574686F642064656661756C743A204572726F72206576616C756174696E672076616C756529

2025/07/16 08:40:33: Line 1165: var sDat = bsDat.toString(ASCII);
2025/07/16 08:40:33: Line 1165: ByteString.toString arguments
1: Double: 1

String: 22

2025/07/16 08:40:33: Line 1169: var sTrim = sDat.replace(/^\s+|\s+$/g,''); // Trim L&R spaces
2025/07/16 08:40:33: Line 1169: String.replace arguments
1: RegExp: /^\s+|\s+$/g

2: String: 

String: 22

2025/07/16 08:40:33: Line 1184: var bsOut = new ByteString(sDat, ASCII);
2025/07/16 08:40:33: Line 1184: Function.ByteString arguments
1: String: 22

2: Double: 1

ByteString: 3232

2025/07/16 08:40:33: Line 1185: var sOut = bsOut.toString(ASCII);
2025/07/16 08:40:33: Line 1185: ByteString.toString arguments
1: Double: 1

String: 22

2025/07/16 08:40:33: Line 1202: new ByteString("!"+"!-"+CALL+"("+bsDat.toString()+", "+nEncod+", "+bFailOnErr+", "+sOut+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 1202: ByteString.toString arguments

String: 3232

2025/07/16 08:40:33: Line 1202: new ByteString("!"+"!-"+CALL+"("+bsDat.toString()+", "+nEncod+", "+bFailOnErr+", "+sOut+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 1202: Function.ByteString arguments
1: String: !!-000863.c_ProcessDef(3232, 1, true, 22)

2: Double: 1

ByteString: 21212D3030303836332E635F50726F6365737344656628333233322C20312C20747275652C20323229

2025/07/16 08:40:33: Line 1203: UBJSGlobalClass.c_ProcessDef result
ByteString: 3232

2025/07/16 08:40:33: Line 1306: var nDat = c_MakeNum(bsDat.toString(ASCII), 10, true, sErr+" default: Invalid value");
2025/07/16 08:40:33: Line 1306: ByteString.toString arguments
1: Double: 1

String: 22

2025/07/16 08:40:33: Line 1003: function c_MakeNum(sDat, nRadix, bFailOnErr, sErrMsg)
2025/07/16 08:40:33: Line 1003: UBJSGlobalClass.c_MakeNum arguments
1: String: 22

2: Int: 10

3: Boolean: true

4: String: Card Authentication Method default: Invalid value

2025/07/16 08:40:33: Line 1016: new ByteString("!"+"!+"+CALL+"("+sDat+", "+nRadix+", "+bFailOnErr+", "+sErrMsg+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 1016: Function.ByteString arguments
1: String: !!+000863.c_MakeNum(22, 10, true, Card Authentication Method default: Invalid value)

2: Double: 1

ByteString: 21212B3030303836332E635F4D616B654E756D2832322C2031302C20747275652C20436172642041757468656E7469636174696F6E204D6574686F642064656661756C743A20496E76616C69642076616C756529

2025/07/16 08:40:33: Line 1021: var sTrim = sDat.replace(/^\s+|\s+$/g,''); // Trim L&R spaces
2025/07/16 08:40:33: Line 1021: String.replace arguments
1: RegExp: /^\s+|\s+$/g

2: String: 

String: 22

2025/07/16 08:40:33: Line 1025: var arChk = sTrim.match(/[0-9]+/); // Get DEC digits
2025/07/16 08:40:33: Line 1025: String.match arguments
1: RegExp: /[0-9]+/

Array: 22

2025/07/16 08:40:33: Line 1034: var nOut = parseInt(sTrim, nRadix);
2025/07/16 08:40:33: Line 1034: UBJSGlobalClass.parseInt arguments
1: String: 22

2: Int: 10

Int: 22

2025/07/16 08:40:33: Line 1035: if ((isNaN(nOut))||(nOut == null)||(nOut.constructor != Number))
2025/07/16 08:40:33: Line 1035: UBJSGlobalClass.isNaN arguments
1: Int: 22

Boolean: false

2025/07/16 08:40:33: Line 1037: var sOut = nOut.toString();
2025/07/16 08:40:33: Line 1037: Number.toString arguments

String: 22

2025/07/16 08:40:33: Line 1053: new ByteString("!"+"!-"+CALL+"("+sDat+", "+nRadix+", "+bFailOnErr+", "+sOut+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 1053: Function.ByteString arguments
1: String: !!-000863.c_MakeNum(22, 10, true, 22)

2: Double: 1

ByteString: 21212D3030303836332E635F4D616B654E756D2832322C2031302C20747275652C20323229

2025/07/16 08:40:33: Line 1054: UBJSGlobalClass.c_MakeNum result
Int: 22

2025/07/16 08:40:33: Line 1227: function c_ReadCat(sCat, bFailOnErr, sErrMsg)
2025/07/16 08:40:33: Line 1227: UBJSGlobalClass.c_ReadCat arguments
1: String: aCrd_AuthKeyVersion

2: Void: undefined

3: Void: undefined

2025/07/16 08:40:33: Line 1240: new ByteString("!"+"!+"+CALL+"("+sCat+", "+bFailOnErr+", "+sErrMsg+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 1240: Function.ByteString arguments
1: String: !!+000863.c_ReadCat(aCrd_AuthKeyVersion, false, )

2: Double: 1

ByteString: 21212B3030303836332E635F5265616443617428614372645F417574684B657956657273696F6E2C2066616C73652C2029

2025/07/16 08:40:33: Line 1246: var bsOut = art.getVariableValue(sCat);
2025/07/16 08:40:33: Line 1246: Art.getVariableValue arguments
1: String: aCrd_AuthKeyVersion

Error: Error: An argument cannot be converted to the correct type
CAT aCrd_AuthKeyVersion: unknown CAT variable: eCRD_AuthKeyVersion


2025/07/16 08:40:33: Line 1258: art.getErrorMessages(); // Clear error messages
2025/07/16 08:40:33: Line 1258: Art.getErrorMessages arguments

String: 

2025/07/16 08:40:33: Line 1263: new ByteString("!"+"!-"+CALL+"("+sCat+", "+bFailOnErr+", "+sOut+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 1263: Function.ByteString arguments
1: String: !!-000863.c_ReadCat(aCrd_AuthKeyVersion, false, null)

2: Double: 1

ByteString: 21212D3030303836332E635F5265616443617428614372645F417574684B657956657273696F6E2C2066616C73652C206E756C6C29

2025/07/16 08:40:33: Line 1264: UBJSGlobalClass.c_ReadCat result
null: null

2025/07/16 08:40:33: Line 1227: function c_ReadCat(sCat, bFailOnErr, sErrMsg)
2025/07/16 08:40:33: Line 1227: UBJSGlobalClass.c_ReadCat arguments
1: String: aCrd_UpdateCmKeys

2: Void: undefined

3: Void: undefined

2025/07/16 08:40:33: Line 1240: new ByteString("!"+"!+"+CALL+"("+sCat+", "+bFailOnErr+", "+sErrMsg+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 1240: Function.ByteString arguments
1: String: !!+000863.c_ReadCat(aCrd_UpdateCmKeys, false, )

2: Double: 1

ByteString: 21212B3030303836332E635F5265616443617428614372645F557064617465436D4B6579732C2066616C73652C2029

2025/07/16 08:40:33: Line 1246: var bsOut = art.getVariableValue(sCat);
2025/07/16 08:40:33: Line 1246: Art.getVariableValue arguments
1: String: aCrd_UpdateCmKeys

Error: Error: An argument cannot be converted to the correct type
CAT aCrd_UpdateCmKeys: unknown CAT variable: eCRD_UpdateCmKeys


2025/07/16 08:40:33: Line 1258: art.getErrorMessages(); // Clear error messages
2025/07/16 08:40:33: Line 1258: Art.getErrorMessages arguments

String: 

2025/07/16 08:40:33: Line 1263: new ByteString("!"+"!-"+CALL+"("+sCat+", "+bFailOnErr+", "+sOut+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 1263: Function.ByteString arguments
1: String: !!-000863.c_ReadCat(aCrd_UpdateCmKeys, false, null)

2: Double: 1

ByteString: 21212D3030303836332E635F5265616443617428614372645F557064617465436D4B6579732C2066616C73652C206E756C6C29

2025/07/16 08:40:33: Line 1264: UBJSGlobalClass.c_ReadCat result
null: null

2025/07/16 08:40:33: Line 1227: function c_ReadCat(sCat, bFailOnErr, sErrMsg)
2025/07/16 08:40:33: Line 1227: UBJSGlobalClass.c_ReadCat arguments
1: String: aCrd_LockCm

2: Void: undefined

3: Void: undefined

2025/07/16 08:40:33: Line 1240: new ByteString("!"+"!+"+CALL+"("+sCat+", "+bFailOnErr+", "+sErrMsg+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 1240: Function.ByteString arguments
1: String: !!+000863.c_ReadCat(aCrd_LockCm, false, )

2: Double: 1

ByteString: 21212B3030303836332E635F5265616443617428614372645F4C6F636B436D2C2066616C73652C2029

2025/07/16 08:40:33: Line 1246: var bsOut = art.getVariableValue(sCat);
2025/07/16 08:40:33: Line 1246: Art.getVariableValue arguments
1: String: aCrd_LockCm

ByteString: 31

2025/07/16 08:40:33: Line 1247: var sOut = bsOut.toString();
2025/07/16 08:40:33: Line 1247: ByteString.toString arguments

String: 31

2025/07/16 08:40:33: Line 1263: new ByteString("!"+"!-"+CALL+"("+sCat+", "+bFailOnErr+", "+sOut+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 1263: Function.ByteString arguments
1: String: !!-000863.c_ReadCat(aCrd_LockCm, false, 31)

2: Double: 1

ByteString: 21212D3030303836332E635F5265616443617428614372645F4C6F636B436D2C2066616C73652C20333129

2025/07/16 08:40:33: Line 1264: UBJSGlobalClass.c_ReadCat result
ByteString: 31

2025/07/16 08:40:33: Line 1144: function c_ProcessDef(bsDat, nEncod, bFailOnErr, sErrMsg)
2025/07/16 08:40:33: Line 1144: UBJSGlobalClass.c_ProcessDef arguments
1: ByteString: 31

2: Double: 1

3: Boolean: true

4: String: Lock Card Manager default: Error evaluating value

2025/07/16 08:40:33: Line 1159: new ByteString("!"+"!+"+CALL+"("+bsDat.toString()+", "+nEncod+", "+bFailOnErr+", "+sErrMsg+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 1159: ByteString.toString arguments

String: 31

2025/07/16 08:40:33: Line 1159: new ByteString("!"+"!+"+CALL+"("+bsDat.toString()+", "+nEncod+", "+bFailOnErr+", "+sErrMsg+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 1159: Function.ByteString arguments
1: String: !!+000863.c_ProcessDef(31, 1, true, Lock Card Manager default: Error evaluating value)

2: Double: 1

ByteString: 21212B3030303836332E635F50726F636573734465662833312C20312C20747275652C204C6F636B2043617264204D616E616765722064656661756C743A204572726F72206576616C756174696E672076616C756529

2025/07/16 08:40:33: Line 1165: var sDat = bsDat.toString(ASCII);
2025/07/16 08:40:33: Line 1165: ByteString.toString arguments
1: Double: 1

String: 1

2025/07/16 08:40:33: Line 1169: var sTrim = sDat.replace(/^\s+|\s+$/g,''); // Trim L&R spaces
2025/07/16 08:40:33: Line 1169: String.replace arguments
1: RegExp: /^\s+|\s+$/g

2: String: 

String: 1

2025/07/16 08:40:33: Line 1184: var bsOut = new ByteString(sDat, ASCII);
2025/07/16 08:40:33: Line 1184: Function.ByteString arguments
1: String: 1

2: Double: 1

ByteString: 31

2025/07/16 08:40:33: Line 1185: var sOut = bsOut.toString(ASCII);
2025/07/16 08:40:33: Line 1185: ByteString.toString arguments
1: Double: 1

String: 1

2025/07/16 08:40:33: Line 1202: new ByteString("!"+"!-"+CALL+"("+bsDat.toString()+", "+nEncod+", "+bFailOnErr+", "+sOut+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 1202: ByteString.toString arguments

String: 31

2025/07/16 08:40:33: Line 1202: new ByteString("!"+"!-"+CALL+"("+bsDat.toString()+", "+nEncod+", "+bFailOnErr+", "+sOut+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 1202: Function.ByteString arguments
1: String: !!-000863.c_ProcessDef(31, 1, true, 1)

2: Double: 1

ByteString: 21212D3030303836332E635F50726F636573734465662833312C20312C20747275652C203129

2025/07/16 08:40:33: Line 1203: UBJSGlobalClass.c_ProcessDef result
ByteString: 31

2025/07/16 08:40:33: Line 1339: var nDat = c_MakeNum(bsDat.toString(ASCII), 10, true, sErr+" default: Invalid value");
2025/07/16 08:40:33: Line 1339: ByteString.toString arguments
1: Double: 1

String: 1

2025/07/16 08:40:33: Line 1003: function c_MakeNum(sDat, nRadix, bFailOnErr, sErrMsg)
2025/07/16 08:40:33: Line 1003: UBJSGlobalClass.c_MakeNum arguments
1: String: 1

2: Int: 10

3: Boolean: true

4: String: Lock Card Manager default: Invalid value

2025/07/16 08:40:33: Line 1016: new ByteString("!"+"!+"+CALL+"("+sDat+", "+nRadix+", "+bFailOnErr+", "+sErrMsg+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 1016: Function.ByteString arguments
1: String: !!+000863.c_MakeNum(1, 10, true, Lock Card Manager default: Invalid value)

2: Double: 1

ByteString: 21212B3030303836332E635F4D616B654E756D28312C2031302C20747275652C204C6F636B2043617264204D616E616765722064656661756C743A20496E76616C69642076616C756529

2025/07/16 08:40:33: Line 1021: var sTrim = sDat.replace(/^\s+|\s+$/g,''); // Trim L&R spaces
2025/07/16 08:40:33: Line 1021: String.replace arguments
1: RegExp: /^\s+|\s+$/g

2: String: 

String: 1

2025/07/16 08:40:33: Line 1025: var arChk = sTrim.match(/[0-9]+/); // Get DEC digits
2025/07/16 08:40:33: Line 1025: String.match arguments
1: RegExp: /[0-9]+/

Array: 1

2025/07/16 08:40:33: Line 1034: var nOut = parseInt(sTrim, nRadix);
2025/07/16 08:40:33: Line 1034: UBJSGlobalClass.parseInt arguments
1: String: 1

2: Int: 10

Int: 1

2025/07/16 08:40:33: Line 1035: if ((isNaN(nOut))||(nOut == null)||(nOut.constructor != Number))
2025/07/16 08:40:33: Line 1035: UBJSGlobalClass.isNaN arguments
1: Int: 1

Boolean: false

2025/07/16 08:40:33: Line 1037: var sOut = nOut.toString();
2025/07/16 08:40:33: Line 1037: Number.toString arguments

String: 1

2025/07/16 08:40:33: Line 1053: new ByteString("!"+"!-"+CALL+"("+sDat+", "+nRadix+", "+bFailOnErr+", "+sOut+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 1053: Function.ByteString arguments
1: String: !!-000863.c_MakeNum(1, 10, true, 1)

2: Double: 1

ByteString: 21212D3030303836332E635F4D616B654E756D28312C2031302C20747275652C203129

2025/07/16 08:40:33: Line 1054: UBJSGlobalClass.c_MakeNum result
Int: 1

2025/07/16 08:40:33: Line 1227: function c_ReadCat(sCat, bFailOnErr, sErrMsg)
2025/07/16 08:40:33: Line 1227: UBJSGlobalClass.c_ReadCat arguments
1: String: aCrd_SetTimeout

2: Void: undefined

3: Void: undefined

2025/07/16 08:40:33: Line 1240: new ByteString("!"+"!+"+CALL+"("+sCat+", "+bFailOnErr+", "+sErrMsg+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 1240: Function.ByteString arguments
1: String: !!+000863.c_ReadCat(aCrd_SetTimeout, false, )

2: Double: 1

ByteString: 21212B3030303836332E635F5265616443617428614372645F53657454696D656F75742C2066616C73652C2029

2025/07/16 08:40:33: Line 1246: var bsOut = art.getVariableValue(sCat);
2025/07/16 08:40:33: Line 1246: Art.getVariableValue arguments
1: String: aCrd_SetTimeout

Error: Error: An argument cannot be converted to the correct type
CAT aCrd_SetTimeout: unknown CAT variable: eCRD_SetTimeout


2025/07/16 08:40:33: Line 1258: art.getErrorMessages(); // Clear error messages
2025/07/16 08:40:33: Line 1258: Art.getErrorMessages arguments

String: 

2025/07/16 08:40:33: Line 1263: new ByteString("!"+"!-"+CALL+"("+sCat+", "+bFailOnErr+", "+sOut+")",ASCII); // Log end func
2025/07/16 08:40:33: Line 1263: Function.ByteString arguments
1: String: !!-000863.c_ReadCat(aCrd_SetTimeout, false, null)

2: Double: 1

ByteString: 21212D3030303836332E635F5265616443617428614372645F53657454696D656F75742C2066616C73652C206E756C6C29

2025/07/16 08:40:33: Line 1264: UBJSGlobalClass.c_ReadCat result
null: null

2025/07/16 08:40:33: Line 1365: new ByteString(c_bsCmAid, ASCII);
2025/07/16 08:40:33: Line 1365: Function.ByteString arguments
1: ByteString: A000000151000000

2: Double: 1

2025/07/16 08:40:33: Line 1365: new ByteString(c_bsCmAid, ASCII);
2025/07/16 08:40:33: Line 1365: ByteString.toString arguments

String: A000000151000000

ByteString: 41303030303030313531303030303030

2025/07/16 08:40:33: Line 1366: new ByteString(c_nAuthMeth, ASCII);
2025/07/16 08:40:33: Line 1366: Function.ByteString arguments
1: Int: 22

2: Double: 1

ByteString: 3232

2025/07/16 08:40:33: Line 1367: new ByteString(c_nAuthKeyVersion, ASCII);
2025/07/16 08:40:33: Line 1367: Function.ByteString arguments
1: Int: 0

2: Double: 1

ByteString: 30

2025/07/16 08:40:33: Line 1368: new ByteString(c_nUpdateCmKeys, ASCII);
2025/07/16 08:40:33: Line 1368: Function.ByteString arguments
1: Int: 0

2: Double: 1

ByteString: 30

2025/07/16 08:40:33: Line 1369: new ByteString(c_bLockCm, ASCII);
2025/07/16 08:40:33: Line 1369: Function.ByteString arguments
1: Boolean: true

2: Double: 1

ByteString: 74727565

2025/07/16 08:40:33: Line 1370: new ByteString(c_nSetCardTimeout, ASCII);
2025/07/16 08:40:33: Line 1370: Function.ByteString arguments
1: Int: 0

2: Double: 1

ByteString: 30

2025/07/16 08:40:33: Line 1374: new ByteString("!"+"!-"+CALL+"()",ASCII); // Log end func
2025/07/16 08:40:33: Line 1374: Function.ByteString arguments
1: String: !!-000863.c_GetConfig()

2: Double: 1

ByteString: 21212D3030303836332E635F476574436F6E6669672829

2025/07/16 08:40:33: Line 1375: UBJSGlobalClass.c_GetConfig result
Void: undefined

2025/07/16 08:40:33: Line 49: function c_Auth(bsAid, nMeth, nVr, nId, nSecLvl)
2025/07/16 08:40:33: Line 49: UBJSGlobalClass.c_Auth arguments
1: ByteString: A000000151000000

2: Int: 22

3: Int: 0

4: Int: 0

5: Int: 0

2025/07/16 08:40:33: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:33: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 22

Boolean: false

2025/07/16 08:40:33: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:33: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:33: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:33: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:33: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:33: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:33: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 58: ByteString.toString arguments

String: A000000151000000

2025/07/16 08:40:33: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 58: Number.toString arguments
1: Int: 10

String: 22

2025/07/16 08:40:33: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:33: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:33: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:33: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:33: Line 58: Function.ByteString arguments
1: String: !!+000863.c_Auth(A000000151000000, 22, 0, 0, 0)

2: Double: 1

ByteString: 21212B3030303836332E635F4175746828413030303030303135313030303030302C2032322C20302C20302C203029

2025/07/16 08:40:33: Line 62: var bsF001 = new ByteString("F001", HEX);
2025/07/16 08:40:33: Line 62: Function.ByteString arguments
1: String: F001

2: Double: 4

ByteString: F001

2025/07/16 08:40:33: Line 63: var bsF002 = new ByteString("F002", HEX);
2025/07/16 08:40:33: Line 63: Function.ByteString arguments
1: String: F002

2: Double: 4

ByteString: F002

2025/07/16 08:40:33: Line 64: var bsF003 = new ByteString("F003", HEX);
2025/07/16 08:40:33: Line 64: Function.ByteString arguments
1: String: F003

2: Double: 4

ByteString: F003

2025/07/16 08:40:33: Line 65: var bs0F01 = new ByteString("0F01", HEX);
2025/07/16 08:40:33: Line 65: Function.ByteString arguments
1: String: 0F01

2: Double: 4

ByteString: 0F01

2025/07/16 08:40:33: Line 66: var bs0F02 = new ByteString("0F02", HEX);
2025/07/16 08:40:33: Line 66: Function.ByteString arguments
1: String: 0F02

2: Double: 4

ByteString: 0F02

2025/07/16 08:40:33: Line 67: var bs0F03 = new ByteString("0F03", HEX);
2025/07/16 08:40:33: Line 67: Function.ByteString arguments
1: String: 0F03

2: Double: 4

ByteString: 0F03

2025/07/16 08:40:33: Line 68: var bs0182 = new ByteString("0182", HEX);
2025/07/16 08:40:33: Line 68: Function.ByteString arguments
1: String: 0182

2: Double: 4

ByteString: 0182

2025/07/16 08:40:33: Line 69: var bs0101 = new ByteString("0101", HEX);
2025/07/16 08:40:33: Line 69: Function.ByteString arguments
1: String: 0101

2: Double: 4

ByteString: 0101

2025/07/16 08:40:33: Line 70: var bs0181 = new ByteString("0181", HEX);
2025/07/16 08:40:33: Line 70: Function.ByteString arguments
1: String: 0181

2: Double: 4

ByteString: 0181

2025/07/16 08:40:33: Line 71: var bsZero12 = new ByteString("000000000000000000000000",HEX);
2025/07/16 08:40:33: Line 71: Function.ByteString arguments
1: String: 000000000000000000000000

2: Double: 4

ByteString: 000000000000000000000000

2025/07/16 08:40:33: Line 72: var bsZero8  = new ByteString("0000000000000000",HEX);
2025/07/16 08:40:33: Line 72: Function.ByteString arguments
1: String: 0000000000000000

2: Double: 4

ByteString: 0000000000000000

2025/07/16 08:40:33: Line 77: card.sendApdu(0x00,0xA4,0x04,0x00,bsAid,0x00); //Select AID
2025/07/16 08:40:33: Line 77: Card.sendApdu arguments
1: Int: 0

2: Int: 164

3: Int: 4

4: Int: 0

5: ByteString: A000000151000000

6: Int: 0

2025/07/16 08:40:33: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 00     !IOCTL ISOCase4 
0010: A4 04 00 08 A0 00 00 01-51 00 00 00 00 21 53 57             Q    !SW
0020: 02 2B 2A                                             +*             

2025/07/16 08:40:33: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: 6F 10 A5 04 9F 65 01 FF-84 08 A0 00 00 01 51 00     o    e        Q 
0010: 00 00                                                               

ByteString: 6F10A5049F6501FF8408A000000151000000

2025/07/16 08:40:33: Line 81: var bsRterm = crypto.generateRandom(8);
2025/07/16 08:40:33: Line 81: Crypto.generateRandom arguments
1: Int: 8

ByteString: F6D13D59C230488C

2025/07/16 08:40:33: Line 87: var bsIuRtn = card.sendApdu(0x80,0x50,nVr,nId,bsRterm,0x00);//Init update
2025/07/16 08:40:33: Line 87: Card.sendApdu arguments
1: Int: 128

2: Int: 80

3: Int: 0

4: Int: 0

5: ByteString: F6D13D59C230488C

6: Int: 0

2025/07/16 08:40:33: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: 50 00 00 08 F6 D1 3D 59-C2 30 48 8C 00 21 53 57     P     =Y 0H  !SW
0020: 02 2B 2A                                             +*             

2025/07/16 08:40:34: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: FF FF FF FF FB F3 04 EA-75 44 01 02 00 01 2A B3             uD    * 
0010: 4B A2 3E 6C C2 DC 68 0B-AE 21 94 2F                 K >l  h  ! /    

ByteString: FFFFFFFFFBF304EA7544010200012AB34BA23E6CC2DC680BAE21942F

2025/07/16 08:40:34: Line 235: var bsIuDiv  = bsIuRtn.bytes(4,6);
2025/07/16 08:40:34: Line 235: ByteString.bytes arguments
1: Int: 4

2: Int: 6

ByteString: FBF304EA7544

2025/07/16 08:40:34: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:34: Line 236: ByteString.concat arguments
1: ByteString: F001

ByteString: FBF304EA7544F001

2025/07/16 08:40:34: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:34: Line 236: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F001FBF304EA7544

2025/07/16 08:40:34: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:34: Line 236: ByteString.concat arguments
1: ByteString: 0F01

ByteString: FBF304EA7544F001FBF304EA75440F01

2025/07/16 08:40:34: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:34: Line 237: ByteString.concat arguments
1: ByteString: F002

ByteString: FBF304EA7544F002

2025/07/16 08:40:34: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:34: Line 237: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F002FBF304EA7544

2025/07/16 08:40:34: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:34: Line 237: ByteString.concat arguments
1: ByteString: 0F02

ByteString: FBF304EA7544F002FBF304EA75440F02

2025/07/16 08:40:34: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:34: Line 238: ByteString.concat arguments
1: ByteString: F003

ByteString: FBF304EA7544F003

2025/07/16 08:40:34: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:34: Line 238: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F003FBF304EA7544

2025/07/16 08:40:34: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:34: Line 238: ByteString.concat arguments
1: ByteString: 0F03

ByteString: FBF304EA7544F003FBF304EA75440F03

2025/07/16 08:40:34: Line 242: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsEncDiv, c_kDKenc);
2025/07/16 08:40:34: Line 242: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F001FBF304EA75440F01

4: Key: 

Void: undefined

2025/07/16 08:40:34: Line 243: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsMacDiv, c_kDKmac);
2025/07/16 08:40:34: Line 243: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F002FBF304EA75440F02

4: Key: 

Void: undefined

2025/07/16 08:40:34: Line 244: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsDekDiv, c_kDKdek);
2025/07/16 08:40:34: Line 244: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F003FBF304EA75440F03

4: Key: 

Void: undefined

2025/07/16 08:40:34: Line 245: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsDekDiv, c_kDKdekT0);
2025/07/16 08:40:34: Line 245: Crypto.deriveKey arguments
1: Key: 01880000001881AFC1C3D30E5A08EA8C4A643F9614286845461D50A51676000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101000000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C00000001010100000163000000010100000001650000000101000000016400000001010000000161000000040100000010800001020000001001323032353037313630353338353630308000010300000000000000010200000000000000011000000000000000011100000000008000012B000000010100800001290000000101010000016200000001010180000128000000010100000000030000000000000001700000000101010000000000000000000008AB3B96B041DC31410000001838976CB6C4F4623C7710D2EAB5D642902B7ADB33A7E3BF01

2: Double: 5

3: ByteString: FBF304EA7544F003FBF304EA75440F03

4: Key: 

Void: undefined

2025/07/16 08:40:34: Line 247: c_kDKenc.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:34: Line 247: Key.getKcv arguments
1: Double: 1048576

ByteString: 2F60DAE9569C6DE8

2025/07/16 08:40:34: Line 248: c_kDKmac.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:34: Line 248: Key.getKcv arguments
1: Double: 1048576

ByteString: 5CCE4854D71634D1

2025/07/16 08:40:34: Line 249: c_kDKdek.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:34: Line 249: Key.getKcv arguments
1: Double: 1048576

ByteString: 36B975605BE0D863

2025/07/16 08:40:34: Line 253: var bsSeqPad = bsIuRtn.bytes(12,2).concat(bsZero12); // Get and pad sequence count
2025/07/16 08:40:34: Line 253: ByteString.bytes arguments
1: Int: 12

2: Int: 2

ByteString: 0001

2025/07/16 08:40:34: Line 253: var bsSeqPad = bsIuRtn.bytes(12,2).concat(bsZero12); // Get and pad sequence count
2025/07/16 08:40:34: Line 253: ByteString.concat arguments
1: ByteString: 000000000000000000000000

ByteString: 0001000000000000000000000000

2025/07/16 08:40:34: Line 254: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEnc);
2025/07/16 08:40:34: Line 254: ByteString.concat arguments
1: ByteString: 0001000000000000000000000000

ByteString: 01820001000000000000000000000000

2025/07/16 08:40:34: Line 254: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEnc);
2025/07/16 08:40:34: Line 254: Crypto.deriveKey arguments
1: Key: 0188000000181C53DB39B24C7842CDF2397860865171A9A3BDB33E3E8F33000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101000000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C000000010101000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333835363030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B00000001010080000128000000010100000000030000000000000001700000000101010000000000000000000008B67BA4EE64EB094D0000001886AA376DB7930AF33760527C6E4A8FE22B7ADB33A7E3BF01

2: Double: 2

3: ByteString: 01820001000000000000000000000000

4: Key: 

Void: undefined

2025/07/16 08:40:34: Line 255: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEncT2);
2025/07/16 08:40:34: Line 255: ByteString.concat arguments
1: ByteString: 0001000000000000000000000000

ByteString: 01820001000000000000000000000000

2025/07/16 08:40:34: Line 255: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEncT2);
2025/07/16 08:40:34: Line 255: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01820001000000000000000000000000

4: Key: 

Void: undefined

2025/07/16 08:40:34: Line 256: crypto.deriveKey(c_kDKmac, Crypto.DES_CBC, bs0101.concat(bsSeqPad), c_kSkuMac);
2025/07/16 08:40:34: Line 256: ByteString.concat arguments
1: ByteString: 0001000000000000000000000000

ByteString: 01010001000000000000000000000000

2025/07/16 08:40:34: Line 256: crypto.deriveKey(c_kDKmac, Crypto.DES_CBC, bs0101.concat(bsSeqPad), c_kSkuMac);
2025/07/16 08:40:34: Line 256: Crypto.deriveKey arguments
1: Key: 018800000018CBBF06B3292727B3C2E642F9DBD1163DB9AB4B268F8C7749000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101000000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C000000010101000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333835363030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B000000010100800001280000000101000000000300000000000000017000000001010100000000000000000000086685B890EC2AD42C000000180FD987581897C56FF4C267A7E60D27042B7ADB33A7E3BF01

2: Double: 2

3: ByteString: 01010001000000000000000000000000

4: Key: 

Void: undefined

2025/07/16 08:40:34: Line 257: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDek);
2025/07/16 08:40:34: Line 257: ByteString.concat arguments
1: ByteString: 0001000000000000000000000000

ByteString: 01810001000000000000000000000000

2025/07/16 08:40:34: Line 257: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDek);
2025/07/16 08:40:34: Line 257: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01810001000000000000000000000000

4: Key: 

Void: undefined

2025/07/16 08:40:34: Line 258: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDekT3);
2025/07/16 08:40:34: Line 258: ByteString.concat arguments
1: ByteString: 0001000000000000000000000000

ByteString: 01810001000000000000000000000000

2025/07/16 08:40:34: Line 258: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDekT3);
2025/07/16 08:40:34: Line 258: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01810001000000000000000000000000

4: Key: 

Void: undefined

2025/07/16 08:40:34: Line 260: c_kSkuEnc.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:34: Line 260: Key.getKcv arguments
1: Double: 1048576

ByteString: 604D6FD6F3FE135F

2025/07/16 08:40:34: Line 261: c_kSkuMac.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:34: Line 261: Key.getKcv arguments
1: Double: 1048576

ByteString: DC5FDAB0BA492DED

2025/07/16 08:40:34: Line 262: c_kSkuDek.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:34: Line 262: Key.getKcv arguments
1: Double: 1048576

ByteString: E0F2B1A849CD6765

2025/07/16 08:40:34: Line 266: var kTmp = new Key();
2025/07/16 08:40:34: Line 266: Function.Key arguments

Key: 

2025/07/16 08:40:34: Line 267: crypto.wrap(c_kKek, Crypto.DES_ECB, c_kSkuMac, kTmp);
2025/07/16 08:40:34: Line 267: Crypto.wrap arguments
1: Key

2: Double: 5

3: Key

4: Key: 

Void: undefined

2025/07/16 08:40:34: Line 268: var bsTmp = new ByteString();
2025/07/16 08:40:34: Line 268: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:34: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:34: Line 269: Key.getComponent arguments
1: Double: 393216

ByteString: 35CEDAEA966F7B70D765E9ACB6B14A78

2025/07/16 08:40:34: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:34: Line 269: ByteString.left arguments
1: Int: 8

ByteString: 35CEDAEA966F7B70

2025/07/16 08:40:34: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:34: Line 269: Art.execute arguments
1: String: UBDesECB

2: String: DecryptKey3

3: ByteString

4: ByteString: 35CEDAEA966F7B70

5: ByteString: 

Int: 0

2025/07/16 08:40:34: Line 270: c_kSkuMacT3s.setComponent(Key.DES, bsTmp);
2025/07/16 08:40:34: Line 270: Key.setComponent arguments
1: Double: 393216

2: ByteString

Void: undefined

2025/07/16 08:40:34: Line 315: var bsRcard = bsIuRtn.bytes(12,8);      // Get card random number
2025/07/16 08:40:34: Line 315: ByteString.bytes arguments
1: Int: 12

2: Int: 8

ByteString: 00012AB34BA23E6C

2025/07/16 08:40:34: Line 316: var bsMacDat = bsRterm.concat(bsRcard).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:34: Line 316: ByteString.concat arguments
1: ByteString: 00012AB34BA23E6C

ByteString: F6D13D59C230488C00012AB34BA23E6C

2025/07/16 08:40:34: Line 316: var bsMacDat = bsRterm.concat(bsRcard).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:34: Line 316: ByteString.pad arguments
1: Double: 37

ByteString: F6D13D59C230488C00012AB34BA23E6C8000000000000000

2025/07/16 08:40:34: Line 317: var bsMac = crypto.sign(c_kSkuEncT2, Crypto.DES_MAC, bsMacDat);
2025/07/16 08:40:34: Line 317: Crypto.sign arguments
1: Key

2: Double: 8

3: ByteString: F6D13D59C230488C00012AB34BA23E6C8000000000000000

ByteString: C2DC680BAE21942F

2025/07/16 08:40:34: Line 321: var bsCrdCg = bsIuRtn.bytes(20,8); // Card's cryptogram
2025/07/16 08:40:34: Line 321: ByteString.bytes arguments
1: Int: 20

2: Int: 8

ByteString: C2DC680BAE21942F

2025/07/16 08:40:34: Line 322: if (bsMac.equals(bsCrdCg))
2025/07/16 08:40:34: Line 322: ByteString.equals arguments
1: ByteString: C2DC680BAE21942F

Int: 1

2025/07/16 08:40:34: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:34: Line 323: ByteString.toString arguments

String: C2DC680BAE21942F

2025/07/16 08:40:34: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:34: Line 323: ByteString.toString arguments

String: C2DC680BAE21942F

2025/07/16 08:40:34: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:34: Line 323: GPSystem.trace arguments
1: String: 000863.c_Auth(): Authentication passed; Card's cryptogram (C2DC680BAE21942F) matches calculated cryptogram (C2DC680BAE21942F).

2025/07/16 08:40:34: GPSystem.trace
000863.c_Auth(): Authentication passed; Card's cryptogram (C2DC680BAE21942F) matches calculated cryptogram (C2DC680BAE21942F).

Boolean: true

2025/07/16 08:40:34: Line 331: var bsCgDat = bsRcard.concat(bsRterm).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:34: Line 331: ByteString.concat arguments
1: ByteString: F6D13D59C230488C

ByteString: 00012AB34BA23E6CF6D13D59C230488C

2025/07/16 08:40:34: Line 331: var bsCgDat = bsRcard.concat(bsRterm).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:34: Line 331: ByteString.pad arguments
1: Double: 37

ByteString: 00012AB34BA23E6CF6D13D59C230488C8000000000000000

2025/07/16 08:40:34: Line 332: var bsCg = crypto.sign(c_kSkuEncT2, Crypto.DES_MAC, bsCgDat);
2025/07/16 08:40:34: Line 332: Crypto.sign arguments
1: Key

2: Double: 8

3: ByteString: 00012AB34BA23E6CF6D13D59C230488C8000000000000000

ByteString: E59DF2B229AE6705

2025/07/16 08:40:34: Line 371: function c_sendApduS2(nCla, nIns, nP1, nP2, bsDat, nMech, nSecLvl, bsIcv, sMsg)
2025/07/16 08:40:34: Line 371: UBJSGlobalClass.c_sendApduS2 arguments
1: Int: 132

2: Int: 130

3: Int: 0

4: Int: 0

5: ByteString: E59DF2B229AE6705

6: Double: 9

7: Int: 0

8: ByteString: 0000000000000000

9: String: External Auth

2025/07/16 08:40:34: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:34: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 132

Boolean: false

2025/07/16 08:40:34: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:34: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 130

Boolean: false

2025/07/16 08:40:34: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:34: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:34: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:34: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:34: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:34: Line 378: UBJSGlobalClass.isNaN arguments
1: Double: 9

Boolean: false

2025/07/16 08:40:34: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:34: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:34: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:34: Line 380: Number.toString arguments
1: Int: 16

String: 84

2025/07/16 08:40:34: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:34: Line 380: Number.toString arguments
1: Int: 16

String: 82

2025/07/16 08:40:34: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:34: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:34: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:34: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:34: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:34: Line 380: ByteString.toString arguments

String: E59DF2B229AE6705

2025/07/16 08:40:34: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:34: Line 380: Number.toString arguments
1: Int: 16

String: 9

2025/07/16 08:40:34: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:34: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:34: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:34: Line 380: ByteString.toString arguments

String: 0000000000000000

2025/07/16 08:40:34: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:34: Line 380: Function.ByteString arguments
1: String: !!+000863.c_sendApduS2(84, 82, 0, 0, E59DF2B229AE6705, 9, 0, 0000000000000000, External Auth)

2: Double: 1

ByteString: 21212B3030303836332E635F73656E644170647553322838342C2038322C20302C20302C20453539444632423232394145363730352C20392C20302C20303030303030303030303030303030302C2045787465726E616C204175746829

2025/07/16 08:40:34: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:34: Line 384: Number.toString arguments
1: Int: 16

String: 84

2025/07/16 08:40:34: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:34: Line 384: String.toUpperCase arguments

String: 84

2025/07/16 08:40:34: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:34: Line 384: String.substr arguments
1: Int: -2

2: Int: 2

String: 84

2025/07/16 08:40:34: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:34: Line 385: Number.toString arguments
1: Int: 16

String: 82

2025/07/16 08:40:34: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:34: Line 385: String.toUpperCase arguments

String: 82

2025/07/16 08:40:34: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:34: Line 385: String.substr arguments
1: Int: -2

2: Int: 2

String: 82

2025/07/16 08:40:34: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:34: Line 386: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:34: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:34: Line 386: String.toUpperCase arguments

String: 0

2025/07/16 08:40:34: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:34: Line 386: String.substr arguments
1: Int: -2

2: Int: 2

String: 00

2025/07/16 08:40:34: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:34: Line 387: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:34: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:34: Line 387: String.toUpperCase arguments

String: 0

2025/07/16 08:40:34: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:34: Line 387: String.substr arguments
1: Int: -2

2: Int: 2

String: 00

2025/07/16 08:40:34: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:34: Line 388: Number.toString arguments
1: Int: 16

String: 10

2025/07/16 08:40:34: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:34: Line 388: String.toUpperCase arguments

String: 10

2025/07/16 08:40:34: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:34: Line 388: String.substr arguments
1: Int: -2

2: Int: 2

String: 10

2025/07/16 08:40:34: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:34: Line 392: ByteString.valueOf arguments

ByteString: E59DF2B229AE6705

2025/07/16 08:40:34: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:34: Line 392: ByteString.toString arguments

String: E59DF2B229AE6705

2025/07/16 08:40:34: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:34: Line 392: Function.ByteString arguments
1: String: 8482000010E59DF2B229AE6705

2: Double: 4

ByteString: 8482000010E59DF2B229AE6705

2025/07/16 08:40:34: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:34: Line 392: ByteString.pad arguments
1: Double: 37

ByteString: 8482000010E59DF2B229AE6705800000

2025/07/16 08:40:34: Line 393: var bsMac = crypto.sign(c_kSkuMac, nMech, bsCmd, bsIcv); // MAC cmd
2025/07/16 08:40:34: Line 393: Crypto.sign arguments
1: Key

2: Double: 9

3: ByteString: 8482000010E59DF2B229AE6705800000

4: ByteString: 0000000000000000

ByteString: C042DF957F9DFFB6

2025/07/16 08:40:34: Line 402: GPSystem.trace(sMsg); // Log
2025/07/16 08:40:34: Line 402: GPSystem.trace arguments
1: String: External Auth

2025/07/16 08:40:34: GPSystem.trace
External Auth

Boolean: true

2025/07/16 08:40:34: Line 403: var bsRtn = card.sendApdu(nCla,nIns,nP1,nP2,bsDat.concat(bsMac));
2025/07/16 08:40:34: Line 403: ByteString.concat arguments
1: ByteString: C042DF957F9DFFB6

ByteString: E59DF2B229AE6705C042DF957F9DFFB6

2025/07/16 08:40:34: Line 403: var bsRtn = card.sendApdu(nCla,nIns,nP1,nP2,bsDat.concat(bsMac));
2025/07/16 08:40:34: Line 403: Card.sendApdu arguments
1: Int: 132

2: Int: 130

3: Int: 0

4: Int: 0

5: ByteString: E59DF2B229AE6705C042DF957F9DFFB6

2025/07/16 08:40:34: DCC9kServer IC Commands
0000: 84 82 00 00 10 E5 9D F2-B2 29 AE 67 05 C0 42 DF              ) g  B 
0010: 95 7F 9D FF B6 21 53 57-02 2B 2A                        !SW +*     

2025/07/16 08:40:34: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:34: Line 407: c_bsChainMac = crypto.encrypt(c_kSkuMacT3s, Crypto.DES_CBC, bsMac); // ICV encryption for C-MAC session
2025/07/16 08:40:34: Line 407: Crypto.encrypt arguments
1: Key

2: Double: 2

3: ByteString: C042DF957F9DFFB6

ByteString: F294E9D9F1AB5233

2025/07/16 08:40:34: Line 411: new ByteString("!"+"!-"+CALL+"("+bsRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:34: Line 411: ByteString.toString arguments

String: 

2025/07/16 08:40:34: Line 411: new ByteString("!"+"!-"+CALL+"("+bsRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:34: Line 411: Function.ByteString arguments
1: String: !!-000863.c_sendApduS2()

2: Double: 1

ByteString: 21212D3030303836332E635F73656E644170647553322829

2025/07/16 08:40:34: Line 412: UBJSGlobalClass.c_sendApduS2 result
ByteString: 

2025/07/16 08:40:34: Line 343: new ByteString("!"+"!-"+CALL+"("+bsIuRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:34: Line 343: ByteString.toString arguments

String: FFFFFFFFFBF304EA7544010200012AB34BA23E6CC2DC680BAE21942F

2025/07/16 08:40:34: Line 343: new ByteString("!"+"!-"+CALL+"("+bsIuRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:34: Line 343: Function.ByteString arguments
1: String: !!-000863.c_Auth(FFFFFFFFFBF304EA7544010200012AB34BA23E6CC2DC680BAE21942F)

2: Double: 1

ByteString: 21212D3030303836332E635F4175746828464646464646464646424633303445413735343430313032303030313241423334424132334536434332444336383042414532313934324629

2025/07/16 08:40:34: Line 344: UBJSGlobalClass.c_Auth result
ByteString: FFFFFFFFFBF304EA7544010200012AB34BA23E6CC2DC680BAE21942F

2025/07/16 08:40:34: Line 803: function c_WriteAtr()
2025/07/16 08:40:34: Line 803: UBJSGlobalClass.c_WriteAtr arguments

2025/07/16 08:40:34: Line 810: new ByteString("!"+"!+"+CALL+"()",ASCII); // Log begin func
2025/07/16 08:40:34: Line 810: Function.ByteString arguments
1: String: !!+000863.c_WriteAtr()

2: Double: 1

ByteString: 21212B3030303836332E635F57726974654174722829

2025/07/16 08:40:34: Line 1227: function c_ReadCat(sCat, bFailOnErr, sErrMsg)
2025/07/16 08:40:34: Line 1227: UBJSGlobalClass.c_ReadCat arguments
1: String: aCrd_AtrHistorical

2: Void: undefined

3: Void: undefined

2025/07/16 08:40:34: Line 1240: new ByteString("!"+"!+"+CALL+"("+sCat+", "+bFailOnErr+", "+sErrMsg+")",ASCII); // Log begin func
2025/07/16 08:40:34: Line 1240: Function.ByteString arguments
1: String: !!+000863.c_ReadCat(aCrd_AtrHistorical, false, )

2: Double: 1

ByteString: 21212B3030303836332E635F5265616443617428614372645F417472486973746F726963616C2C2066616C73652C2029

2025/07/16 08:40:34: Line 1246: var bsOut = art.getVariableValue(sCat);
2025/07/16 08:40:34: Line 1246: Art.getVariableValue arguments
1: String: aCrd_AtrHistorical

Error: Error: An argument cannot be converted to the correct type

2025/07/16 08:40:34: Line 1258: art.getErrorMessages(); // Clear error messages
2025/07/16 08:40:34: Line 1258: Art.getErrorMessages arguments

String: 

2025/07/16 08:40:34: Line 1263: new ByteString("!"+"!-"+CALL+"("+sCat+", "+bFailOnErr+", "+sOut+")",ASCII); // Log end func
2025/07/16 08:40:34: Line 1263: Function.ByteString arguments
1: String: !!-000863.c_ReadCat(aCrd_AtrHistorical, false, null)

2: Double: 1

ByteString: 21212D3030303836332E635F5265616443617428614372645F417472486973746F726963616C2C2066616C73652C206E756C6C29

2025/07/16 08:40:34: Line 1264: UBJSGlobalClass.c_ReadCat result
null: null

2025/07/16 08:40:34: Line 852: new ByteString("!"+"!-"+CALL+"()",ASCII); // Log end func
2025/07/16 08:40:34: Line 852: Function.ByteString arguments
1: String: !!-000863.c_WriteAtr()

2: Double: 1

ByteString: 21212D3030303836332E635F57726974654174722829

2025/07/16 08:40:34: Line 853: UBJSGlobalClass.c_WriteAtr result
Void: undefined

2025/07/16 08:40:34: Line 870: function c_WriteCplc()
2025/07/16 08:40:34: Line 870: UBJSGlobalClass.c_WriteCplc arguments

2025/07/16 08:40:34: Line 877: new ByteString("!"+"!+"+CALL+"()",ASCII); // Log begin func
2025/07/16 08:40:34: Line 877: Function.ByteString arguments
1: String: !!+000863.c_WriteCplc()

2: Double: 1

ByteString: 21212B3030303836332E635F577269746543706C632829

2025/07/16 08:40:34: Line 881: c_bsCplc = card.sendApdu(0x80,0xCA,0x9F,0x7F,0x2D); //Get CPLC
2025/07/16 08:40:34: Line 881: Card.sendApdu arguments
1: Int: 128

2: Int: 202

3: Int: 159

4: Int: 127

5: Int: 45

2025/07/16 08:40:34: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 32 80     !IOCTL ISOCase2 
0010: CA 9F 7F 2D 21 53 57 02-2B 2A                         -!SW +*      

2025/07/16 08:40:34: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: 9F 7F 2A 47 50 01 F1 47-50 92 75 56 40 21 20 FB      *GP  GP uV@!  
0010: F3 04 EA 75 44 FF FF FF-FF FF FF FF FF 84 54 22        uD         T"
0020: 95 00 DB F2 EE FF FF FF-FF FF FF FF FF                              

ByteString: 9F7F2A475001F14750927556402120FBF304EA7544FFFFFFFFFFFFFFFF8454229500DBF2EEFFFFFFFFFFFFFFFF

2025/07/16 08:40:34: Line 887: var bsIcPersonalizer = art.getVariableValue("xCrd_IcPersonalizer");
2025/07/16 08:40:34: Line 887: Art.getVariableValue arguments
1: String: xCrd_IcPersonalizer

ByteString: 1673

2025/07/16 08:40:34: Line 888: var bsMachineId  = art.getVariableValue("xCrd_MachineId");
2025/07/16 08:40:34: Line 888: Art.getVariableValue arguments
1: String: xCrd_MachineId

ByteString: 01007000

2025/07/16 08:40:34: Line 228: function d_JulianDate()
2025/07/16 08:40:34: Line 228: UBJSGlobalClass.d_JulianDate arguments

2025/07/16 08:40:34: Line 235: new ByteString("!"+"!+"+CALL+"()",ASCII); // Log begin func
2025/07/16 08:40:34: Line 235: Function.ByteString arguments
1: String: !!+d_JulianDate()

2: Double: 1

ByteString: 21212B645F4A756C69616E446174652829

2025/07/16 08:40:34: Line 241: var dNow = new Date();
2025/07/16 08:40:34: Line 241: Function.Date arguments

Date: Wed Jul 16 2025 08:40:34 GMT+0300 (Arab Standard Time)

2025/07/16 08:40:34: Line 242: var nNowMs = dNow.valueOf(); // Number of milliseconds since 1970
2025/07/16 08:40:34: Line 242: Date.valueOf arguments

Double: 1752644434323

2025/07/16 08:40:34: Line 246: var dBeg = new Date(dNow.getFullYear(),0,0,0,0,0,0); // Set date to begin of current year
2025/07/16 08:40:34: Line 246: Date.getFullYear arguments

Int: 2025

2025/07/16 08:40:34: Line 246: var dBeg = new Date(dNow.getFullYear(),0,0,0,0,0,0); // Set date to begin of current year
2025/07/16 08:40:34: Line 246: Function.Date arguments
1: Int: 2025

2: Int: 0

3: Int: 0

4: Int: 0

5: Int: 0

6: Int: 0

7: Int: 0

Date: Tue Dec 31 2024 00:00:00 GMT+0300 (Arab Standard Time)

2025/07/16 08:40:34: Line 247: var nBegMs = dBeg.valueOf(); // Get Milliseconds
2025/07/16 08:40:34: Line 247: Date.valueOf arguments

Double: 1735592400000

2025/07/16 08:40:34: Line 252: var nDayCnt = Math.floor(nThisYearMs/(1000*60*60*24)); // Convert milliseconds to whole days
2025/07/16 08:40:34: Line 252: Math.floor arguments
1: Double: 197.36150836805555

Int: 197

2025/07/16 08:40:34: Line 256: var sDayCnt = "00" +nDayCnt.toString(); // Left pad count with zeros
2025/07/16 08:40:34: Line 256: Number.toString arguments

String: 197

2025/07/16 08:40:34: Line 257: var sDayFmt = sDayCnt.substr(-3,3);     // Get right 3 digits of count
2025/07/16 08:40:34: Line 257: String.substr arguments
1: Int: -3

2: Int: 3

String: 197

2025/07/16 08:40:34: Line 261: var sYearFmt = dNow.getFullYear().toString().substr(-1,1);
2025/07/16 08:40:34: Line 261: Date.getFullYear arguments

Int: 2025

2025/07/16 08:40:34: Line 261: var sYearFmt = dNow.getFullYear().toString().substr(-1,1);
2025/07/16 08:40:34: Line 261: Number.toString arguments

String: 2025

2025/07/16 08:40:34: Line 261: var sYearFmt = dNow.getFullYear().toString().substr(-1,1);
2025/07/16 08:40:34: Line 261: String.substr arguments
1: Int: -1

2: Int: 1

String: 5

2025/07/16 08:40:34: Line 265: var bsJulian = new ByteString(sYearFmt.concat(sDayFmt), HEX);
2025/07/16 08:40:34: Line 265: String.concat arguments
1: String: 197

String: 5197

2025/07/16 08:40:34: Line 265: var bsJulian = new ByteString(sYearFmt.concat(sDayFmt), HEX);
2025/07/16 08:40:34: Line 265: Function.ByteString arguments
1: String: 5197

2: Double: 4

ByteString: 5197

2025/07/16 08:40:34: Line 274: new ByteString("!"+"!-"+CALL+"("+dNow.toDateString()+", "+bsJulian.toString()+")",ASCII); // Log end func
2025/07/16 08:40:34: Line 274: Date.toDateString arguments

String: Wed Jul 16 2025

2025/07/16 08:40:34: Line 274: new ByteString("!"+"!-"+CALL+"("+dNow.toDateString()+", "+bsJulian.toString()+")",ASCII); // Log end func
2025/07/16 08:40:34: Line 274: ByteString.toString arguments

String: 5197

2025/07/16 08:40:34: Line 274: new ByteString("!"+"!-"+CALL+"("+dNow.toDateString()+", "+bsJulian.toString()+")",ASCII); // Log end func
2025/07/16 08:40:34: Line 274: Function.ByteString arguments
1: String: !!-d_JulianDate(Wed Jul 16 2025, 5197)

2: Double: 1

ByteString: 21212D645F4A756C69616E4461746528576564204A756C20313620323032352C203531393729

2025/07/16 08:40:34: Line 275: UBJSGlobalClass.d_JulianDate result
ByteString: 5197

2025/07/16 08:40:34: Line 889: var bsDat = bsIcPersonalizer.concat(d_JulianDate()).concat(bsMachineId);
2025/07/16 08:40:34: Line 889: ByteString.concat arguments
1: ByteString: 5197

ByteString: 16735197

2025/07/16 08:40:34: Line 889: var bsDat = bsIcPersonalizer.concat(d_JulianDate()).concat(bsMachineId);
2025/07/16 08:40:34: Line 889: ByteString.concat arguments
1: ByteString: 01007000

ByteString: 1673519701007000

2025/07/16 08:40:34: Line 893: var bsDgi = new TLV(0x9F66, bsDat, TLV.DGI).getTLV(); // Format rec
2025/07/16 08:40:34: Line 893: Function.TLV arguments
1: Int: 40806

2: ByteString: 1673519701007000

3: Double: 1

TLV: 9F66081673519701007000

2025/07/16 08:40:34: Line 893: var bsDgi = new TLV(0x9F66, bsDat, TLV.DGI).getTLV(); // Format rec
2025/07/16 08:40:34: Line 893: TLV.getTLV arguments

ByteString: 9F66081673519701007000

2025/07/16 08:40:34: Line 894: card.sendApdu(0x80,0xE2,0x00,0x00,bsDgi); //9F66 (CPLC)
2025/07/16 08:40:34: Line 894: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 0

5: ByteString: 9F66081673519701007000

2025/07/16 08:40:34: DCC9kServer IC Commands
0000: 80 E2 00 00 0B 9F 66 08-16 73 51 97 01 00 70 00           f  sQ   p 
0010: 21 53 57 02 2B 2A                                   !SW +*          

2025/07/16 08:40:34: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:34: Line 898: c_bsCplc = card.sendApdu(0x80,0xCA,0x9F,0x7F,0x2D); //Get CPLC
2025/07/16 08:40:34: Line 898: Card.sendApdu arguments
1: Int: 128

2: Int: 202

3: Int: 159

4: Int: 127

5: Int: 45

2025/07/16 08:40:34: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 32 80     !IOCTL ISOCase2 
0010: CA 9F 7F 2D 21 53 57 02-2B 2A                         -!SW +*      

2025/07/16 08:40:34: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: 9F 7F 2A 47 50 01 F1 47-50 92 75 56 40 21 20 FB      *GP  GP uV@!  
0010: F3 04 EA 75 44 FF FF FF-FF FF FF FF FF 84 54 22        uD         T"
0020: 95 00 DB F2 EE 16 73 51-97 01 00 70 00                    sQ   p    

ByteString: 9F7F2A475001F14750927556402120FBF304EA7544FFFFFFFFFFFFFFFF8454229500DBF2EE1673519701007000

2025/07/16 08:40:34: Line 902: new ByteString("!"+"!-"+CALL+"()",ASCII); // Log end func
2025/07/16 08:40:34: Line 902: Function.ByteString arguments
1: String: !!-000863.c_WriteCplc()

2: Double: 1

ByteString: 21212D3030303836332E635F577269746543706C632829

2025/07/16 08:40:34: Line 903: UBJSGlobalClass.c_WriteCplc result
Void: undefined

2025/07/16 08:40:34: Line 1517: var CM = new ByteString("4F00",HEX);
2025/07/16 08:40:34: Line 1517: Function.ByteString arguments
1: String: 4F00

2: Double: 4

ByteString: 4F00

2025/07/16 08:40:34: Line 1518: var bsCmStat = card.sendApdu(0x80,0xF2,0x80,0x00,CM,0x00);//Status (Card Manager)
2025/07/16 08:40:34: Line 1518: Card.sendApdu arguments
1: Int: 128

2: Int: 242

3: Int: 128

4: Int: 0

5: ByteString: 4F00

6: Int: 0

2025/07/16 08:40:34: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: F2 80 00 02 4F 00 00 21-53 57 02 2B 2A                  O  !SW +*   

2025/07/16 08:40:34: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: 08 A0 00 00 01 51 00 00-00 07 9E                         Q          

ByteString: 08A000000151000000079E

2025/07/16 08:40:34: Line 1521: card.sendApdu(0x80,0xF2,0x20,0x00,CM,0x00,[0x90,0x63,0x69,0x6A]);//Status (Load File #1)
2025/07/16 08:40:34: Line 1521: Card.sendApdu arguments
1: Int: 128

2: Int: 242

3: Int: 32

4: Int: 0

5: ByteString: 4F00

6: Int: 0

7: Array: 144,99,105,106

2025/07/16 08:40:34: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: F2 20 00 02 4F 00 00 21-53 57 02 2B 2A                  O  !SW +*   

2025/07/16 08:40:35: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: 07 A0 00 00 00 62 00 01-01 00 07 A0 00 00 00 62          b         b
0010: 01 01 01 00 07 A0 00 00-00 62 01 02 01 00 07 A0              b      
0020: 00 00 00 62 02 01 01 00-07 A0 00 00 00 62 00 02        b         b  
0030: 01 00 07 A0 00 00 00 62-02 05 01 00 0C A0 00 00            b        
0040: 00 95 00 00 00 00 7A 00-00 01 00 06 A0 00 00 01           z         
0050: 51 00 01 00 07 A0 00 00-01 51 53 50 01 00 0B A0     Q        QSP    
0060: 00 00 07 08 00 00 01 01-00 00 01 00 0B A0 00 00                     
0070: 07 08 00 00 02 01 00 00-01 00 0B A0 00 00 07 08                     
0080: 00 00 05 01 00 00 01 00-0B A0 00 00 07 08 00 00                     
0090: 07 02 00 00 01 00 08 A0-00 00 00 96 F0 81 00 01                     
00A0: 00 0B A0 00 00 07 08 00-00 04 04 00 00 01 00 06                     
00B0: A0 00 00 00 03 10 01 00-                                            

ByteString: 07A0000000620001010007A0000000620101010007A0000000620102010007A0000000620201010007A0000000620002010007A000000062020501000CA000000095000000007A0000010006A00000015100010007A000000151535001000BA00000070800000101000001000BA00000070800000201000001000BA00000070800000501000001000BA000000708000007020000010008A000000096F0810001000BA000000708000004040000010006A000000003100100

2025/07/16 08:40:35: Line 1522: card.sendApdu(0x80,0xF2,0x20,0x01,CM,0x00,[0x90,0x63,0x69,0x6A]);//Status (Load File #2)
2025/07/16 08:40:35: Line 1522: Card.sendApdu arguments
1: Int: 128

2: Int: 242

3: Int: 32

4: Int: 1

5: ByteString: 4F00

6: Int: 0

7: Array: 144,99,105,106

2025/07/16 08:40:35: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: F2 20 01 02 4F 00 00 21-53 57 02 2B 2A                  O  !SW +*   

2025/07/16 08:40:35: DCC9kServer IC Response: Result = 0, SW1SW2 = 6A86

ByteString: 

2025/07/16 08:40:35: Line 1523: card.sendApdu(0x80,0xF2,0x10,0x00,CM,0x00,[0x90,0x63,0x69,0x6A]);//Status (Executables #1)
2025/07/16 08:40:35: Line 1523: Card.sendApdu arguments
1: Int: 128

2: Int: 242

3: Int: 16

4: Int: 0

5: ByteString: 4F00

6: Int: 0

7: Array: 144,99,105,106

2025/07/16 08:40:35: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: F2 10 00 02 4F 00 00 21-53 57 02 2B 2A                  O  !SW +*   

2025/07/16 08:40:35: DCC9kServer IC Response: Result = 0, SW1SW2 = 6310
0000: 07 A0 00 00 00 62 00 01-01 00 00 07 A0 00 00 00          b          
0010: 62 01 01 01 00 00 07 A0-00 00 00 62 01 02 01 00     b          b    
0020: 00 07 A0 00 00 00 62 02-01 01 00 00 07 A0 00 00           b         
0030: 00 62 00 02 01 00 00 07-A0 00 00 00 62 02 05 01      b          b   
0040: 00 00 0C A0 00 00 00 95-00 00 00 00 7A 00 00 01                 z   
0050: 00 00 06 A0 00 00 01 51-00 01 00 00 07 A0 00 00            Q        
0060: 01 51 53 50 01 00 01 08-A0 00 00 01 51 53 50 41      QSP        QSPA
0070: 0B A0 00 00 07 08 00 00-01 01 00 00 01 00 01 0B                     
0080: A0 00 00 07 08 01 00 01-01 00 01 0B A0 00 00 07                     
0090: 08 00 00 02 01 00 00 01-00 00 0B A0 00 00 07 08                     
00A0: 00 00 05 01 00 00 01 00-01 0B A0 00 00 07 08 01                     
00B0: 00 05 01 00 01 0B A0 00-00 07 08 00 00 07 02 00                     
00C0: 00 01 00 01 0B A0 00 00-07 08 01 00 07 02 00 01                     
00D0: 08 A0 00 00 00 96 F0 81-00 01 00 01 07 A0 00 00                     
00E0: 00 96 F0 01                                                         

ByteString: 07A000000062000101000007A000000062010101000007A000000062010201000007A000000062020101000007A000000062000201000007A00000006202050100000CA000000095000000007A000001000006A0000001510001000007A000000151535001000108A0000001515350410BA0000007080000010100000100010BA0000007080100010100010BA0000007080000020100000100000BA0000007080000050100000100010BA0000007080100050100010BA0000007080000070200000100010BA00000070801000702000108A000000096F0810001000107A000000096F001

2025/07/16 08:40:35: Line 1524: card.sendApdu(0x80,0xF2,0x10,0x01,CM,0x00,[0x90,0x63,0x69,0x6A]);//Status (Executables #2)
2025/07/16 08:40:35: Line 1524: Card.sendApdu arguments
1: Int: 128

2: Int: 242

3: Int: 16

4: Int: 1

5: ByteString: 4F00

6: Int: 0

7: Array: 144,99,105,106

2025/07/16 08:40:35: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: F2 10 01 02 4F 00 00 21-53 57 02 2B 2A                  O  !SW +*   

2025/07/16 08:40:35: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: 0B A0 00 00 07 08 00 00-04 04 00 00 01 00 02 0B                     
0010: A0 00 00 07 08 01 00 04-04 00 01 0B A0 00 00 07                     
0020: 08 01 00 04 04 00 02 06-A0 00 00 00 03 10 01 00                     
0030: 02 07 A0 00 00 00 03 10-56 07 A0 00 00 00 03 10             V       
0040: 4D                                                  M               

ByteString: 0BA0000007080000040400000100020BA0000007080100040400010BA00000070801000404000206A0000000031001000207A000000003105607A000000003104D

2025/07/16 08:40:35: Line 1525: card.sendApdu(0x80,0xF2,0x40,0x00,CM,0x00,[0x90,0x63,0x69,0x6A]);//Status (Applications)
2025/07/16 08:40:35: Line 1525: Card.sendApdu arguments
1: Int: 128

2: Int: 242

3: Int: 64

4: Int: 0

5: ByteString: 4F00

6: Int: 0

7: Array: 144,99,105,106

2025/07/16 08:40:35: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: F2 40 00 02 4F 00 00 21-53 57 02 2B 2A               @  O  !SW +*   

2025/07/16 08:40:36: DCC9kServer IC Response: Result = 0, SW1SW2 = 6A88

ByteString: 

2025/07/16 08:40:36: Line 1529: var nPos   = bsCmStat.byteAt(0)+1;
2025/07/16 08:40:36: Line 1529: ByteString.byteAt arguments
1: Int: 0

Int: 8

2025/07/16 08:40:36: Line 1530: var nState = bsCmStat.byteAt(nPos); // Get life cycle state
2025/07/16 08:40:36: Line 1530: ByteString.byteAt arguments
1: Int: 9

Int: 7

2025/07/16 08:40:36: Line 1547: new ByteString("!"+"!-"+CALL+"()",ASCII); // Log end func
2025/07/16 08:40:36: Line 1547: Function.ByteString arguments
1: String: !!-000863.c_Main()

2: Double: 1

ByteString: 21212D3030303836332E635F4D61696E2829

2025/07/16 08:40:36: Line 1548: UBJSGlobalClass.c_Main result
Void: undefined

2025/07/16 08:40:36: Function: UBExecuteJavaScript, result: 0

2025/07/16 08:40:36: Function: UBExecuteJavaScript, arguments: aCt_JsPerso
2025/07/16 08:40:36: Line 32: art.enableExtensions();
2025/07/16 08:40:36: Line 32: Art.enableExtensions arguments

Void: undefined

2025/07/16 08:40:36: Line 33: art.getErrorMessages(); // Clear error messages
2025/07/16 08:40:36: Line 33: Art.getErrorMessages arguments

String: 

2025/07/16 08:40:36: Line 1342: function t_Main()
2025/07/16 08:40:36: Line 1342: UBJSGlobalClass.t_Main arguments

2025/07/16 08:40:36: Line 1349: new ByteString("!"+"!+"+CALL+"()",ASCII); // Log begin func
2025/07/16 08:40:36: Line 1349: Function.ByteString arguments
1: String: !!+000863.t_Main()

2: Double: 1

ByteString: 21212B3030303836332E745F4D61696E2829

2025/07/16 08:40:36: Line 1189: function t_GetConfig()
2025/07/16 08:40:36: Line 1189: UBJSGlobalClass.t_GetConfig arguments

2025/07/16 08:40:36: Line 1196: new ByteString("!"+"!+"+CALL+"()",ASCII); // Log begin func
2025/07/16 08:40:36: Line 1196: Function.ByteString arguments
1: String: !!+000863.t_GetConfig()

2: Double: 1

ByteString: 21212B3030303836332E745F476574436F6E6669672829

2025/07/16 08:40:36: Line 1203: if (art.getVariableValue("xCtCki_82_Aip").length > 0)
2025/07/16 08:40:36: Line 1203: Art.getVariableValue arguments
1: String: xCtCki_82_Aip

ByteString: 3800

2025/07/16 08:40:36: Line 1207: var nAipB1 = art.getVariableValue("xCtP3i_82_Aip").byteAt(0);
2025/07/16 08:40:36: Line 1207: Art.getVariableValue arguments
1: String: xCtP3i_82_Aip

ByteString: 3800

2025/07/16 08:40:36: Line 1207: var nAipB1 = art.getVariableValue("xCtP3i_82_Aip").byteAt(0);
2025/07/16 08:40:36: Line 1207: ByteString.byteAt arguments
1: Int: 0

Int: 56

2025/07/16 08:40:36: Line 1215: if (art.getVariableValue("xCtCki_8E_Cvm").length > 0)
2025/07/16 08:40:36: Line 1215: Art.getVariableValue arguments
1: String: xCtCki_8E_Cvm

ByteString: 0000000000000000020542035E031F02

2025/07/16 08:40:36: Line 1217: var oCvm = t_ParseCvm(art.getVariableValue("xCtP3i_8E_Cvm"));
2025/07/16 08:40:36: Line 1217: Art.getVariableValue arguments
1: String: xCtP3i_8E_Cvm

ByteString: 0000000000000000020542035E031F02

2025/07/16 08:40:36: Line 973: function t_ParseCvm(bsCvm)
2025/07/16 08:40:36: Line 973: UBJSGlobalClass.t_ParseCvm arguments
1: ByteString: 0000000000000000020542035E031F02

2025/07/16 08:40:36: Line 980: new ByteString("!"+"!+"+CALL+"("+bsCvm.toString()+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 980: ByteString.toString arguments

String: 0000000000000000020542035E031F02

2025/07/16 08:40:36: Line 980: new ByteString("!"+"!+"+CALL+"("+bsCvm.toString()+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 980: Function.ByteString arguments
1: String: !!+000863.t_ParseCvm(0000000000000000020542035E031F02)

2: Double: 1

ByteString: 21212B3030303836332E745F506172736543766D28303030303030303030303030303030303032303534323033354530333146303229

2025/07/16 08:40:36: Line 986: var oOut = new Object();
2025/07/16 08:40:36: Line 986: Function.Object arguments

Object: [object Object]

2025/07/16 08:40:36: Line 994: var bsX = bsCvm.left(4);       // Amount field
2025/07/16 08:40:36: Line 994: ByteString.left arguments
1: Int: 4

ByteString: 00000000

2025/07/16 08:40:36: Line 995: var bsY = bsCvm.bytes(4, 4);   // Second amount field
2025/07/16 08:40:36: Line 995: ByteString.bytes arguments
1: Int: 4

2: Int: 4

ByteString: 00000000

2025/07/16 08:40:36: Line 996: var bsCvrLst = bsCvm.bytes(8); // Card Verification Rules (CVRs)
2025/07/16 08:40:36: Line 996: ByteString.bytes arguments
1: Int: 8

ByteString: 020542035E031F02

2025/07/16 08:40:36: Line 1003: var bsCvr = bsCvrLst.bytes(nCnt,2);
2025/07/16 08:40:36: Line 1003: ByteString.bytes arguments
1: Int: 0

2: Int: 2

ByteString: 0205

2025/07/16 08:40:36: Line 1006: var nCvr = bsCvr.byteAt(0)&0x3F; // Mask off first two bits
2025/07/16 08:40:36: Line 1006: ByteString.byteAt arguments
1: Int: 0

Int: 2

2025/07/16 08:40:36: Line 1003: var bsCvr = bsCvrLst.bytes(nCnt,2);
2025/07/16 08:40:36: Line 1003: ByteString.bytes arguments
1: Int: 2

2: Int: 2

ByteString: 4203

2025/07/16 08:40:36: Line 1006: var nCvr = bsCvr.byteAt(0)&0x3F; // Mask off first two bits
2025/07/16 08:40:36: Line 1006: ByteString.byteAt arguments
1: Int: 0

Int: 66

2025/07/16 08:40:36: Line 1003: var bsCvr = bsCvrLst.bytes(nCnt,2);
2025/07/16 08:40:36: Line 1003: ByteString.bytes arguments
1: Int: 4

2: Int: 2

ByteString: 5E03

2025/07/16 08:40:36: Line 1006: var nCvr = bsCvr.byteAt(0)&0x3F; // Mask off first two bits
2025/07/16 08:40:36: Line 1006: ByteString.byteAt arguments
1: Int: 0

Int: 94

2025/07/16 08:40:36: Line 1003: var bsCvr = bsCvrLst.bytes(nCnt,2);
2025/07/16 08:40:36: Line 1003: ByteString.bytes arguments
1: Int: 6

2: Int: 2

ByteString: 1F02

2025/07/16 08:40:36: Line 1006: var nCvr = bsCvr.byteAt(0)&0x3F; // Mask off first two bits
2025/07/16 08:40:36: Line 1006: ByteString.byteAt arguments
1: Int: 0

Int: 31

2025/07/16 08:40:36: Line 1020: new ByteString("!"+"!-"+CALL+"("+oOut.bPinClr+", "+oOut.bPinEnc+")",ASCII); // Log end func
2025/07/16 08:40:36: Line 1020: Function.ByteString arguments
1: String: !!-000863.t_ParseCvm(false, false)

2: Double: 1

ByteString: 21212D3030303836332E745F506172736543766D2866616C73652C2066616C736529

2025/07/16 08:40:36: Line 1021: UBJSGlobalClass.t_ParseCvm result
Object: [object Object]

2025/07/16 08:40:36: Line 1225: if (art.getVariableValue("xClCki_82_Aip").length > 0)
2025/07/16 08:40:36: Line 1225: Art.getVariableValue arguments
1: String: xClCki_82_Aip

ByteString: 2020

2025/07/16 08:40:36: Line 1230: var bsCap = art.getVariableValue("xCtP3i_9F68_Cap");
2025/07/16 08:40:36: Line 1230: Art.getVariableValue arguments
1: String: xCtP3i_9F68_Cap

ByteString: 0080D000

2025/07/16 08:40:36: Line 1231: var nCapB1 = (bsCap.length > 0) ? bsCap.byteAt(0) : 0;
2025/07/16 08:40:36: Line 1231: ByteString.byteAt arguments
1: Int: 0

Int: 0

2025/07/16 08:40:36: Line 1236: var nAipB1 = art.getVariableValue("xClP3i_82_Aip").byteAt(0);
2025/07/16 08:40:36: Line 1236: Art.getVariableValue arguments
1: String: xClP3i_82_Aip

ByteString: 2020

2025/07/16 08:40:36: Line 1236: var nAipB1 = art.getVariableValue("xClP3i_82_Aip").byteAt(0);
2025/07/16 08:40:36: Line 1236: ByteString.byteAt arguments
1: Int: 0

Int: 32

2025/07/16 08:40:36: Line 1243: if (art.getVariableValue("xMsCki_82_Aip").length > 0)
2025/07/16 08:40:36: Line 1243: Art.getVariableValue arguments
1: String: xMsCki_82_Aip

ByteString: 

2025/07/16 08:40:36: Line 1254: if (art.getVariableValue("xMlCki_82_Aip").length > 0)
2025/07/16 08:40:36: Line 1254: Art.getVariableValue arguments
1: String: xMlCki_82_Aip

ByteString: 

2025/07/16 08:40:36: Line 1258: if (art.getVariableValue("xCtCki_1F23_Kmsd").length > 0)
2025/07/16 08:40:36: Line 1258: Art.getVariableValue arguments
1: String: xCtCki_1F23_Kmsd

ByteString: 

2025/07/16 08:40:36: Line 1268: new ByteString(t_bCtCfg, ASCII);
2025/07/16 08:40:36: Line 1268: Function.ByteString arguments
1: Boolean: true

2: Double: 1

ByteString: 74727565

2025/07/16 08:40:36: Line 1269: new ByteString(t_bSdaCfg, ASCII);
2025/07/16 08:40:36: Line 1269: Function.ByteString arguments
1: Boolean: false

2: Double: 1

ByteString: 66616C7365

2025/07/16 08:40:36: Line 1270: new ByteString(t_bDdaCfg, ASCII);
2025/07/16 08:40:36: Line 1270: Function.ByteString arguments
1: Boolean: true

2: Double: 1

ByteString: 74727565

2025/07/16 08:40:36: Line 1271: new ByteString(t_bPinCfg, ASCII);
2025/07/16 08:40:36: Line 1271: Function.ByteString arguments
1: Boolean: false

2: Double: 1

ByteString: 66616C7365

2025/07/16 08:40:36: Line 1272: new ByteString(t_bPinCeCfg, ASCII);
2025/07/16 08:40:36: Line 1272: Function.ByteString arguments
1: Boolean: false

2: Double: 1

ByteString: 66616C7365

2025/07/16 08:40:36: Line 1274: new ByteString(l_bClCfg, ASCII);
2025/07/16 08:40:36: Line 1274: Function.ByteString arguments
1: Boolean: true

2: Double: 1

ByteString: 74727565

2025/07/16 08:40:36: Line 1275: new ByteString(l_bClCfg_Stream, ASCII);
2025/07/16 08:40:36: Line 1275: Function.ByteString arguments
1: Boolean: false

2: Double: 1

ByteString: 66616C7365

2025/07/16 08:40:36: Line 1276: new ByteString(l_bDdaCfg, ASCII);
2025/07/16 08:40:36: Line 1276: Function.ByteString arguments
1: Boolean: true

2: Double: 1

ByteString: 74727565

2025/07/16 08:40:36: Line 1278: new ByteString(s_bMsCfg, ASCII);
2025/07/16 08:40:36: Line 1278: Function.ByteString arguments
1: Boolean: false

2: Double: 1

ByteString: 66616C7365

2025/07/16 08:40:36: Line 1279: new ByteString(s_bDdaCfg, ASCII);
2025/07/16 08:40:36: Line 1279: Function.ByteString arguments
1: Boolean: false

2: Double: 1

ByteString: 66616C7365

2025/07/16 08:40:36: Line 1280: new ByteString(s_bKmsdCfg, ASCII);
2025/07/16 08:40:36: Line 1280: Function.ByteString arguments
1: Boolean: false

2: Double: 1

ByteString: 66616C7365

2025/07/16 08:40:36: Line 1282: new ByteString(s_bMlCfg, ASCII);
2025/07/16 08:40:36: Line 1282: Function.ByteString arguments
1: Boolean: false

2: Double: 1

ByteString: 66616C7365

2025/07/16 08:40:36: Line 1286: new ByteString("!"+"!-"+CALL+"()",ASCII); // Log end func
2025/07/16 08:40:36: Line 1286: Function.ByteString arguments
1: String: !!-000863.t_GetConfig()

2: Double: 1

ByteString: 21212D3030303836332E745F476574436F6E6669672829

2025/07/16 08:40:36: Line 1287: UBJSGlobalClass.t_GetConfig result
Void: undefined

2025/07/16 08:40:36: Line 49: function c_Auth(bsAid, nMeth, nVr, nId, nSecLvl)
2025/07/16 08:40:36: Line 49: UBJSGlobalClass.c_Auth arguments
1: ByteString: A000000151000000

2: Int: 22

3: Int: 0

4: Int: 0

5: Int: 0

2025/07/16 08:40:36: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:36: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 22

Boolean: false

2025/07/16 08:40:36: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:36: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:36: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:36: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:36: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:36: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:36: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 58: ByteString.toString arguments

String: A000000151000000

2025/07/16 08:40:36: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 58: Number.toString arguments
1: Int: 10

String: 22

2025/07/16 08:40:36: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:36: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:36: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:36: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 58: Function.ByteString arguments
1: String: !!+000863.c_Auth(A000000151000000, 22, 0, 0, 0)

2: Double: 1

ByteString: 21212B3030303836332E635F4175746828413030303030303135313030303030302C2032322C20302C20302C203029

2025/07/16 08:40:36: Line 62: var bsF001 = new ByteString("F001", HEX);
2025/07/16 08:40:36: Line 62: Function.ByteString arguments
1: String: F001

2: Double: 4

ByteString: F001

2025/07/16 08:40:36: Line 63: var bsF002 = new ByteString("F002", HEX);
2025/07/16 08:40:36: Line 63: Function.ByteString arguments
1: String: F002

2: Double: 4

ByteString: F002

2025/07/16 08:40:36: Line 64: var bsF003 = new ByteString("F003", HEX);
2025/07/16 08:40:36: Line 64: Function.ByteString arguments
1: String: F003

2: Double: 4

ByteString: F003

2025/07/16 08:40:36: Line 65: var bs0F01 = new ByteString("0F01", HEX);
2025/07/16 08:40:36: Line 65: Function.ByteString arguments
1: String: 0F01

2: Double: 4

ByteString: 0F01

2025/07/16 08:40:36: Line 66: var bs0F02 = new ByteString("0F02", HEX);
2025/07/16 08:40:36: Line 66: Function.ByteString arguments
1: String: 0F02

2: Double: 4

ByteString: 0F02

2025/07/16 08:40:36: Line 67: var bs0F03 = new ByteString("0F03", HEX);
2025/07/16 08:40:36: Line 67: Function.ByteString arguments
1: String: 0F03

2: Double: 4

ByteString: 0F03

2025/07/16 08:40:36: Line 68: var bs0182 = new ByteString("0182", HEX);
2025/07/16 08:40:36: Line 68: Function.ByteString arguments
1: String: 0182

2: Double: 4

ByteString: 0182

2025/07/16 08:40:36: Line 69: var bs0101 = new ByteString("0101", HEX);
2025/07/16 08:40:36: Line 69: Function.ByteString arguments
1: String: 0101

2: Double: 4

ByteString: 0101

2025/07/16 08:40:36: Line 70: var bs0181 = new ByteString("0181", HEX);
2025/07/16 08:40:36: Line 70: Function.ByteString arguments
1: String: 0181

2: Double: 4

ByteString: 0181

2025/07/16 08:40:36: Line 71: var bsZero12 = new ByteString("000000000000000000000000",HEX);
2025/07/16 08:40:36: Line 71: Function.ByteString arguments
1: String: 000000000000000000000000

2: Double: 4

ByteString: 000000000000000000000000

2025/07/16 08:40:36: Line 72: var bsZero8  = new ByteString("0000000000000000",HEX);
2025/07/16 08:40:36: Line 72: Function.ByteString arguments
1: String: 0000000000000000

2: Double: 4

ByteString: 0000000000000000

2025/07/16 08:40:36: Line 77: card.sendApdu(0x00,0xA4,0x04,0x00,bsAid,0x00); //Select AID
2025/07/16 08:40:36: Line 77: Card.sendApdu arguments
1: Int: 0

2: Int: 164

3: Int: 4

4: Int: 0

5: ByteString: A000000151000000

6: Int: 0

2025/07/16 08:40:36: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 00     !IOCTL ISOCase4 
0010: A4 04 00 08 A0 00 00 01-51 00 00 00 00 21 53 57             Q    !SW
0020: 02 2B 2A                                             +*             

2025/07/16 08:40:36: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: 6F 10 A5 04 9F 65 01 FF-84 08 A0 00 00 01 51 00     o    e        Q 
0010: 00 00                                                               

ByteString: 6F10A5049F6501FF8408A000000151000000

2025/07/16 08:40:36: Line 81: var bsRterm = crypto.generateRandom(8);
2025/07/16 08:40:36: Line 81: Crypto.generateRandom arguments
1: Int: 8

ByteString: DE12249C2294957D

2025/07/16 08:40:36: Line 87: var bsIuRtn = card.sendApdu(0x80,0x50,nVr,nId,bsRterm,0x00);//Init update
2025/07/16 08:40:36: Line 87: Card.sendApdu arguments
1: Int: 128

2: Int: 80

3: Int: 0

4: Int: 0

5: ByteString: DE12249C2294957D

6: Int: 0

2025/07/16 08:40:36: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: 50 00 00 08 DE 12 24 9C-22 94 95 7D 00 21 53 57     P     $ "  } !SW
0020: 02 2B 2A                                             +*             

2025/07/16 08:40:36: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: FF FF FF FF FB F3 04 EA-75 44 01 02 00 02 BC 9F             uD      
0010: 03 88 98 C3 B8 6E 14 E6-43 D7 37 C3                      n  C 7     

ByteString: FFFFFFFFFBF304EA754401020002BC9F038898C3B86E14E643D737C3

2025/07/16 08:40:36: Line 235: var bsIuDiv  = bsIuRtn.bytes(4,6);
2025/07/16 08:40:36: Line 235: ByteString.bytes arguments
1: Int: 4

2: Int: 6

ByteString: FBF304EA7544

2025/07/16 08:40:36: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:36: Line 236: ByteString.concat arguments
1: ByteString: F001

ByteString: FBF304EA7544F001

2025/07/16 08:40:36: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:36: Line 236: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F001FBF304EA7544

2025/07/16 08:40:36: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:36: Line 236: ByteString.concat arguments
1: ByteString: 0F01

ByteString: FBF304EA7544F001FBF304EA75440F01

2025/07/16 08:40:36: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:36: Line 237: ByteString.concat arguments
1: ByteString: F002

ByteString: FBF304EA7544F002

2025/07/16 08:40:36: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:36: Line 237: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F002FBF304EA7544

2025/07/16 08:40:36: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:36: Line 237: ByteString.concat arguments
1: ByteString: 0F02

ByteString: FBF304EA7544F002FBF304EA75440F02

2025/07/16 08:40:36: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:36: Line 238: ByteString.concat arguments
1: ByteString: F003

ByteString: FBF304EA7544F003

2025/07/16 08:40:36: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:36: Line 238: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F003FBF304EA7544

2025/07/16 08:40:36: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:36: Line 238: ByteString.concat arguments
1: ByteString: 0F03

ByteString: FBF304EA7544F003FBF304EA75440F03

2025/07/16 08:40:36: Line 242: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsEncDiv, c_kDKenc);
2025/07/16 08:40:36: Line 242: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F001FBF304EA75440F01

4: Key

Void: undefined

2025/07/16 08:40:36: Line 243: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsMacDiv, c_kDKmac);
2025/07/16 08:40:36: Line 243: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F002FBF304EA75440F02

4: Key

Void: undefined

2025/07/16 08:40:36: Line 244: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsDekDiv, c_kDKdek);
2025/07/16 08:40:36: Line 244: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F003FBF304EA75440F03

4: Key

Void: undefined

2025/07/16 08:40:36: Line 245: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsDekDiv, c_kDKdekT0);
2025/07/16 08:40:36: Line 245: Crypto.deriveKey arguments
1: Key: 01880000001881AFC1C3D30E5A08EA8C4A643F9614286845461D50A51676000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101000000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C00000001010100000163000000010100000001650000000101000000016400000001010000000161000000040100000010800001020000001001323032353037313630353338353630308000010300000000000000010200000000000000011000000000000000011100000000008000012B000000010100800001290000000101010000016200000001010180000128000000010100000000030000000000000001700000000101010000000000000000000008AB3B96B041DC31410000001838976CB6C4F4623C7710D2EAB5D642902B7ADB33A7E3BF01

2: Double: 5

3: ByteString: FBF304EA7544F003FBF304EA75440F03

4: Key

Void: undefined

2025/07/16 08:40:36: Line 247: c_kDKenc.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:36: Line 247: Key.getKcv arguments
1: Double: 1048576

ByteString: 2F60DAE9569C6DE8

2025/07/16 08:40:36: Line 248: c_kDKmac.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:36: Line 248: Key.getKcv arguments
1: Double: 1048576

ByteString: 5CCE4854D71634D1

2025/07/16 08:40:36: Line 249: c_kDKdek.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:36: Line 249: Key.getKcv arguments
1: Double: 1048576

ByteString: 36B975605BE0D863

2025/07/16 08:40:36: Line 253: var bsSeqPad = bsIuRtn.bytes(12,2).concat(bsZero12); // Get and pad sequence count
2025/07/16 08:40:36: Line 253: ByteString.bytes arguments
1: Int: 12

2: Int: 2

ByteString: 0002

2025/07/16 08:40:36: Line 253: var bsSeqPad = bsIuRtn.bytes(12,2).concat(bsZero12); // Get and pad sequence count
2025/07/16 08:40:36: Line 253: ByteString.concat arguments
1: ByteString: 000000000000000000000000

ByteString: 0002000000000000000000000000

2025/07/16 08:40:36: Line 254: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEnc);
2025/07/16 08:40:36: Line 254: ByteString.concat arguments
1: ByteString: 0002000000000000000000000000

ByteString: 01820002000000000000000000000000

2025/07/16 08:40:36: Line 254: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEnc);
2025/07/16 08:40:36: Line 254: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01820002000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:36: Line 255: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEncT2);
2025/07/16 08:40:36: Line 255: ByteString.concat arguments
1: ByteString: 0002000000000000000000000000

ByteString: 01820002000000000000000000000000

2025/07/16 08:40:36: Line 255: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEncT2);
2025/07/16 08:40:36: Line 255: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01820002000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:36: Line 256: crypto.deriveKey(c_kDKmac, Crypto.DES_CBC, bs0101.concat(bsSeqPad), c_kSkuMac);
2025/07/16 08:40:36: Line 256: ByteString.concat arguments
1: ByteString: 0002000000000000000000000000

ByteString: 01010002000000000000000000000000

2025/07/16 08:40:36: Line 256: crypto.deriveKey(c_kDKmac, Crypto.DES_CBC, bs0101.concat(bsSeqPad), c_kSkuMac);
2025/07/16 08:40:36: Line 256: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01010002000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:36: Line 257: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDek);
2025/07/16 08:40:36: Line 257: ByteString.concat arguments
1: ByteString: 0002000000000000000000000000

ByteString: 01810002000000000000000000000000

2025/07/16 08:40:36: Line 257: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDek);
2025/07/16 08:40:36: Line 257: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01810002000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:36: Line 258: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDekT3);
2025/07/16 08:40:36: Line 258: ByteString.concat arguments
1: ByteString: 0002000000000000000000000000

ByteString: 01810002000000000000000000000000

2025/07/16 08:40:36: Line 258: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDekT3);
2025/07/16 08:40:36: Line 258: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01810002000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:36: Line 260: c_kSkuEnc.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:36: Line 260: Key.getKcv arguments
1: Double: 1048576

ByteString: 104137F63B06F851

2025/07/16 08:40:36: Line 261: c_kSkuMac.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:36: Line 261: Key.getKcv arguments
1: Double: 1048576

ByteString: 738ECBD9045D426F

2025/07/16 08:40:36: Line 262: c_kSkuDek.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:36: Line 262: Key.getKcv arguments
1: Double: 1048576

ByteString: AB8167C61BFBD0ED

2025/07/16 08:40:36: Line 266: var kTmp = new Key();
2025/07/16 08:40:36: Line 266: Function.Key arguments

Key: 

2025/07/16 08:40:36: Line 267: crypto.wrap(c_kKek, Crypto.DES_ECB, c_kSkuMac, kTmp);
2025/07/16 08:40:36: Line 267: Crypto.wrap arguments
1: Key

2: Double: 5

3: Key

4: Key: 

Void: undefined

2025/07/16 08:40:36: Line 268: var bsTmp = new ByteString();
2025/07/16 08:40:36: Line 268: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:36: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:36: Line 269: Key.getComponent arguments
1: Double: 393216

ByteString: 1A17A9D4FAA710FE4E7E0639D9A94E67

2025/07/16 08:40:36: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:36: Line 269: ByteString.left arguments
1: Int: 8

ByteString: 1A17A9D4FAA710FE

2025/07/16 08:40:36: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:36: Line 269: Art.execute arguments
1: String: UBDesECB

2: String: DecryptKey3

3: ByteString: 018800000018D1375D8E0BF28D0F74F15ED58D3453275BCE6D7A6D674200000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010100000107000000010101000001080000000101010000010A0000000101000000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C00000001010000000163000000010100000001650000000101000000016400000001010000000161000000040100000010800001020000001001323032353031313531303333313330308000010300000000000000010200000000000000011000000000000000011100000000008000012B000000010100800001290000000101010000016200000001010180000128000000010100000000030000000000000001700000000101010000000000000000000008E6875B89EFDAB41800000018BBAE00142B1764AEA7CF467274ED36882B7ADB33A7E3BF01

4: ByteString: 1A17A9D4FAA710FE

5: ByteString: 

Int: 0

2025/07/16 08:40:36: Line 270: c_kSkuMacT3s.setComponent(Key.DES, bsTmp);
2025/07/16 08:40:36: Line 270: Key.setComponent arguments
1: Double: 393216

2: ByteString

Void: undefined

2025/07/16 08:40:36: Line 315: var bsRcard = bsIuRtn.bytes(12,8);      // Get card random number
2025/07/16 08:40:36: Line 315: ByteString.bytes arguments
1: Int: 12

2: Int: 8

ByteString: 0002BC9F038898C3

2025/07/16 08:40:36: Line 316: var bsMacDat = bsRterm.concat(bsRcard).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:36: Line 316: ByteString.concat arguments
1: ByteString: 0002BC9F038898C3

ByteString: DE12249C2294957D0002BC9F038898C3

2025/07/16 08:40:36: Line 316: var bsMacDat = bsRterm.concat(bsRcard).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:36: Line 316: ByteString.pad arguments
1: Double: 37

ByteString: DE12249C2294957D0002BC9F038898C38000000000000000

2025/07/16 08:40:36: Line 317: var bsMac = crypto.sign(c_kSkuEncT2, Crypto.DES_MAC, bsMacDat);
2025/07/16 08:40:36: Line 317: Crypto.sign arguments
1: Key: 0188000000180F539C26ECB3DD77F734D964ECD736C6827C218B2BFA95E6000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101010000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C000000010100000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333835393030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B0000000101008000012800000001010000000003000000000000000170000000010101000000000000000000000800F35B5EBC0D37C100000018ED0226B7C1656585545063BFB1DA26A72B7ADB33A7E3BF01

2: Double: 8

3: ByteString: DE12249C2294957D0002BC9F038898C38000000000000000

ByteString: B86E14E643D737C3

2025/07/16 08:40:36: Line 321: var bsCrdCg = bsIuRtn.bytes(20,8); // Card's cryptogram
2025/07/16 08:40:36: Line 321: ByteString.bytes arguments
1: Int: 20

2: Int: 8

ByteString: B86E14E643D737C3

2025/07/16 08:40:36: Line 322: if (bsMac.equals(bsCrdCg))
2025/07/16 08:40:36: Line 322: ByteString.equals arguments
1: ByteString: B86E14E643D737C3

Int: 1

2025/07/16 08:40:36: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:36: Line 323: ByteString.toString arguments

String: B86E14E643D737C3

2025/07/16 08:40:36: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:36: Line 323: ByteString.toString arguments

String: B86E14E643D737C3

2025/07/16 08:40:36: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:36: Line 323: GPSystem.trace arguments
1: String: 000863.c_Auth(): Authentication passed; Card's cryptogram (B86E14E643D737C3) matches calculated cryptogram (B86E14E643D737C3).

2025/07/16 08:40:36: GPSystem.trace
000863.c_Auth(): Authentication passed; Card's cryptogram (B86E14E643D737C3) matches calculated cryptogram (B86E14E643D737C3).

Boolean: true

2025/07/16 08:40:36: Line 331: var bsCgDat = bsRcard.concat(bsRterm).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:36: Line 331: ByteString.concat arguments
1: ByteString: DE12249C2294957D

ByteString: 0002BC9F038898C3DE12249C2294957D

2025/07/16 08:40:36: Line 331: var bsCgDat = bsRcard.concat(bsRterm).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:36: Line 331: ByteString.pad arguments
1: Double: 37

ByteString: 0002BC9F038898C3DE12249C2294957D8000000000000000

2025/07/16 08:40:36: Line 332: var bsCg = crypto.sign(c_kSkuEncT2, Crypto.DES_MAC, bsCgDat);
2025/07/16 08:40:36: Line 332: Crypto.sign arguments
1: Key

2: Double: 8

3: ByteString: 0002BC9F038898C3DE12249C2294957D8000000000000000

ByteString: 871BA99BF79F6A14

2025/07/16 08:40:36: Line 371: function c_sendApduS2(nCla, nIns, nP1, nP2, bsDat, nMech, nSecLvl, bsIcv, sMsg)
2025/07/16 08:40:36: Line 371: UBJSGlobalClass.c_sendApduS2 arguments
1: Int: 132

2: Int: 130

3: Int: 0

4: Int: 0

5: ByteString: 871BA99BF79F6A14

6: Double: 9

7: Int: 0

8: ByteString: 0000000000000000

9: String: External Auth

2025/07/16 08:40:36: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:36: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 132

Boolean: false

2025/07/16 08:40:36: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:36: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 130

Boolean: false

2025/07/16 08:40:36: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:36: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:36: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:36: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:36: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:36: Line 378: UBJSGlobalClass.isNaN arguments
1: Double: 9

Boolean: false

2025/07/16 08:40:36: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:36: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:36: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 380: Number.toString arguments
1: Int: 16

String: 84

2025/07/16 08:40:36: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 380: Number.toString arguments
1: Int: 16

String: 82

2025/07/16 08:40:36: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:36: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:36: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 380: ByteString.toString arguments

String: 871BA99BF79F6A14

2025/07/16 08:40:36: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 380: Number.toString arguments
1: Int: 16

String: 9

2025/07/16 08:40:36: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:36: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 380: ByteString.toString arguments

String: 0000000000000000

2025/07/16 08:40:36: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 380: Function.ByteString arguments
1: String: !!+000863.c_sendApduS2(84, 82, 0, 0, 871BA99BF79F6A14, 9, 0, 0000000000000000, External Auth)

2: Double: 1

ByteString: 21212B3030303836332E635F73656E644170647553322838342C2038322C20302C20302C20383731424139394246373946364131342C20392C20302C20303030303030303030303030303030302C2045787465726E616C204175746829

2025/07/16 08:40:36: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:36: Line 384: Number.toString arguments
1: Int: 16

String: 84

2025/07/16 08:40:36: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:36: Line 384: String.toUpperCase arguments

String: 84

2025/07/16 08:40:36: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:36: Line 384: String.substr arguments
1: Int: -2

2: Int: 2

String: 84

2025/07/16 08:40:36: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:36: Line 385: Number.toString arguments
1: Int: 16

String: 82

2025/07/16 08:40:36: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:36: Line 385: String.toUpperCase arguments

String: 82

2025/07/16 08:40:36: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:36: Line 385: String.substr arguments
1: Int: -2

2: Int: 2

String: 82

2025/07/16 08:40:36: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:36: Line 386: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:36: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:36: Line 386: String.toUpperCase arguments

String: 0

2025/07/16 08:40:36: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:36: Line 386: String.substr arguments
1: Int: -2

2: Int: 2

String: 00

2025/07/16 08:40:36: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:36: Line 387: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:36: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:36: Line 387: String.toUpperCase arguments

String: 0

2025/07/16 08:40:36: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:36: Line 387: String.substr arguments
1: Int: -2

2: Int: 2

String: 00

2025/07/16 08:40:36: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:36: Line 388: Number.toString arguments
1: Int: 16

String: 10

2025/07/16 08:40:36: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:36: Line 388: String.toUpperCase arguments

String: 10

2025/07/16 08:40:36: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:36: Line 388: String.substr arguments
1: Int: -2

2: Int: 2

String: 10

2025/07/16 08:40:36: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:36: Line 392: ByteString.valueOf arguments

ByteString: 871BA99BF79F6A14

2025/07/16 08:40:36: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:36: Line 392: ByteString.toString arguments

String: 871BA99BF79F6A14

2025/07/16 08:40:36: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:36: Line 392: Function.ByteString arguments
1: String: 8482000010871BA99BF79F6A14

2: Double: 4

ByteString: 8482000010871BA99BF79F6A14

2025/07/16 08:40:36: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:36: Line 392: ByteString.pad arguments
1: Double: 37

ByteString: 8482000010871BA99BF79F6A14800000

2025/07/16 08:40:36: Line 393: var bsMac = crypto.sign(c_kSkuMac, nMech, bsCmd, bsIcv); // MAC cmd
2025/07/16 08:40:36: Line 393: Crypto.sign arguments
1: Key

2: Double: 9

3: ByteString: 8482000010871BA99BF79F6A14800000

4: ByteString: 0000000000000000

ByteString: D05B5C8B3EEE583F

2025/07/16 08:40:36: Line 402: GPSystem.trace(sMsg); // Log
2025/07/16 08:40:36: Line 402: GPSystem.trace arguments
1: String: External Auth

2025/07/16 08:40:36: GPSystem.trace
External Auth

Boolean: true

2025/07/16 08:40:36: Line 403: var bsRtn = card.sendApdu(nCla,nIns,nP1,nP2,bsDat.concat(bsMac));
2025/07/16 08:40:36: Line 403: ByteString.concat arguments
1: ByteString: D05B5C8B3EEE583F

ByteString: 871BA99BF79F6A14D05B5C8B3EEE583F

2025/07/16 08:40:36: Line 403: var bsRtn = card.sendApdu(nCla,nIns,nP1,nP2,bsDat.concat(bsMac));
2025/07/16 08:40:36: Line 403: Card.sendApdu arguments
1: Int: 132

2: Int: 130

3: Int: 0

4: Int: 0

5: ByteString: 871BA99BF79F6A14D05B5C8B3EEE583F

2025/07/16 08:40:36: DCC9kServer IC Commands
0000: 84 82 00 00 10 87 1B A9-9B F7 9F 6A 14 D0 5B 5C                j  [\
0010: 8B 3E EE 58 3F 21 53 57-02 2B 2A                     > X?!SW +*     

2025/07/16 08:40:36: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:36: Line 407: c_bsChainMac = crypto.encrypt(c_kSkuMacT3s, Crypto.DES_CBC, bsMac); // ICV encryption for C-MAC session
2025/07/16 08:40:36: Line 407: Crypto.encrypt arguments
1: Key

2: Double: 2

3: ByteString: D05B5C8B3EEE583F

ByteString: E0848B6C7275C47A

2025/07/16 08:40:36: Line 411: new ByteString("!"+"!-"+CALL+"("+bsRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:36: Line 411: ByteString.toString arguments

String: 

2025/07/16 08:40:36: Line 411: new ByteString("!"+"!-"+CALL+"("+bsRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:36: Line 411: Function.ByteString arguments
1: String: !!-000863.c_sendApduS2()

2: Double: 1

ByteString: 21212D3030303836332E635F73656E644170647553322829

2025/07/16 08:40:36: Line 412: UBJSGlobalClass.c_sendApduS2 result
ByteString: 

2025/07/16 08:40:36: Line 343: new ByteString("!"+"!-"+CALL+"("+bsIuRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:36: Line 343: ByteString.toString arguments

String: FFFFFFFFFBF304EA754401020002BC9F038898C3B86E14E643D737C3

2025/07/16 08:40:36: Line 343: new ByteString("!"+"!-"+CALL+"("+bsIuRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:36: Line 343: Function.ByteString arguments
1: String: !!-000863.c_Auth(FFFFFFFFFBF304EA754401020002BC9F038898C3B86E14E643D737C3)

2: Double: 1

ByteString: 21212D3030303836332E635F4175746828464646464646464646424633303445413735343430313032303030324243394630333838393843334238364531344536343344373337433329

2025/07/16 08:40:36: Line 344: UBJSGlobalClass.c_Auth result
ByteString: FFFFFFFFFBF304EA754401020002BC9F038898C3B86E14E643D737C3

2025/07/16 08:40:36: Line 1358: var tAid = new TLVList(art.getVariableValue("tCtP3i_4F_Aid"),TLV.EMV).index(0);
2025/07/16 08:40:36: Line 1358: Art.getVariableValue arguments
1: String: tCtP3i_4F_Aid

ByteString: 4F07A0000000031010

2025/07/16 08:40:36: Line 1358: var tAid = new TLVList(art.getVariableValue("tCtP3i_4F_Aid"),TLV.EMV).index(0);
2025/07/16 08:40:36: Line 1358: Function.TLVList arguments
1: ByteString: 4F07A0000000031010

2: Double: 2

TLVList: 4F07A0000000031010

2025/07/16 08:40:36: Line 1358: var tAid = new TLVList(art.getVariableValue("tCtP3i_4F_Aid"),TLV.EMV).index(0);
2025/07/16 08:40:36: Line 1358: TLVList.index arguments
1: Int: 0

TLV: 4F07A0000000031010

2025/07/16 08:40:36: Line 1359: var bsAid = tAid.getTLV();
2025/07/16 08:40:36: Line 1359: TLV.getTLV arguments

ByteString: 4F07A0000000031010

2025/07/16 08:40:36: Line 1360: card.sendApdu(0x80,0xE4,0x00,0x00,bsAid,0x00,[0x9000,0x6A88]);//Delete app
2025/07/16 08:40:36: Line 1360: Card.sendApdu arguments
1: Int: 128

2: Int: 228

3: Int: 0

4: Int: 0

5: ByteString: 4F07A0000000031010

6: Int: 0

7: Array: 36864,27272

2025/07/16 08:40:36: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: E4 00 00 09 4F 07 A0 00-00 00 03 10 10 00 21 53         O         !S
0020: 57 02 2B 2A                                         W +*            

2025/07/16 08:40:36: DCC9kServer IC Response: Result = 0, SW1SW2 = 6A88

ByteString: 

2025/07/16 08:40:36: Line 1366: var sAid = tAid.getValue().toString();
2025/07/16 08:40:36: Line 1366: TLV.getValue arguments

ByteString: A0000000031010

2025/07/16 08:40:36: Line 1366: var sAid = tAid.getValue().toString();
2025/07/16 08:40:36: Line 1366: ByteString.toString arguments

String: A0000000031010

2025/07/16 08:40:36: Line 437: function c_InstallFmt(sLodAid, sModAid, sAid, sPriv, sC9, sC6, sC7, sC8, sTok)
2025/07/16 08:40:36: Line 437: UBJSGlobalClass.c_InstallFmt arguments
1: String: A00000000310

2: String: A0000000031056

3: String: A0000000031010

4: String: 10

5: String: 01

6: String: 

7: String: 

8: String: 

9: String: 

2025/07/16 08:40:36: Line 446: new ByteString("!"+"!+"+CALL+"("+sLodAid+", "+sModAid+", "+sAid+", "+sPriv+", "+sC9+", "+sC6+", "+sC7+", "+sC8+", "+sTok+")",ASCII); // Log begin func
2025/07/16 08:40:36: Line 446: Function.ByteString arguments
1: String: !!+000863.c_InstallFmt(A00000000310, A0000000031056, A0000000031010, 10, 01, , , , )

2: Double: 1

ByteString: 21212B3030303836332E635F496E7374616C6C466D74284130303030303030303331302C2041303030303030303033313035362C2041303030303030303033313031302C2031302C2030312C202C202C202C2029

2025/07/16 08:40:36: Line 450: var bsLodAid = new ByteString(sLodAid, HEX);
2025/07/16 08:40:36: Line 450: Function.ByteString arguments
1: String: A00000000310

2: Double: 4

ByteString: A00000000310

2025/07/16 08:40:36: Line 451: var bsModAid = new ByteString(sModAid, HEX);
2025/07/16 08:40:36: Line 451: Function.ByteString arguments
1: String: A0000000031056

2: Double: 4

ByteString: A0000000031056

2025/07/16 08:40:36: Line 452: var bsAid    = new ByteString(sAid, HEX);
2025/07/16 08:40:36: Line 452: Function.ByteString arguments
1: String: A0000000031010

2: Double: 4

ByteString: A0000000031010

2025/07/16 08:40:36: Line 453: var bsPriv   = new ByteString(sPriv, HEX);
2025/07/16 08:40:36: Line 453: Function.ByteString arguments
1: String: 10

2: Double: 4

ByteString: 10

2025/07/16 08:40:36: Line 454: var bsTok    = new ByteString(sTok, HEX);
2025/07/16 08:40:36: Line 454: Function.ByteString arguments
1: String: 

2: Double: 4

ByteString: 

2025/07/16 08:40:36: Line 459: var tDat = new TLV(0xC9, new ByteString(sC9, HEX), TLV.EMV);
2025/07/16 08:40:36: Line 459: Function.ByteString arguments
1: String: 01

2: Double: 4

ByteString: 01

2025/07/16 08:40:36: Line 459: var tDat = new TLV(0xC9, new ByteString(sC9, HEX), TLV.EMV);
2025/07/16 08:40:36: Line 459: Function.TLV arguments
1: Int: 201

2: ByteString: 01

3: Double: 2

TLV: C90101

2025/07/16 08:40:36: Line 460: var bsApPrm = tDat.getTLV();
2025/07/16 08:40:36: Line 460: TLV.getTLV arguments

ByteString: C90101

2025/07/16 08:40:36: Line 463: var bsSyPrm = new ByteString();
2025/07/16 08:40:36: Line 463: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:36: Line 464: var tlDat = new TLVList(new ByteString(), TLV.EMV);
2025/07/16 08:40:36: Line 464: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:36: Line 464: var tlDat = new TLVList(new ByteString(), TLV.EMV);
2025/07/16 08:40:36: Line 464: Function.TLVList arguments
1: ByteString: 

2: Double: 2

TLVList: 

2025/07/16 08:40:36: Line 481: var bsPrm = bsApPrm.concat(bsSyPrm);
2025/07/16 08:40:36: Line 481: ByteString.concat arguments
1: ByteString: 

ByteString: C90101

2025/07/16 08:40:36: Line 485: var bsOut =         bsLodAid.getLV(TLV.EMV)
2025/07/16 08:40:36: Line 485: ByteString.getLV arguments
1: Double: 2

ByteString: 06A00000000310

2025/07/16 08:40:36: Line 486: .concat(bsModAid.getLV(TLV.EMV))
2025/07/16 08:40:36: Line 486: ByteString.getLV arguments
1: Double: 2

ByteString: 07A0000000031056

2025/07/16 08:40:36: Line 486: .concat(bsModAid.getLV(TLV.EMV))
2025/07/16 08:40:36: Line 486: ByteString.concat arguments
1: ByteString: 07A0000000031056

ByteString: 06A0000000031007A0000000031056

2025/07/16 08:40:36: Line 487: .concat(   bsAid.getLV(TLV.EMV))
2025/07/16 08:40:36: Line 487: ByteString.getLV arguments
1: Double: 2

ByteString: 07A0000000031010

2025/07/16 08:40:36: Line 487: .concat(   bsAid.getLV(TLV.EMV))
2025/07/16 08:40:36: Line 487: ByteString.concat arguments
1: ByteString: 07A0000000031010

ByteString: 06A0000000031007A000000003105607A0000000031010

2025/07/16 08:40:36: Line 488: .concat(  bsPriv.getLV(TLV.EMV))
2025/07/16 08:40:36: Line 488: ByteString.getLV arguments
1: Double: 2

ByteString: 0110

2025/07/16 08:40:36: Line 488: .concat(  bsPriv.getLV(TLV.EMV))
2025/07/16 08:40:36: Line 488: ByteString.concat arguments
1: ByteString: 0110

ByteString: 06A0000000031007A000000003105607A00000000310100110

2025/07/16 08:40:36: Line 489: .concat(   bsPrm.getLV(TLV.EMV))
2025/07/16 08:40:36: Line 489: ByteString.getLV arguments
1: Double: 2

ByteString: 03C90101

2025/07/16 08:40:36: Line 489: .concat(   bsPrm.getLV(TLV.EMV))
2025/07/16 08:40:36: Line 489: ByteString.concat arguments
1: ByteString: 03C90101

ByteString: 06A0000000031007A000000003105607A0000000031010011003C90101

2025/07/16 08:40:36: Line 490: .concat(   bsTok.getLV(TLV.EMV));
2025/07/16 08:40:36: Line 490: ByteString.getLV arguments
1: Double: 2

ByteString: 00

2025/07/16 08:40:36: Line 490: .concat(   bsTok.getLV(TLV.EMV));
2025/07/16 08:40:36: Line 490: ByteString.concat arguments
1: ByteString: 00

ByteString: 06A0000000031007A000000003105607A0000000031010011003C9010100

2025/07/16 08:40:36: Line 494: new ByteString("!"+"!-"+CALL+"("+bsOut.toString()+")",ASCII); // Log end func
2025/07/16 08:40:36: Line 494: ByteString.toString arguments

String: 06A0000000031007A000000003105607A0000000031010011003C9010100

2025/07/16 08:40:36: Line 494: new ByteString("!"+"!-"+CALL+"("+bsOut.toString()+")",ASCII); // Log end func
2025/07/16 08:40:36: Line 494: Function.ByteString arguments
1: String: !!-000863.c_InstallFmt(06A0000000031007A000000003105607A0000000031010011003C9010100)

2: Double: 1

ByteString: 21212D3030303836332E635F496E7374616C6C466D742830364130303030303030303331303037413030303030303030333130353630374130303030303030303331303130303131303033433930313031303029

2025/07/16 08:40:36: Line 495: UBJSGlobalClass.c_InstallFmt result
ByteString: 06A0000000031007A000000003105607A0000000031010011003C9010100

2025/07/16 08:40:36: Line 1370: card.sendApdu(0x80,0xE6,0x0C,0x00,bsDat,0x00); //Install app
2025/07/16 08:40:36: Line 1370: Card.sendApdu arguments
1: Int: 128

2: Int: 230

3: Int: 12

4: Int: 0

5: ByteString: 06A0000000031007A000000003105607A0000000031010011003C9010100

6: Int: 0

2025/07/16 08:40:36: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: E6 0C 00 1E 06 A0 00 00-00 03 10 07 A0 00 00 00                     
0020: 03 10 56 07 A0 00 00 00-03 10 10 01 10 03 C9 01       V             
0030: 01 00 00 21 53 57 02 2B-2A                             !SW +*       

2025/07/16 08:40:37: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: 00                                                                  

ByteString: 00

2025/07/16 08:40:37: Line 1376: card.sendApdu(0x80,0xCA,0x9F,0x7D,0x09,arSw); //Application Code Level
2025/07/16 08:40:37: Line 1376: Card.sendApdu arguments
1: Int: 128

2: Int: 202

3: Int: 159

4: Int: 125

5: Int: 9

6: Array: 98,99,104,105,106,109,110,111,144

2025/07/16 08:40:37: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 32 80     !IOCTL ISOCase2 
0010: CA 9F 7D 09 21 53 57 02-2B 2A                         } !SW +*      

2025/07/16 08:40:37: DCC9kServer IC Response: Result = 0, SW1SW2 = 6A88

ByteString: 

2025/07/16 08:40:37: Line 1380: c_Auth(tAid.getValue(), c_nAuthMeth, c_nAuthKeyVersion, 0x00, 0x00);
2025/07/16 08:40:37: Line 1380: TLV.getValue arguments

ByteString: A0000000031010

2025/07/16 08:40:37: Line 49: function c_Auth(bsAid, nMeth, nVr, nId, nSecLvl)
2025/07/16 08:40:37: Line 49: UBJSGlobalClass.c_Auth arguments
1: ByteString: A0000000031010

2: Int: 22

3: Int: 0

4: Int: 0

5: Int: 0

2025/07/16 08:40:37: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:37: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 22

Boolean: false

2025/07/16 08:40:37: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:37: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:37: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:37: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:37: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:37: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:37: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:37: Line 58: ByteString.toString arguments

String: A0000000031010

2025/07/16 08:40:37: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:37: Line 58: Number.toString arguments
1: Int: 10

String: 22

2025/07/16 08:40:37: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:37: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:37: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:37: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:37: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:37: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:37: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:37: Line 58: Function.ByteString arguments
1: String: !!+000863.c_Auth(A0000000031010, 22, 0, 0, 0)

2: Double: 1

ByteString: 21212B3030303836332E635F417574682841303030303030303033313031302C2032322C20302C20302C203029

2025/07/16 08:40:37: Line 62: var bsF001 = new ByteString("F001", HEX);
2025/07/16 08:40:37: Line 62: Function.ByteString arguments
1: String: F001

2: Double: 4

ByteString: F001

2025/07/16 08:40:37: Line 63: var bsF002 = new ByteString("F002", HEX);
2025/07/16 08:40:37: Line 63: Function.ByteString arguments
1: String: F002

2: Double: 4

ByteString: F002

2025/07/16 08:40:37: Line 64: var bsF003 = new ByteString("F003", HEX);
2025/07/16 08:40:37: Line 64: Function.ByteString arguments
1: String: F003

2: Double: 4

ByteString: F003

2025/07/16 08:40:37: Line 65: var bs0F01 = new ByteString("0F01", HEX);
2025/07/16 08:40:37: Line 65: Function.ByteString arguments
1: String: 0F01

2: Double: 4

ByteString: 0F01

2025/07/16 08:40:37: Line 66: var bs0F02 = new ByteString("0F02", HEX);
2025/07/16 08:40:37: Line 66: Function.ByteString arguments
1: String: 0F02

2: Double: 4

ByteString: 0F02

2025/07/16 08:40:37: Line 67: var bs0F03 = new ByteString("0F03", HEX);
2025/07/16 08:40:37: Line 67: Function.ByteString arguments
1: String: 0F03

2: Double: 4

ByteString: 0F03

2025/07/16 08:40:37: Line 68: var bs0182 = new ByteString("0182", HEX);
2025/07/16 08:40:37: Line 68: Function.ByteString arguments
1: String: 0182

2: Double: 4

ByteString: 0182

2025/07/16 08:40:37: Line 69: var bs0101 = new ByteString("0101", HEX);
2025/07/16 08:40:37: Line 69: Function.ByteString arguments
1: String: 0101

2: Double: 4

ByteString: 0101

2025/07/16 08:40:37: Line 70: var bs0181 = new ByteString("0181", HEX);
2025/07/16 08:40:37: Line 70: Function.ByteString arguments
1: String: 0181

2: Double: 4

ByteString: 0181

2025/07/16 08:40:37: Line 71: var bsZero12 = new ByteString("000000000000000000000000",HEX);
2025/07/16 08:40:37: Line 71: Function.ByteString arguments
1: String: 000000000000000000000000

2: Double: 4

ByteString: 000000000000000000000000

2025/07/16 08:40:37: Line 72: var bsZero8  = new ByteString("0000000000000000",HEX);
2025/07/16 08:40:37: Line 72: Function.ByteString arguments
1: String: 0000000000000000

2: Double: 4

ByteString: 0000000000000000

2025/07/16 08:40:37: Line 77: card.sendApdu(0x00,0xA4,0x04,0x00,bsAid,0x00); //Select AID
2025/07/16 08:40:37: Line 77: Card.sendApdu arguments
1: Int: 0

2: Int: 164

3: Int: 4

4: Int: 0

5: ByteString: A0000000031010

6: Int: 0

2025/07/16 08:40:37: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 00     !IOCTL ISOCase4 
0010: A4 04 00 07 A0 00 00 00-03 10 10 00 21 53 57 02                 !SW 
0020: 2B 2A                                               +*              

2025/07/16 08:40:38: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: 6F 09 84 07 A0 00 00 00-03 10 10                    o               

ByteString: 6F098407A0000000031010

2025/07/16 08:40:38: Line 81: var bsRterm = crypto.generateRandom(8);
2025/07/16 08:40:38: Line 81: Crypto.generateRandom arguments
1: Int: 8

ByteString: 8347E872E1EC5F35

2025/07/16 08:40:38: Line 87: var bsIuRtn = card.sendApdu(0x80,0x50,nVr,nId,bsRterm,0x00);//Init update
2025/07/16 08:40:38: Line 87: Card.sendApdu arguments
1: Int: 128

2: Int: 80

3: Int: 0

4: Int: 0

5: ByteString: 8347E872E1EC5F35

6: Int: 0

2025/07/16 08:40:38: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: 50 00 00 08 83 47 E8 72-E1 EC 5F 35 00 21 53 57     P    G r  _5 !SW
0020: 02 2B 2A                                             +*             

2025/07/16 08:40:38: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: FF FF FF FF FB F3 04 EA-75 44 01 02 00 03 01 91             uD      
0010: A3 76 69 6A C6 15 C9 07-5A 27 4A 3C                  vij    Z'J<    

ByteString: FFFFFFFFFBF304EA7544010200030191A376696AC615C9075A274A3C

2025/07/16 08:40:38: Line 235: var bsIuDiv  = bsIuRtn.bytes(4,6);
2025/07/16 08:40:38: Line 235: ByteString.bytes arguments
1: Int: 4

2: Int: 6

ByteString: FBF304EA7544

2025/07/16 08:40:38: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:38: Line 236: ByteString.concat arguments
1: ByteString: F001

ByteString: FBF304EA7544F001

2025/07/16 08:40:38: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:38: Line 236: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F001FBF304EA7544

2025/07/16 08:40:38: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:38: Line 236: ByteString.concat arguments
1: ByteString: 0F01

ByteString: FBF304EA7544F001FBF304EA75440F01

2025/07/16 08:40:38: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:38: Line 237: ByteString.concat arguments
1: ByteString: F002

ByteString: FBF304EA7544F002

2025/07/16 08:40:38: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:38: Line 237: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F002FBF304EA7544

2025/07/16 08:40:38: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:38: Line 237: ByteString.concat arguments
1: ByteString: 0F02

ByteString: FBF304EA7544F002FBF304EA75440F02

2025/07/16 08:40:38: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:38: Line 238: ByteString.concat arguments
1: ByteString: F003

ByteString: FBF304EA7544F003

2025/07/16 08:40:38: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:38: Line 238: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F003FBF304EA7544

2025/07/16 08:40:38: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:38: Line 238: ByteString.concat arguments
1: ByteString: 0F03

ByteString: FBF304EA7544F003FBF304EA75440F03

2025/07/16 08:40:38: Line 242: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsEncDiv, c_kDKenc);
2025/07/16 08:40:38: Line 242: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F001FBF304EA75440F01

4: Key

Void: undefined

2025/07/16 08:40:38: Line 243: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsMacDiv, c_kDKmac);
2025/07/16 08:40:38: Line 243: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F002FBF304EA75440F02

4: Key

Void: undefined

2025/07/16 08:40:38: Line 244: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsDekDiv, c_kDKdek);
2025/07/16 08:40:38: Line 244: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F003FBF304EA75440F03

4: Key

Void: undefined

2025/07/16 08:40:38: Line 245: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsDekDiv, c_kDKdekT0);
2025/07/16 08:40:38: Line 245: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F003FBF304EA75440F03

4: Key: 01880000001840712628C3ABECF288CB42D42D7857CE951E7620CCD20768000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010100000107000000010101000001080000000101010000010A0000000101000000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C000000010100000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333835393030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B00000001010080000128000000010100000000030000000000000001700000000101010000000000000000000008A4FDEC8179C7EBA30000001881A40C0011AD22CF3E6CD6ABAFD5ACCA2B7ADB33A7E3BF01

Void: undefined

2025/07/16 08:40:38: Line 247: c_kDKenc.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:38: Line 247: Key.getKcv arguments
1: Double: 1048576

ByteString: 2F60DAE9569C6DE8

2025/07/16 08:40:38: Line 248: c_kDKmac.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:38: Line 248: Key.getKcv arguments
1: Double: 1048576

ByteString: 5CCE4854D71634D1

2025/07/16 08:40:38: Line 249: c_kDKdek.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:38: Line 249: Key.getKcv arguments
1: Double: 1048576

ByteString: 36B975605BE0D863

2025/07/16 08:40:38: Line 253: var bsSeqPad = bsIuRtn.bytes(12,2).concat(bsZero12); // Get and pad sequence count
2025/07/16 08:40:38: Line 253: ByteString.bytes arguments
1: Int: 12

2: Int: 2

ByteString: 0003

2025/07/16 08:40:38: Line 253: var bsSeqPad = bsIuRtn.bytes(12,2).concat(bsZero12); // Get and pad sequence count
2025/07/16 08:40:38: Line 253: ByteString.concat arguments
1: ByteString: 000000000000000000000000

ByteString: 0003000000000000000000000000

2025/07/16 08:40:38: Line 254: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEnc);
2025/07/16 08:40:38: Line 254: ByteString.concat arguments
1: ByteString: 0003000000000000000000000000

ByteString: 01820003000000000000000000000000

2025/07/16 08:40:38: Line 254: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEnc);
2025/07/16 08:40:38: Line 254: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01820003000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:38: Line 255: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEncT2);
2025/07/16 08:40:38: Line 255: ByteString.concat arguments
1: ByteString: 0003000000000000000000000000

ByteString: 01820003000000000000000000000000

2025/07/16 08:40:38: Line 255: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEncT2);
2025/07/16 08:40:38: Line 255: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01820003000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:38: Line 256: crypto.deriveKey(c_kDKmac, Crypto.DES_CBC, bs0101.concat(bsSeqPad), c_kSkuMac);
2025/07/16 08:40:38: Line 256: ByteString.concat arguments
1: ByteString: 0003000000000000000000000000

ByteString: 01010003000000000000000000000000

2025/07/16 08:40:38: Line 256: crypto.deriveKey(c_kDKmac, Crypto.DES_CBC, bs0101.concat(bsSeqPad), c_kSkuMac);
2025/07/16 08:40:38: Line 256: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01010003000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:38: Line 257: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDek);
2025/07/16 08:40:38: Line 257: ByteString.concat arguments
1: ByteString: 0003000000000000000000000000

ByteString: 01810003000000000000000000000000

2025/07/16 08:40:38: Line 257: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDek);
2025/07/16 08:40:38: Line 257: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01810003000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:38: Line 258: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDekT3);
2025/07/16 08:40:38: Line 258: ByteString.concat arguments
1: ByteString: 0003000000000000000000000000

ByteString: 01810003000000000000000000000000

2025/07/16 08:40:38: Line 258: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDekT3);
2025/07/16 08:40:38: Line 258: Crypto.deriveKey arguments
1: Key: 01880000001840712628C3ABECF288CB42D42D7857CE951E7620CCD20768000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101000000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C000000010101000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333930313030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B00000001010080000128000000010100000000030000000000000001700000000101010000000000000000000008BB779D9D355B70E600000018FE3C9389AA3E3E6B5F9A5AD2DA10162E2B7ADB33A7E3BF01

2: Double: 2

3: ByteString: 01810003000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:38: Line 260: c_kSkuEnc.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:38: Line 260: Key.getKcv arguments
1: Double: 1048576

ByteString: 49C11578045AD320

2025/07/16 08:40:38: Line 261: c_kSkuMac.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:38: Line 261: Key.getKcv arguments
1: Double: 1048576

ByteString: 1E93590FC9768A4F

2025/07/16 08:40:38: Line 262: c_kSkuDek.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:38: Line 262: Key.getKcv arguments
1: Double: 1048576

ByteString: 15BABD9583867E7C

2025/07/16 08:40:38: Line 266: var kTmp = new Key();
2025/07/16 08:40:38: Line 266: Function.Key arguments

Key: 

2025/07/16 08:40:38: Line 267: crypto.wrap(c_kKek, Crypto.DES_ECB, c_kSkuMac, kTmp);
2025/07/16 08:40:38: Line 267: Crypto.wrap arguments
1: Key

2: Double: 5

3: Key: 018800000018CE7793557973F0F6DFD9ECBC8D0E829959FDCF16031C7624000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101010000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C000000010100000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333930313030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B00000001010080000128000000010100000000030000000000000001700000000101010000000000000000000008C7215499A9D667930000001833065798A0596DB544AD7CC7AE7753F12B7ADB33A7E3BF01

4: Key: 

Void: undefined

2025/07/16 08:40:38: Line 268: var bsTmp = new ByteString();
2025/07/16 08:40:38: Line 268: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:38: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:38: Line 269: Key.getComponent arguments
1: Double: 393216

ByteString: EE958D335C50F5964E895673FFEE99B7

2025/07/16 08:40:38: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:38: Line 269: ByteString.left arguments
1: Int: 8

ByteString: EE958D335C50F596

2025/07/16 08:40:38: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:38: Line 269: Art.execute arguments
1: String: UBDesECB

2: String: DecryptKey3

3: ByteString

4: ByteString: EE958D335C50F596

5: ByteString: 

Int: 0

2025/07/16 08:40:38: Line 270: c_kSkuMacT3s.setComponent(Key.DES, bsTmp);
2025/07/16 08:40:38: Line 270: Key.setComponent arguments
1: Double: 393216

2: ByteString

Void: undefined

2025/07/16 08:40:38: Line 315: var bsRcard = bsIuRtn.bytes(12,8);      // Get card random number
2025/07/16 08:40:38: Line 315: ByteString.bytes arguments
1: Int: 12

2: Int: 8

ByteString: 00030191A376696A

2025/07/16 08:40:38: Line 316: var bsMacDat = bsRterm.concat(bsRcard).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:38: Line 316: ByteString.concat arguments
1: ByteString: 00030191A376696A

ByteString: 8347E872E1EC5F3500030191A376696A

2025/07/16 08:40:38: Line 316: var bsMacDat = bsRterm.concat(bsRcard).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:38: Line 316: ByteString.pad arguments
1: Double: 37

ByteString: 8347E872E1EC5F3500030191A376696A8000000000000000

2025/07/16 08:40:38: Line 317: var bsMac = crypto.sign(c_kSkuEncT2, Crypto.DES_MAC, bsMacDat);
2025/07/16 08:40:38: Line 317: Crypto.sign arguments
1: Key

2: Double: 8

3: ByteString: 8347E872E1EC5F3500030191A376696A8000000000000000

ByteString: C615C9075A274A3C

2025/07/16 08:40:38: Line 321: var bsCrdCg = bsIuRtn.bytes(20,8); // Card's cryptogram
2025/07/16 08:40:38: Line 321: ByteString.bytes arguments
1: Int: 20

2: Int: 8

ByteString: C615C9075A274A3C

2025/07/16 08:40:38: Line 322: if (bsMac.equals(bsCrdCg))
2025/07/16 08:40:38: Line 322: ByteString.equals arguments
1: ByteString: C615C9075A274A3C

Int: 1

2025/07/16 08:40:38: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:38: Line 323: ByteString.toString arguments

String: C615C9075A274A3C

2025/07/16 08:40:38: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:38: Line 323: ByteString.toString arguments

String: C615C9075A274A3C

2025/07/16 08:40:38: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:38: Line 323: GPSystem.trace arguments
1: String: 000863.c_Auth(): Authentication passed; Card's cryptogram (C615C9075A274A3C) matches calculated cryptogram (C615C9075A274A3C).

2025/07/16 08:40:38: GPSystem.trace
000863.c_Auth(): Authentication passed; Card's cryptogram (C615C9075A274A3C) matches calculated cryptogram (C615C9075A274A3C).

Boolean: true

2025/07/16 08:40:38: Line 331: var bsCgDat = bsRcard.concat(bsRterm).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:38: Line 331: ByteString.concat arguments
1: ByteString: 8347E872E1EC5F35

ByteString: 00030191A376696A8347E872E1EC5F35

2025/07/16 08:40:38: Line 331: var bsCgDat = bsRcard.concat(bsRterm).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:38: Line 331: ByteString.pad arguments
1: Double: 37

ByteString: 00030191A376696A8347E872E1EC5F358000000000000000

2025/07/16 08:40:38: Line 332: var bsCg = crypto.sign(c_kSkuEncT2, Crypto.DES_MAC, bsCgDat);
2025/07/16 08:40:38: Line 332: Crypto.sign arguments
1: Key

2: Double: 8

3: ByteString: 00030191A376696A8347E872E1EC5F358000000000000000

ByteString: CC8106803D4DF037

2025/07/16 08:40:38: Line 371: function c_sendApduS2(nCla, nIns, nP1, nP2, bsDat, nMech, nSecLvl, bsIcv, sMsg)
2025/07/16 08:40:38: Line 371: UBJSGlobalClass.c_sendApduS2 arguments
1: Int: 132

2: Int: 130

3: Int: 0

4: Int: 0

5: ByteString: CC8106803D4DF037

6: Double: 9

7: Int: 0

8: ByteString: 0000000000000000

9: String: External Auth

2025/07/16 08:40:38: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:38: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 132

Boolean: false

2025/07/16 08:40:38: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:38: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 130

Boolean: false

2025/07/16 08:40:38: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:38: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:38: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:38: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:38: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:38: Line 378: UBJSGlobalClass.isNaN arguments
1: Double: 9

Boolean: false

2025/07/16 08:40:38: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:38: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:38: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:38: Line 380: Number.toString arguments
1: Int: 16

String: 84

2025/07/16 08:40:38: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:38: Line 380: Number.toString arguments
1: Int: 16

String: 82

2025/07/16 08:40:38: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:38: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:38: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:38: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:38: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:38: Line 380: ByteString.toString arguments

String: CC8106803D4DF037

2025/07/16 08:40:38: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:38: Line 380: Number.toString arguments
1: Int: 16

String: 9

2025/07/16 08:40:38: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:38: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:38: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:38: Line 380: ByteString.toString arguments

String: 0000000000000000

2025/07/16 08:40:38: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:38: Line 380: Function.ByteString arguments
1: String: !!+000863.c_sendApduS2(84, 82, 0, 0, CC8106803D4DF037, 9, 0, 0000000000000000, External Auth)

2: Double: 1

ByteString: 21212B3030303836332E635F73656E644170647553322838342C2038322C20302C20302C20434338313036383033443444463033372C20392C20302C20303030303030303030303030303030302C2045787465726E616C204175746829

2025/07/16 08:40:38: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:38: Line 384: Number.toString arguments
1: Int: 16

String: 84

2025/07/16 08:40:38: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:38: Line 384: String.toUpperCase arguments

String: 84

2025/07/16 08:40:38: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:38: Line 384: String.substr arguments
1: Int: -2

2: Int: 2

String: 84

2025/07/16 08:40:38: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:38: Line 385: Number.toString arguments
1: Int: 16

String: 82

2025/07/16 08:40:38: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:38: Line 385: String.toUpperCase arguments

String: 82

2025/07/16 08:40:38: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:38: Line 385: String.substr arguments
1: Int: -2

2: Int: 2

String: 82

2025/07/16 08:40:38: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:38: Line 386: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:38: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:38: Line 386: String.toUpperCase arguments

String: 0

2025/07/16 08:40:38: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:38: Line 386: String.substr arguments
1: Int: -2

2: Int: 2

String: 00

2025/07/16 08:40:38: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:38: Line 387: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:38: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:38: Line 387: String.toUpperCase arguments

String: 0

2025/07/16 08:40:38: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:38: Line 387: String.substr arguments
1: Int: -2

2: Int: 2

String: 00

2025/07/16 08:40:38: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:38: Line 388: Number.toString arguments
1: Int: 16

String: 10

2025/07/16 08:40:38: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:38: Line 388: String.toUpperCase arguments

String: 10

2025/07/16 08:40:38: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:38: Line 388: String.substr arguments
1: Int: -2

2: Int: 2

String: 10

2025/07/16 08:40:38: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:38: Line 392: ByteString.valueOf arguments

ByteString: CC8106803D4DF037

2025/07/16 08:40:38: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:38: Line 392: ByteString.toString arguments

String: CC8106803D4DF037

2025/07/16 08:40:38: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:38: Line 392: Function.ByteString arguments
1: String: 8482000010CC8106803D4DF037

2: Double: 4

ByteString: 8482000010CC8106803D4DF037

2025/07/16 08:40:38: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:38: Line 392: ByteString.pad arguments
1: Double: 37

ByteString: 8482000010CC8106803D4DF037800000

2025/07/16 08:40:38: Line 393: var bsMac = crypto.sign(c_kSkuMac, nMech, bsCmd, bsIcv); // MAC cmd
2025/07/16 08:40:38: Line 393: Crypto.sign arguments
1: Key

2: Double: 9

3: ByteString: 8482000010CC8106803D4DF037800000

4: ByteString: 0000000000000000

ByteString: A185D0833C6E0CB4

2025/07/16 08:40:38: Line 402: GPSystem.trace(sMsg); // Log
2025/07/16 08:40:38: Line 402: GPSystem.trace arguments
1: String: External Auth

2025/07/16 08:40:38: GPSystem.trace
External Auth

Boolean: true

2025/07/16 08:40:38: Line 403: var bsRtn = card.sendApdu(nCla,nIns,nP1,nP2,bsDat.concat(bsMac));
2025/07/16 08:40:38: Line 403: ByteString.concat arguments
1: ByteString: A185D0833C6E0CB4

ByteString: CC8106803D4DF037A185D0833C6E0CB4

2025/07/16 08:40:38: Line 403: var bsRtn = card.sendApdu(nCla,nIns,nP1,nP2,bsDat.concat(bsMac));
2025/07/16 08:40:38: Line 403: Card.sendApdu arguments
1: Int: 132

2: Int: 130

3: Int: 0

4: Int: 0

5: ByteString: CC8106803D4DF037A185D0833C6E0CB4

2025/07/16 08:40:38: DCC9kServer IC Commands
0000: 84 82 00 00 10 CC 81 06-80 3D 4D F0 37 A1 85 D0              =M 7   
0010: 83 3C 6E 0C B4 21 53 57-02 2B 2A                     <n  !SW +*     

2025/07/16 08:40:38: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:38: Line 407: c_bsChainMac = crypto.encrypt(c_kSkuMacT3s, Crypto.DES_CBC, bsMac); // ICV encryption for C-MAC session
2025/07/16 08:40:38: Line 407: Crypto.encrypt arguments
1: Key: 018000000010CE7793557973F0F691333B000EA8B6D5000001400000001D00000000000000040100000004000001000000000401000000130000000100000001010000000002000000010101000001030000000101010000010600000001010100000107000000010101000001080000000101010000010A0000000101000000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C00000001010000000163000000010100000001650000000101000000016400000001010000000161000000040100000008800001020000001001323032353037313630353339303130308000010300000000000000010200000000000000011000000000000000011100000000008000012B00000001010080000129000000010101000001620000000101018000012800000001010000000003000000000000000170000000010101000000000000000000000856E9A580B8C17BA600000018502D7382C84AB7FE2407F2BDC2A1E1162B7ADB33A7E3BF01

2: Double: 2

3: ByteString: A185D0833C6E0CB4

ByteString: 550C8971334CEB4A

2025/07/16 08:40:38: Line 411: new ByteString("!"+"!-"+CALL+"("+bsRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:38: Line 411: ByteString.toString arguments

String: 

2025/07/16 08:40:38: Line 411: new ByteString("!"+"!-"+CALL+"("+bsRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:38: Line 411: Function.ByteString arguments
1: String: !!-000863.c_sendApduS2()

2: Double: 1

ByteString: 21212D3030303836332E635F73656E644170647553322829

2025/07/16 08:40:38: Line 412: UBJSGlobalClass.c_sendApduS2 result
ByteString: 

2025/07/16 08:40:38: Line 343: new ByteString("!"+"!-"+CALL+"("+bsIuRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:38: Line 343: ByteString.toString arguments

String: FFFFFFFFFBF304EA7544010200030191A376696AC615C9075A274A3C

2025/07/16 08:40:38: Line 343: new ByteString("!"+"!-"+CALL+"("+bsIuRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:38: Line 343: Function.ByteString arguments
1: String: !!-000863.c_Auth(FFFFFFFFFBF304EA7544010200030191A376696AC615C9075A274A3C)

2: Double: 1

ByteString: 21212D3030303836332E635F4175746828464646464646464646424633303445413735343430313032303030333031393141333736363936414336313543393037354132373441334329

2025/07/16 08:40:38: Line 344: UBJSGlobalClass.c_Auth result
ByteString: FFFFFFFFFBF304EA7544010200030191A376696AC615C9075A274A3C

2025/07/16 08:40:38: Line 49: function t_Perso()
2025/07/16 08:40:38: Line 49: UBJSGlobalClass.t_Perso arguments

2025/07/16 08:40:38: Line 56: new ByteString("!"+"!+"+CALL+"()",ASCII); // Log begin func
2025/07/16 08:40:38: Line 56: Function.ByteString arguments
1: String: !!+000863.t_Perso()

2: Double: 1

ByteString: 21212B3030303836332E745F506572736F2829

2025/07/16 08:40:38: Line 68: var bsAfl = new ByteString();
2025/07/16 08:40:38: Line 68: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:38: Line 72: var bsAfl = art.getVariableValue("xCt_AflDda");
2025/07/16 08:40:38: Line 72: Art.getVariableValue arguments
1: String: xCt_AflDda

ByteString: 080202001001040018010201

2025/07/16 08:40:38: Line 77: var bsAfl = new TLV(0x94, bsAfl, TLV.EMV).getTLV();
2025/07/16 08:40:38: Line 77: Function.TLV arguments
1: Int: 148

2: ByteString: 080202001001040018010201

3: Double: 2

TLV: 940C080202001001040018010201

2025/07/16 08:40:38: Line 77: var bsAfl = new TLV(0x94, bsAfl, TLV.EMV).getTLV();
2025/07/16 08:40:38: Line 77: TLV.getTLV arguments

ByteString: 940C080202001001040018010201

2025/07/16 08:40:38: Line 81: var bsDat =        art.getVariableValue("tCtP3i_82_Aip")
2025/07/16 08:40:38: Line 81: Art.getVariableValue arguments
1: String: tCtP3i_82_Aip

ByteString: 82023800

2025/07/16 08:40:38: Line 82: .concat(bsAfl);
2025/07/16 08:40:38: Line 82: ByteString.concat arguments
1: ByteString: 940C080202001001040018010201

ByteString: 82023800940C080202001001040018010201

2025/07/16 08:40:38: Line 86: var bsDgi = new TLV(0x9104, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:38: Line 86: Function.TLV arguments
1: Int: 37124

2: ByteString: 82023800940C080202001001040018010201

3: Double: 1

TLV: 91041282023800940C080202001001040018010201

2025/07/16 08:40:38: Line 86: var bsDgi = new TLV(0x9104, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:38: Line 86: TLV.getTLV arguments

ByteString: 91041282023800940C080202001001040018010201

2025/07/16 08:40:38: Line 87: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //9104 (GPO VSDC)
2025/07/16 08:40:38: Line 87: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 0

5: ByteString: 91041282023800940C080202001001040018010201

2025/07/16 08:40:38: DCC9kServer IC Commands
0000: 80 E2 00 00 15 91 04 12-82 02 38 00 94 0C 08 02               8     
0010: 02 00 10 01 04 00 18 01-02 01 21 53 57 02 2B 2A               !SW +*

2025/07/16 08:40:38: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:38: Line 93: var bsOdaTl = new ByteString();
2025/07/16 08:40:38: Line 93: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:38: Line 94: if (art.getVariableValue("xCtCki_1F70_IcPk").length > 0)
2025/07/16 08:40:38: Line 94: Art.getVariableValue arguments
1: String: xCtCki_1F70_IcPk

ByteString: 8B050AC36A80B0BE484D4A8CC83FD08373C02FFF2DA90E35C25E0027E64AADF550B02F4766234236A374F7811732838B4C6D8CE3C74B3008A434E6381BA194F8CC9BB183A2234895D99D6B701D82B3DC5B56F515BDA83F930F66A1A97FC4652DF8D19E7833744A287505CA280FE56F1D2B34E38CF2B70F519B79139DC92AF51BA2467B22BDF9EB7D194809CD140F31B06C67F4F67A2DD63DCCFDF43C73AACF4C59CE55B9FA21C976F5E0E8C3B487D862E58422040E09B4D7632C6B531BF06B9DAD46FE89A351E14BAE2D1ED1B1E322AB8F076C38499C83716293BD0EC0EE5F1765C4F01DABC137D9227D4D21C53EC436BAB946C55FEC4F431FEEDECA57AB7C013F01AE2AE7B60F7653F1FEB4221BB1628CBA402E3CB157CC80CC5D183298CD021F4A7E315930595F4489D71791E3E08D333F33AE5A6280FB5255D534A5AE52E9ED62A6930EF8DA835A48E4786B6B355404630584AA6C6DFF9B77AEDE8E7EE8E1E163B7FFEAD0BC9B8A02581741ACBCA4D51B79A4AD52ADFFDADEEEF9C84F995CF56F735B120AE9EB91DAF2C63C0CA13A4C1E2110A3D261D519A96609879EFABA9523E0EC52425417E2C942A3D6A7E58C68661ED1E0800190F6DF77A3B16E17F5073921B679C690B0382B7EB36D7AD0E6A4B2ABAAD7B3FF2C818293BBDF465512B5B007FEEFC53F8B

2025/07/16 08:40:38: Line 96: var bsPk = art.getVariableValue("xCtP3i_1F70_IcPk");
2025/07/16 08:40:38: Line 96: Art.getVariableValue arguments
1: String: xCtP3i_1F70_IcPk

ByteString: 8B050AC36A80B0BE484D4A8CC83FD08373C02FFF2DA90E35C25E0027E64AADF550B02F4766234236A374F7811732838B4C6D8CE3C74B3008A434E6381BA194F8CC9BB183A2234895D99D6B701D82B3DC5B56F515BDA83F930F66A1A97FC4652DF8D19E7833744A287505CA280FE56F1D2B34E38CF2B70F519B79139DC92AF51BA2467B22BDF9EB7D194809CD140F31B06C67F4F67A2DD63DCCFDF43C73AACF4C59CE55B9FA21C976F5E0E8C3B487D862E58422040E09B4D7632C6B531BF06B9DAD46FE89A351E14BAE2D1ED1B1E322AB8F076C38499C83716293BD0EC0EE5F1765C4F01DABC137D9227D4D21C53EC436BAB946C55FEC4F431FEEDECA57AB7C013F01AE2AE7B60F7653F1FEB4221BB1628CBA402E3CB157CC80CC5D183298CD021F4A7E315930595F4489D71791E3E08D333F33AE5A6280FB5255D534A5AE52E9ED62A6930EF8DA835A48E4786B6B355404630584AA6C6DFF9B77AEDE8E7EE8E1E163B7FFEAD0BC9B8A02581741ACBCA4D51B79A4AD52ADFFDADEEEF9C84F995CF56F735B120AE9EB91DAF2C63C0CA13A4C1E2110A3D261D519A96609879EFABA9523E0EC52425417E2C942A3D6A7E58C68661ED1E0800190F6DF77A3B16E17F5073921B679C690B0382B7EB36D7AD0E6A4B2ABAAD7B3FF2C818293BBDF465512B5B007FEEFC53F8B

2025/07/16 08:40:38: Line 97: var kPk = new KeyPair(bsPk, c_bsKek);
2025/07/16 08:40:38: Line 97: Function.KeyPair arguments
1: ByteString: 8B050AC36A80B0BE484D4A8CC83FD08373C02FFF2DA90E35C25E0027E64AADF550B02F4766234236A374F7811732838B4C6D8CE3C74B3008A434E6381BA194F8CC9BB183A2234895D99D6B701D82B3DC5B56F515BDA83F930F66A1A97FC4652DF8D19E7833744A287505CA280FE56F1D2B34E38CF2B70F519B79139DC92AF51BA2467B22BDF9EB7D194809CD140F31B06C67F4F67A2DD63DCCFDF43C73AACF4C59CE55B9FA21C976F5E0E8C3B487D862E58422040E09B4D7632C6B531BF06B9DAD46FE89A351E14BAE2D1ED1B1E322AB8F076C38499C83716293BD0EC0EE5F1765C4F01DABC137D9227D4D21C53EC436BAB946C55FEC4F431FEEDECA57AB7C013F01AE2AE7B60F7653F1FEB4221BB1628CBA402E3CB157CC80CC5D183298CD021F4A7E315930595F4489D71791E3E08D333F33AE5A6280FB5255D534A5AE52E9ED62A6930EF8DA835A48E4786B6B355404630584AA6C6DFF9B77AEDE8E7EE8E1E163B7FFEAD0BC9B8A02581741ACBCA4D51B79A4AD52ADFFDADEEEF9C84F995CF56F735B120AE9EB91DAF2C63C0CA13A4C1E2110A3D261D519A96609879EFABA9523E0EC52425417E2C942A3D6A7E58C68661ED1E0800190F6DF77A3B16E17F5073921B679C690B0382B7EB36D7AD0E6A4B2ABAAD7B3FF2C818293BBDF465512B5B007FEEFC53F8B

2: ByteString

KeyPair: CCBB93799F14423934C989E09107C65161302C03072D0EC2FAB1EEACC831DBA5F3B7E0B4BA27E728214FEA096C1E5FBFA744CBB3C1BE78641DC8BD6A19EF397D2C5926079B6CEDA13CA1422E60A691B874BF2232CB18B4DD06D5F03D92B85D95

2025/07/16 08:40:38: Line 98: if (kPk.getSize() <= 1024)
2025/07/16 08:40:38: Line 98: KeyPair.getSize arguments

Int: 768

2025/07/16 08:40:38: Line 101: var bsBerLen = t_LenToBer(kPk.getSize()/8);
2025/07/16 08:40:38: Line 101: KeyPair.getSize arguments

Int: 768

2025/07/16 08:40:38: Line 923: function t_LenToBer(nLen)
2025/07/16 08:40:38: Line 923: UBJSGlobalClass.t_LenToBer arguments
1: Int: 96

2025/07/16 08:40:38: Line 930: new ByteString("!"+"!+"+CALL+"("+nLen.toString()+")",ASCII); // Log begin func
2025/07/16 08:40:38: Line 930: Number.toString arguments

String: 96

2025/07/16 08:40:38: Line 930: new ByteString("!"+"!+"+CALL+"("+nLen.toString()+")",ASCII); // Log begin func
2025/07/16 08:40:38: Line 930: Function.ByteString arguments
1: String: !!+000863.t_LenToBer(96)

2: Double: 1

ByteString: 21212B3030303836332E745F4C656E546F42657228393629

2025/07/16 08:40:38: Line 939: var sLen = nLen.toString(16).toUpperCase();
2025/07/16 08:40:38: Line 939: Number.toString arguments
1: Int: 16

String: 60

2025/07/16 08:40:38: Line 939: var sLen = nLen.toString(16).toUpperCase();
2025/07/16 08:40:38: Line 939: String.toUpperCase arguments

String: 60

2025/07/16 08:40:38: Line 941: var bsOut = new ByteString(sLenFmt,HEX);
2025/07/16 08:40:38: Line 941: Function.ByteString arguments
1: String: 60

2: Double: 4

ByteString: 60

2025/07/16 08:40:38: Line 953: new ByteString("!"+"!-"+CALL+"("+bsOut.toString()+")",ASCII); // Log end func
2025/07/16 08:40:38: Line 953: ByteString.toString arguments

String: 60

2025/07/16 08:40:38: Line 953: new ByteString("!"+"!-"+CALL+"("+bsOut.toString()+")",ASCII); // Log end func
2025/07/16 08:40:38: Line 953: Function.ByteString arguments
1: String: !!-000863.t_LenToBer(60)

2: Double: 1

ByteString: 21212D3030303836332E745F4C656E546F42657228363029

2025/07/16 08:40:38: Line 954: UBJSGlobalClass.t_LenToBer result
ByteString: 60

2025/07/16 08:40:38: Line 102: var bsOdaTl = new ByteString("9F4B"+bsBerLen,HEX);
2025/07/16 08:40:38: Line 102: ByteString.valueOf arguments

ByteString: 60

2025/07/16 08:40:38: Line 102: var bsOdaTl = new ByteString("9F4B"+bsBerLen,HEX);
2025/07/16 08:40:38: Line 102: ByteString.toString arguments

String: 60

2025/07/16 08:40:38: Line 102: var bsOdaTl = new ByteString("9F4B"+bsBerLen,HEX);
2025/07/16 08:40:38: Line 102: Function.ByteString arguments
1: String: 9F4B60

2: Double: 4

ByteString: 9F4B60

2025/07/16 08:40:38: Line 191: var bsAfl = art.getVariableValue("xCl_AflOdwo");
2025/07/16 08:40:38: Line 191: Art.getVariableValue arguments
1: String: xCl_AflOdwo

ByteString: 20010100

2025/07/16 08:40:38: Line 194: var bsAfl = new TLV(0x94, bsAfl, TLV.EMV).getTLV();
2025/07/16 08:40:38: Line 194: Function.TLV arguments
1: Int: 148

2: ByteString: 20010100

3: Double: 2

TLV: 940420010100

2025/07/16 08:40:38: Line 194: var bsAfl = new TLV(0x94, bsAfl, TLV.EMV).getTLV();
2025/07/16 08:40:38: Line 194: TLV.getTLV arguments

ByteString: 940420010100

2025/07/16 08:40:38: Line 198: var bsAosa = art.getVariableValue("xCtP3i_9F5D_Aosa");
2025/07/16 08:40:38: Line 198: Art.getVariableValue arguments
1: String: xCtP3i_9F5D_Aosa

ByteString: 

2025/07/16 08:40:38: Line 199: var bsCap = art.getVariableValue("xCtP3i_9F68_Cap");
2025/07/16 08:40:38: Line 199: Art.getVariableValue arguments
1: String: xCtP3i_9F68_Cap

ByteString: 0080D000

2025/07/16 08:40:38: Line 205: var bsAosaTl = new ByteString();
2025/07/16 08:40:38: Line 205: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:38: Line 209: var bsDat =        art.getVariableValue("tClP3i_82_AipOdwo")
2025/07/16 08:40:38: Line 209: Art.getVariableValue arguments
1: String: tClP3i_82_AipOdwo

ByteString: 82020020

2025/07/16 08:40:38: Line 210: .concat(bsAfl)
2025/07/16 08:40:38: Line 210: ByteString.concat arguments
1: ByteString: 940420010100

ByteString: 82020020940420010100

2025/07/16 08:40:38: Line 211: .concat(art.getVariableValue("tClP3i_57_Tk2e"))
2025/07/16 08:40:38: Line 211: Art.getVariableValue arguments
1: String: tClP3i_57_Tk2e

ByteString: 57104263710300198106D300722612583831

2025/07/16 08:40:38: Line 211: .concat(art.getVariableValue("tClP3i_57_Tk2e"))
2025/07/16 08:40:38: Line 211: ByteString.concat arguments
1: ByteString: 57104263710300198106D300722612583831

ByteString: 8202002094042001010057104263710300198106D300722612583831

2025/07/16 08:40:38: Line 212: .concat(art.getVariableValue("tCtP3i_5F34_Psn"))
2025/07/16 08:40:38: Line 212: Art.getVariableValue arguments
1: String: tCtP3i_5F34_Psn

ByteString: 5F340101

2025/07/16 08:40:38: Line 212: .concat(art.getVariableValue("tCtP3i_5F34_Psn"))
2025/07/16 08:40:38: Line 212: ByteString.concat arguments
1: ByteString: 5F340101

ByteString: 8202002094042001010057104263710300198106D3007226125838315F340101

2025/07/16 08:40:38: Line 213: .concat(art.getVariableValue("tClP3i_9F10_Iad"))
2025/07/16 08:40:38: Line 213: Art.getVariableValue arguments
1: String: tClP3i_9F10_Iad

ByteString: 9F100706011203000000

2025/07/16 08:40:38: Line 213: .concat(art.getVariableValue("tClP3i_9F10_Iad"))
2025/07/16 08:40:38: Line 213: ByteString.concat arguments
1: ByteString: 9F100706011203000000

ByteString: 8202002094042001010057104263710300198106D3007226125838315F3401019F100706011203000000

2025/07/16 08:40:38: Line 214: .concat(art.getVariableValue("tClP3i_5F20_Hld"))
2025/07/16 08:40:38: Line 214: Art.getVariableValue arguments
1: String: tClP3i_5F20_Hld

ByteString: 5F2002202F

2025/07/16 08:40:38: Line 214: .concat(art.getVariableValue("tClP3i_5F20_Hld"))
2025/07/16 08:40:38: Line 214: ByteString.concat arguments
1: ByteString: 5F2002202F

ByteString: 8202002094042001010057104263710300198106D3007226125838315F3401019F1007060112030000005F2002202F

2025/07/16 08:40:38: Line 215: .concat(new ByteString("9F2608 9F2701 9F3602",HEX))
2025/07/16 08:40:38: Line 215: Function.ByteString arguments
1: String: 9F2608 9F2701 9F3602

2: Double: 4

ByteString: 9F26089F27019F3602

2025/07/16 08:40:38: Line 215: .concat(new ByteString("9F2608 9F2701 9F3602",HEX))
2025/07/16 08:40:38: Line 215: ByteString.concat arguments
1: ByteString: 9F26089F27019F3602

ByteString: 8202002094042001010057104263710300198106D3007226125838315F3401019F1007060112030000005F2002202F9F26089F27019F3602

2025/07/16 08:40:38: Line 216: .concat(art.getVariableValue("tCtP3i_9F6C_Ctq"))
2025/07/16 08:40:38: Line 216: Art.getVariableValue arguments
1: String: tCtP3i_9F6C_Ctq

ByteString: 9F6C020000

2025/07/16 08:40:38: Line 216: .concat(art.getVariableValue("tCtP3i_9F6C_Ctq"))
2025/07/16 08:40:38: Line 216: ByteString.concat arguments
1: ByteString: 9F6C020000

ByteString: 8202002094042001010057104263710300198106D3007226125838315F3401019F1007060112030000005F2002202F9F26089F27019F36029F6C020000

2025/07/16 08:40:38: Line 217: .concat(art.getVariableValue("tCtP3i_9F6E_Ffi"))
2025/07/16 08:40:38: Line 217: Art.getVariableValue arguments
1: String: tCtP3i_9F6E_Ffi

ByteString: 9F6E0420700000

2025/07/16 08:40:38: Line 217: .concat(art.getVariableValue("tCtP3i_9F6E_Ffi"))
2025/07/16 08:40:38: Line 217: ByteString.concat arguments
1: ByteString: 9F6E0420700000

ByteString: 8202002094042001010057104263710300198106D3007226125838315F3401019F1007060112030000005F2002202F9F26089F27019F36029F6C0200009F6E0420700000

2025/07/16 08:40:38: Line 218: .concat(art.getVariableValue("tCtP3i_9F7C_Ced"))
2025/07/16 08:40:38: Line 218: Art.getVariableValue arguments
1: String: tCtP3i_9F7C_Ced

ByteString: 

2025/07/16 08:40:38: Line 218: .concat(art.getVariableValue("tCtP3i_9F7C_Ced"))
2025/07/16 08:40:38: Line 218: ByteString.concat arguments
1: ByteString: 

ByteString: 8202002094042001010057104263710300198106D3007226125838315F3401019F1007060112030000005F2002202F9F26089F27019F36029F6C0200009F6E0420700000

2025/07/16 08:40:38: Line 219: .concat(bsAosaTl); // 9F5D is last [PERSO_SPEC] pg 65
2025/07/16 08:40:38: Line 219: ByteString.concat arguments
1: ByteString: 

ByteString: 8202002094042001010057104263710300198106D3007226125838315F3401019F1007060112030000005F2002202F9F26089F27019F36029F6C0200009F6E0420700000

2025/07/16 08:40:38: Line 223: var bsDgi = new TLV(0x9115, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:38: Line 223: Function.TLV arguments
1: Int: 37141

2: ByteString: 8202002094042001010057104263710300198106D3007226125838315F3401019F1007060112030000005F2002202F9F26089F27019F36029F6C0200009F6E0420700000

3: Double: 1

TLV: 9115448202002094042001010057104263710300198106D3007226125838315F3401019F1007060112030000005F2002202F9F26089F27019F36029F6C0200009F6E0420700000

2025/07/16 08:40:38: Line 223: var bsDgi = new TLV(0x9115, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:38: Line 223: TLV.getTLV arguments

ByteString: 9115448202002094042001010057104263710300198106D3007226125838315F3401019F1007060112030000005F2002202F9F26089F27019F36029F6C0200009F6E0420700000

2025/07/16 08:40:38: Line 224: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //9115 (GPO qVSDC online-decline w/o ODA)
2025/07/16 08:40:38: Line 224: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 1

5: ByteString: 9115448202002094042001010057104263710300198106D3007226125838315F3401019F1007060112030000005F2002202F9F26089F27019F36029F6C0200009F6E0420700000

2025/07/16 08:40:38: DCC9kServer IC Commands
0000: 80 E2 00 01 47 91 15 44-82 02 00 20 94 04 20 01         G  D        
0010: 01 00 57 10 42 63 71 03-00 19 81 06 D3 00 72 26       W Bcq       r&
0020: 12 58 38 31 5F 34 01 01-9F 10 07 06 01 12 03 00      X81_4          
0030: 00 00 5F 20 02 20 2F 9F-26 08 9F 27 01 9F 36 02       _   / &  '  6 
0040: 9F 6C 02 00 00 9F 6E 04-20 70 00 00 21 53 57 02      l    n  p  !SW 
0050: 2B 2A                                               +*              

2025/07/16 08:40:38: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:38: Line 233: var bsAfl = new ByteString();
2025/07/16 08:40:38: Line 233: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:38: Line 237: var bsAfl = art.getVariableValue("xCl_AflDda");
2025/07/16 08:40:38: Line 237: Art.getVariableValue arguments
1: String: xCl_AflDda

ByteString: 100101002001010020020401

2025/07/16 08:40:38: Line 240: var bsAfl = new TLV(0x94, bsAfl, TLV.EMV).getTLV();
2025/07/16 08:40:38: Line 240: Function.TLV arguments
1: Int: 148

2: ByteString: 100101002001010020020401

3: Double: 2

TLV: 940C100101002001010020020401

2025/07/16 08:40:38: Line 240: var bsAfl = new TLV(0x94, bsAfl, TLV.EMV).getTLV();
2025/07/16 08:40:38: Line 240: TLV.getTLV arguments

ByteString: 940C100101002001010020020401

2025/07/16 08:40:38: Line 244: var bsAosa = art.getVariableValue("xCtP3i_9F5D_Aosa");
2025/07/16 08:40:38: Line 244: Art.getVariableValue arguments
1: String: xCtP3i_9F5D_Aosa

ByteString: 

2025/07/16 08:40:38: Line 245: var bsCap = art.getVariableValue("xCtP3i_9F68_Cap");
2025/07/16 08:40:38: Line 245: Art.getVariableValue arguments
1: String: xCtP3i_9F68_Cap

ByteString: 0080D000

2025/07/16 08:40:38: Line 251: var bsAosaTl = new ByteString();
2025/07/16 08:40:38: Line 251: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:38: Line 255: var bsDat =        art.getVariableValue("tClP3i_82_Aip")
2025/07/16 08:40:38: Line 255: Art.getVariableValue arguments
1: String: tClP3i_82_Aip

ByteString: 82022020

2025/07/16 08:40:38: Line 256: .concat(bsAfl)
2025/07/16 08:40:38: Line 256: ByteString.concat arguments
1: ByteString: 940C100101002001010020020401

ByteString: 82022020940C100101002001010020020401

2025/07/16 08:40:38: Line 257: .concat(art.getVariableValue("tCtP3i_5F34_Psn"))
2025/07/16 08:40:38: Line 257: Art.getVariableValue arguments
1: String: tCtP3i_5F34_Psn

ByteString: 5F340101

2025/07/16 08:40:38: Line 257: .concat(art.getVariableValue("tCtP3i_5F34_Psn"))
2025/07/16 08:40:38: Line 257: ByteString.concat arguments
1: ByteString: 5F340101

ByteString: 82022020940C1001010020010100200204015F340101

2025/07/16 08:40:38: Line 258: .concat(art.getVariableValue("tClP3i_57_Tk2e"))
2025/07/16 08:40:38: Line 258: Art.getVariableValue arguments
1: String: tClP3i_57_Tk2e

ByteString: 57104263710300198106D300722612583831

2025/07/16 08:40:38: Line 258: .concat(art.getVariableValue("tClP3i_57_Tk2e"))
2025/07/16 08:40:38: Line 258: ByteString.concat arguments
1: ByteString: 57104263710300198106D300722612583831

ByteString: 82022020940C1001010020010100200204015F34010157104263710300198106D300722612583831

2025/07/16 08:40:38: Line 259: .concat(art.getVariableValue("tClP3i_9F10_Iad"))
2025/07/16 08:40:38: Line 259: Art.getVariableValue arguments
1: String: tClP3i_9F10_Iad

ByteString: 9F100706011203000000

2025/07/16 08:40:38: Line 259: .concat(art.getVariableValue("tClP3i_9F10_Iad"))
2025/07/16 08:40:38: Line 259: ByteString.concat arguments
1: ByteString: 9F100706011203000000

ByteString: 82022020940C1001010020010100200204015F34010157104263710300198106D3007226125838319F100706011203000000

2025/07/16 08:40:38: Line 260: .concat(art.getVariableValue("tClP3i_5F20_Hld"))
2025/07/16 08:40:38: Line 260: Art.getVariableValue arguments
1: String: tClP3i_5F20_Hld

ByteString: 5F2002202F

2025/07/16 08:40:38: Line 260: .concat(art.getVariableValue("tClP3i_5F20_Hld"))
2025/07/16 08:40:38: Line 260: ByteString.concat arguments
1: ByteString: 5F2002202F

ByteString: 82022020940C1001010020010100200204015F34010157104263710300198106D3007226125838319F1007060112030000005F2002202F

2025/07/16 08:40:38: Line 261: .concat(new ByteString("9F2608 9F2701 9F3602"+bsOdaTl,HEX))
2025/07/16 08:40:38: Line 261: ByteString.valueOf arguments

ByteString: 9F4B60

2025/07/16 08:40:38: Line 261: .concat(new ByteString("9F2608 9F2701 9F3602"+bsOdaTl,HEX))
2025/07/16 08:40:38: Line 261: ByteString.toString arguments

String: 9F4B60

2025/07/16 08:40:38: Line 261: .concat(new ByteString("9F2608 9F2701 9F3602"+bsOdaTl,HEX))
2025/07/16 08:40:38: Line 261: Function.ByteString arguments
1: String: 9F2608 9F2701 9F36029F4B60

2: Double: 4

ByteString: 9F26089F27019F36029F4B60

2025/07/16 08:40:38: Line 261: .concat(new ByteString("9F2608 9F2701 9F3602"+bsOdaTl,HEX))
2025/07/16 08:40:38: Line 261: ByteString.concat arguments
1: ByteString: 9F26089F27019F36029F4B60

ByteString: 82022020940C1001010020010100200204015F34010157104263710300198106D3007226125838319F1007060112030000005F2002202F9F26089F27019F36029F4B60

2025/07/16 08:40:38: Line 262: .concat(art.getVariableValue("tCtP3i_9F6C_Ctq"))
2025/07/16 08:40:38: Line 262: Art.getVariableValue arguments
1: String: tCtP3i_9F6C_Ctq

ByteString: 9F6C020000

2025/07/16 08:40:38: Line 262: .concat(art.getVariableValue("tCtP3i_9F6C_Ctq"))
2025/07/16 08:40:38: Line 262: ByteString.concat arguments
1: ByteString: 9F6C020000

ByteString: 82022020940C1001010020010100200204015F34010157104263710300198106D3007226125838319F1007060112030000005F2002202F9F26089F27019F36029F4B609F6C020000

2025/07/16 08:40:38: Line 263: .concat(art.getVariableValue("tCtP3i_9F6E_Ffi"))
2025/07/16 08:40:38: Line 263: Art.getVariableValue arguments
1: String: tCtP3i_9F6E_Ffi

ByteString: 9F6E0420700000

2025/07/16 08:40:38: Line 263: .concat(art.getVariableValue("tCtP3i_9F6E_Ffi"))
2025/07/16 08:40:38: Line 263: ByteString.concat arguments
1: ByteString: 9F6E0420700000

ByteString: 82022020940C1001010020010100200204015F34010157104263710300198106D3007226125838319F1007060112030000005F2002202F9F26089F27019F36029F4B609F6C0200009F6E0420700000

2025/07/16 08:40:38: Line 264: .concat(art.getVariableValue("tCtP3i_9F7C_Ced"))
2025/07/16 08:40:38: Line 264: Art.getVariableValue arguments
1: String: tCtP3i_9F7C_Ced

ByteString: 

2025/07/16 08:40:38: Line 264: .concat(art.getVariableValue("tCtP3i_9F7C_Ced"))
2025/07/16 08:40:38: Line 264: ByteString.concat arguments
1: ByteString: 

ByteString: 82022020940C1001010020010100200204015F34010157104263710300198106D3007226125838319F1007060112030000005F2002202F9F26089F27019F36029F4B609F6C0200009F6E0420700000

2025/07/16 08:40:38: Line 265: .concat(bsAosaTl); // 9F5D is last [PERSO_SPEC] pg 65
2025/07/16 08:40:38: Line 265: ByteString.concat arguments
1: ByteString: 

ByteString: 82022020940C1001010020010100200204015F34010157104263710300198106D3007226125838319F1007060112030000005F2002202F9F26089F27019F36029F4B609F6C0200009F6E0420700000

2025/07/16 08:40:38: Line 269: var bsDgi = new TLV(0x9116, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:38: Line 269: Function.TLV arguments
1: Int: 37142

2: ByteString: 82022020940C1001010020010100200204015F34010157104263710300198106D3007226125838319F1007060112030000005F2002202F9F26089F27019F36029F4B609F6C0200009F6E0420700000

3: Double: 1

TLV: 91164F82022020940C1001010020010100200204015F34010157104263710300198106D3007226125838319F1007060112030000005F2002202F9F26089F27019F36029F4B609F6C0200009F6E0420700000

2025/07/16 08:40:38: Line 269: var bsDgi = new TLV(0x9116, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:38: Line 269: TLV.getTLV arguments

ByteString: 91164F82022020940C1001010020010100200204015F34010157104263710300198106D3007226125838319F1007060112030000005F2002202F9F26089F27019F36029F4B609F6C0200009F6E0420700000

2025/07/16 08:40:38: Line 270: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //9116 (GPO qVSDC offline w/ ODA)
2025/07/16 08:40:38: Line 270: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 2

5: ByteString: 91164F82022020940C1001010020010100200204015F34010157104263710300198106D3007226125838319F1007060112030000005F2002202F9F26089F27019F36029F4B609F6C0200009F6E0420700000

2025/07/16 08:40:38: DCC9kServer IC Commands
0000: 80 E2 00 02 52 91 16 4F-82 02 20 20 94 0C 10 01         R  O        
0010: 01 00 20 01 01 00 20 02-04 01 5F 34 01 01 57 10               _4  W 
0020: 42 63 71 03 00 19 81 06-D3 00 72 26 12 58 38 31     Bcq       r& X81
0030: 9F 10 07 06 01 12 03 00-00 00 5F 20 02 20 2F 9F               _   / 
0040: 26 08 9F 27 01 9F 36 02-9F 4B 60 9F 6C 02 00 00     &  '  6  K` l   
0050: 9F 6E 04 20 70 00 00 21-53 57 02 2B 2A               n  p  !SW +*   

2025/07/16 08:40:39: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:39: Line 279: var bsAfl = new ByteString();
2025/07/16 08:40:39: Line 279: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:39: Line 283: var bsAfl = art.getVariableValue("xCl_AflDda");
2025/07/16 08:40:39: Line 283: Art.getVariableValue arguments
1: String: xCl_AflDda

ByteString: 100101002001010020020401

2025/07/16 08:40:39: Line 286: var bsAfl = new TLV(0x94, bsAfl, TLV.EMV).getTLV();
2025/07/16 08:40:39: Line 286: Function.TLV arguments
1: Int: 148

2: ByteString: 100101002001010020020401

3: Double: 2

TLV: 940C100101002001010020020401

2025/07/16 08:40:39: Line 286: var bsAfl = new TLV(0x94, bsAfl, TLV.EMV).getTLV();
2025/07/16 08:40:39: Line 286: TLV.getTLV arguments

ByteString: 940C100101002001010020020401

2025/07/16 08:40:39: Line 290: var bsAosa = art.getVariableValue("xCtP3i_9F5D_Aosa");
2025/07/16 08:40:39: Line 290: Art.getVariableValue arguments
1: String: xCtP3i_9F5D_Aosa

ByteString: 

2025/07/16 08:40:39: Line 291: var bsCap = art.getVariableValue("xCtP3i_9F68_Cap");
2025/07/16 08:40:39: Line 291: Art.getVariableValue arguments
1: String: xCtP3i_9F68_Cap

ByteString: 0080D000

2025/07/16 08:40:39: Line 297: var bsAosaTl = new ByteString();
2025/07/16 08:40:39: Line 297: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:39: Line 301: var bsDat =        art.getVariableValue("tClP3i_82_Aip")
2025/07/16 08:40:39: Line 301: Art.getVariableValue arguments
1: String: tClP3i_82_Aip

ByteString: 82022020

2025/07/16 08:40:39: Line 302: .concat(bsAfl)
2025/07/16 08:40:39: Line 302: ByteString.concat arguments
1: ByteString: 940C100101002001010020020401

ByteString: 82022020940C100101002001010020020401

2025/07/16 08:40:39: Line 303: .concat(art.getVariableValue("tCtP3i_5F34_Psn"))
2025/07/16 08:40:39: Line 303: Art.getVariableValue arguments
1: String: tCtP3i_5F34_Psn

ByteString: 5F340101

2025/07/16 08:40:39: Line 303: .concat(art.getVariableValue("tCtP3i_5F34_Psn"))
2025/07/16 08:40:39: Line 303: ByteString.concat arguments
1: ByteString: 5F340101

ByteString: 82022020940C1001010020010100200204015F340101

2025/07/16 08:40:39: Line 304: .concat(art.getVariableValue("tClP3i_9F10_Iad"))
2025/07/16 08:40:39: Line 304: Art.getVariableValue arguments
1: String: tClP3i_9F10_Iad

ByteString: 9F100706011203000000

2025/07/16 08:40:39: Line 304: .concat(art.getVariableValue("tClP3i_9F10_Iad"))
2025/07/16 08:40:39: Line 304: ByteString.concat arguments
1: ByteString: 9F100706011203000000

ByteString: 82022020940C1001010020010100200204015F3401019F100706011203000000

2025/07/16 08:40:39: Line 305: .concat(art.getVariableValue("tClP3i_57_Tk2e"))
2025/07/16 08:40:39: Line 305: Art.getVariableValue arguments
1: String: tClP3i_57_Tk2e

ByteString: 57104263710300198106D300722612583831

2025/07/16 08:40:39: Line 305: .concat(art.getVariableValue("tClP3i_57_Tk2e"))
2025/07/16 08:40:39: Line 305: ByteString.concat arguments
1: ByteString: 57104263710300198106D300722612583831

ByteString: 82022020940C1001010020010100200204015F3401019F10070601120300000057104263710300198106D300722612583831

2025/07/16 08:40:39: Line 306: .concat(art.getVariableValue("tClP3i_5F20_Hld"))
2025/07/16 08:40:39: Line 306: Art.getVariableValue arguments
1: String: tClP3i_5F20_Hld

ByteString: 5F2002202F

2025/07/16 08:40:39: Line 306: .concat(art.getVariableValue("tClP3i_5F20_Hld"))
2025/07/16 08:40:39: Line 306: ByteString.concat arguments
1: ByteString: 5F2002202F

ByteString: 82022020940C1001010020010100200204015F3401019F10070601120300000057104263710300198106D3007226125838315F2002202F

2025/07/16 08:40:39: Line 307: .concat(new ByteString("9F2608 9F2701 9F3602"+bsOdaTl,HEX))
2025/07/16 08:40:39: Line 307: ByteString.valueOf arguments

ByteString: 9F4B60

2025/07/16 08:40:39: Line 307: .concat(new ByteString("9F2608 9F2701 9F3602"+bsOdaTl,HEX))
2025/07/16 08:40:39: Line 307: ByteString.toString arguments

String: 9F4B60

2025/07/16 08:40:39: Line 307: .concat(new ByteString("9F2608 9F2701 9F3602"+bsOdaTl,HEX))
2025/07/16 08:40:39: Line 307: Function.ByteString arguments
1: String: 9F2608 9F2701 9F36029F4B60

2: Double: 4

ByteString: 9F26089F27019F36029F4B60

2025/07/16 08:40:39: Line 307: .concat(new ByteString("9F2608 9F2701 9F3602"+bsOdaTl,HEX))
2025/07/16 08:40:39: Line 307: ByteString.concat arguments
1: ByteString: 9F26089F27019F36029F4B60

ByteString: 82022020940C1001010020010100200204015F3401019F10070601120300000057104263710300198106D3007226125838315F2002202F9F26089F27019F36029F4B60

2025/07/16 08:40:39: Line 308: .concat(art.getVariableValue("tCtP3i_9F6C_Ctq"))
2025/07/16 08:40:39: Line 308: Art.getVariableValue arguments
1: String: tCtP3i_9F6C_Ctq

ByteString: 9F6C020000

2025/07/16 08:40:39: Line 308: .concat(art.getVariableValue("tCtP3i_9F6C_Ctq"))
2025/07/16 08:40:39: Line 308: ByteString.concat arguments
1: ByteString: 9F6C020000

ByteString: 82022020940C1001010020010100200204015F3401019F10070601120300000057104263710300198106D3007226125838315F2002202F9F26089F27019F36029F4B609F6C020000

2025/07/16 08:40:39: Line 309: .concat(art.getVariableValue("tCtP3i_9F6E_Ffi"))
2025/07/16 08:40:39: Line 309: Art.getVariableValue arguments
1: String: tCtP3i_9F6E_Ffi

ByteString: 9F6E0420700000

2025/07/16 08:40:39: Line 309: .concat(art.getVariableValue("tCtP3i_9F6E_Ffi"))
2025/07/16 08:40:39: Line 309: ByteString.concat arguments
1: ByteString: 9F6E0420700000

ByteString: 82022020940C1001010020010100200204015F3401019F10070601120300000057104263710300198106D3007226125838315F2002202F9F26089F27019F36029F4B609F6C0200009F6E0420700000

2025/07/16 08:40:39: Line 310: .concat(art.getVariableValue("tCtP3i_9F7C_Ced"))
2025/07/16 08:40:39: Line 310: Art.getVariableValue arguments
1: String: tCtP3i_9F7C_Ced

ByteString: 

2025/07/16 08:40:39: Line 310: .concat(art.getVariableValue("tCtP3i_9F7C_Ced"))
2025/07/16 08:40:39: Line 310: ByteString.concat arguments
1: ByteString: 

ByteString: 82022020940C1001010020010100200204015F3401019F10070601120300000057104263710300198106D3007226125838315F2002202F9F26089F27019F36029F4B609F6C0200009F6E0420700000

2025/07/16 08:40:39: Line 311: .concat(bsAosaTl); // 9F5D is last [PERSO_SPEC] pg 65
2025/07/16 08:40:39: Line 311: ByteString.concat arguments
1: ByteString: 

ByteString: 82022020940C1001010020010100200204015F3401019F10070601120300000057104263710300198106D3007226125838315F2002202F9F26089F27019F36029F4B609F6C0200009F6E0420700000

2025/07/16 08:40:39: Line 315: var bsDgi = new TLV(0x9117, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:39: Line 315: Function.TLV arguments
1: Int: 37143

2: ByteString: 82022020940C1001010020010100200204015F3401019F10070601120300000057104263710300198106D3007226125838315F2002202F9F26089F27019F36029F4B609F6C0200009F6E0420700000

3: Double: 1

TLV: 91174F82022020940C1001010020010100200204015F3401019F10070601120300000057104263710300198106D3007226125838315F2002202F9F26089F27019F36029F4B609F6C0200009F6E0420700000

2025/07/16 08:40:39: Line 315: var bsDgi = new TLV(0x9117, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:39: Line 315: TLV.getTLV arguments

ByteString: 91174F82022020940C1001010020010100200204015F3401019F10070601120300000057104263710300198106D3007226125838315F2002202F9F26089F27019F36029F4B609F6C0200009F6E0420700000

2025/07/16 08:40:39: Line 316: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //9117 (GPO qVSDC online w/ ODA)
2025/07/16 08:40:39: Line 316: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 3

5: ByteString: 91174F82022020940C1001010020010100200204015F3401019F10070601120300000057104263710300198106D3007226125838315F2002202F9F26089F27019F36029F4B609F6C0200009F6E0420700000

2025/07/16 08:40:39: DCC9kServer IC Commands
0000: 80 E2 00 03 52 91 17 4F-82 02 20 20 94 0C 10 01         R  O        
0010: 01 00 20 01 01 00 20 02-04 01 5F 34 01 01 9F 10               _4    
0020: 07 06 01 12 03 00 00 00-57 10 42 63 71 03 00 19             W Bcq   
0030: 81 06 D3 00 72 26 12 58-38 31 5F 20 02 20 2F 9F         r& X81_   / 
0040: 26 08 9F 27 01 9F 36 02-9F 4B 60 9F 6C 02 00 00     &  '  6  K` l   
0050: 9F 6E 04 20 70 00 00 21-53 57 02 2B 2A               n  p  !SW +*   

2025/07/16 08:40:39: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:39: Line 323: var arSfi = new Array();
2025/07/16 08:40:39: Line 323: Function.Array arguments

Array: 

2025/07/16 08:40:39: Line 326: arSfi.push([0x0102, art.getVariableValue("xCt_Sfi1R2")]);
2025/07/16 08:40:39: Line 326: Art.getVariableValue arguments
1: String: xCt_Sfi1R2

ByteString: 57104263710300198106D3007226125838315F200F46555251414E2F4D5548414D4D41449F1F18313235383330303030303030303030383331303030303030

2025/07/16 08:40:39: Line 326: arSfi.push([0x0102, art.getVariableValue("xCt_Sfi1R2")]);
2025/07/16 08:40:39: Line 326: Array.push arguments
1: Array: 258,57104263710300198106D3007226125838315F200F46555251414E2F4D5548414D4D41449F1F18313235383330303030303030303030383331303030303030

Int: 1

2025/07/16 08:40:39: Line 329: arSfi.push([0x0201, art.getVariableValue("xCt_Sfi2R1")]);
2025/07/16 08:40:39: Line 329: Art.getVariableValue arguments
1: String: xCt_Sfi2R1

ByteString: 9081F89A4E3F3C9B01F7D37B82F61D9A02E1490CD189E82FAD84EE399C6906A902A8A9E33E90AC18B211BE056155EA595C3CAA7D076459CA5E6935C61EC60E680E541EDA1658068B8ACF8A1D184270DF29A933018F9983558B321D9191B3FA5618A61DE3710DB183AE7B3AC4E6FBCE6119A3AF585EF5B4F6B2247378B3DC0DCCD0543B7CDDE6B005205F0A0F1533A8F553D9B3B163C14E848829F94AEB37236BAE7DBCB29D3EE9A3F3A4AADB34FC055E4AC69C6C54137A35138F5BF4A31597DF72FACE2D5D9835A9EDEA8B2ECACB046411024C8E3725EB62E0BBCBE92F40164674402C91D7DCBD489A9591D70C206A6A100003BF5CE9866818BE64

2025/07/16 08:40:39: Line 329: arSfi.push([0x0201, art.getVariableValue("xCt_Sfi2R1")]);
2025/07/16 08:40:39: Line 329: Array.push arguments
1: Array: 513,9081F89A4E3F3C9B01F7D37B82F61D9A02E1490CD189E82FAD84EE399C6906A902A8A9E33E90AC18B211BE056155EA595C3CAA7D076459CA5E6935C61EC60E680E541EDA1658068B8ACF8A1D184270DF29A933018F9983558B321D9191B3FA5618A61DE3710DB183AE7B3AC4E6FBCE6119A3AF585EF5B4F6B2247378B3DC0DCCD0543B7CDDE6B005205F0A0F1533A8F553D9B3B163C14E848829F94AEB37236BAE7DBCB29D3EE9A3F3A4AADB34FC055E4AC69C6C54137A35138F5BF4A31597DF72FACE2D5D9835A9EDEA8B2ECACB046411024C8E3725EB62E0BBCBE92F40164674402C91D7DCBD489A9591D70C206A6A100003BF5CE9866818BE64

Int: 2

2025/07/16 08:40:39: Line 332: arSfi.push([0x0202, art.getVariableValue("xCt_Sfi2R2")]);
2025/07/16 08:40:39: Line 332: Art.getVariableValue arguments
1: String: xCt_Sfi2R2

ByteString: 9F32010392230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0878F0109

2025/07/16 08:40:39: Line 332: arSfi.push([0x0202, art.getVariableValue("xCt_Sfi2R2")]);
2025/07/16 08:40:39: Line 332: Array.push arguments
1: Array: 514,9F32010392230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0878F0109

Int: 3

2025/07/16 08:40:39: Line 336: arSfi.push([0x0203, art.getVariableValue("xCt_Sfi2R3")]);
2025/07/16 08:40:39: Line 336: Art.getVariableValue arguments
1: String: xCt_Sfi2R3

ByteString

2025/07/16 08:40:39: Line 336: arSfi.push([0x0203, art.getVariableValue("xCt_Sfi2R3")]);
2025/07/16 08:40:39: Line 336: Array.push arguments
1: Array: 515,9F4681F7B309A4EB1B4C4AD884D434869BDF0DD4917DC5A9D54703BD7451801E8ACFDA7F6041CB1B665A89A9E4B32C14326A6D9C8D1C1C133985CDCC5133AFC62BB5D7AFE307858126AF245E228DC102FF6927081F5203374ACA829E8B471FD12ED6102300D780313EDB4C6DF63CE0B5424A6B6E5B445D51F13286262BAC5207790FB5C7C069DB70882C4734D0EC64AE22CDCDBD26D61F389DAA47780CF5A161B32F4E758E687C6164453B0307E8056271776665F97F043A9E5DC031CA6207BE6258B6171995C9C3B274B5CB7AC4CB84FD6EDAEB9F9EE1DEE5C3852BA4B1E63FDB9996DD131D936025E3883F77DD4EB693197E791EF28BEF687935

Int: 4

2025/07/16 08:40:39: Line 337: arSfi.push([0x0204, art.getVariableValue("xCt_Sfi2R4")]);
2025/07/16 08:40:39: Line 337: Art.getVariableValue arguments
1: String: xCt_Sfi2R4

ByteString: 9F4701039F49039F3704

2025/07/16 08:40:39: Line 337: arSfi.push([0x0204, art.getVariableValue("xCt_Sfi2R4")]);
2025/07/16 08:40:39: Line 337: Array.push arguments
1: Array: 516,9F4701039F49039F3704

Int: 5

2025/07/16 08:40:39: Line 340: arSfi.push([0x0301, art.getVariableValue("xCt_Sfi3R1")]);
2025/07/16 08:40:39: Line 340: Art.getVariableValue arguments
1: String: xCt_Sfi3R1

ByteString: 5A0842637103001981065F3401018E100000000000000000020542035E031F029F0D05B8609C88009F0E0500100000009F0F05B8689C98005F24033007315F280205129F0702FF805F25032507019F4A0182

2025/07/16 08:40:39: Line 340: arSfi.push([0x0301, art.getVariableValue("xCt_Sfi3R1")]);
2025/07/16 08:40:39: Line 340: Array.push arguments
1: Array: 769,5A0842637103001981065F3401018E100000000000000000020542035E031F029F0D05B8609C88009F0E0500100000009F0F05B8689C98005F24033007315F280205129F0702FF805F25032507019F4A0182

Int: 6

2025/07/16 08:40:39: Line 341: arSfi.push([0x0302, art.getVariableValue("xCt_Sfi3R2")]);
2025/07/16 08:40:39: Line 341: Art.getVariableValue arguments
1: String: xCt_Sfi3R2

ByteString: 8C159F02069F03069F1A0295055F2A029A039C019F37048D198A029F02069F03069F1A0295055F2A029A039C019F370491089F4401039F420205125F300202269F080200A0

2025/07/16 08:40:39: Line 341: arSfi.push([0x0302, art.getVariableValue("xCt_Sfi3R2")]);
2025/07/16 08:40:39: Line 341: Array.push arguments
1: Array: 770,8C159F02069F03069F1A0295055F2A029A039C019F37048D198A029F02069F03069F1A0295055F2A029A039C019F370491089F4401039F420205125F300202269F080200A0

Int: 7

2025/07/16 08:40:39: Line 345: arSfi.push([0x0401, art.getVariableValue("xCt_Sfi4R1")]);
2025/07/16 08:40:39: Line 345: Art.getVariableValue arguments
1: String: xCt_Sfi4R1

ByteString: 5F280205129F0702C080

2025/07/16 08:40:39: Line 345: arSfi.push([0x0401, art.getVariableValue("xCt_Sfi4R1")]);
2025/07/16 08:40:39: Line 345: Array.push arguments
1: Array: 1025,5F280205129F0702C080

Int: 8

2025/07/16 08:40:39: Line 346: arSfi.push([0x0402, art.getVariableValue("xCt_Sfi4R2")]);
2025/07/16 08:40:39: Line 346: Art.getVariableValue arguments
1: String: xCt_Sfi4R2

ByteString: 5A0842637103001981065F2403300731

2025/07/16 08:40:39: Line 346: arSfi.push([0x0402, art.getVariableValue("xCt_Sfi4R2")]);
2025/07/16 08:40:39: Line 346: Array.push arguments
1: Array: 1026,5A0842637103001981065F2403300731

Int: 9

2025/07/16 08:40:39: Line 350: arSfi.push([0x0403, art.getVariableValue("xCt_Sfi4R3")]);
2025/07/16 08:40:39: Line 350: Art.getVariableValue arguments
1: String: xCt_Sfi4R3

ByteString: 9F4681F7AD0588351229C47BD01A311EE3517EFDCD589490F1E30FA5E583F2184C804B158A7B9969C931D856E378696F2325DE8A01F98BC3FE0010464F30CA9C004800CC9B9A7BBADCFB1034B8D56B851F4C4F1A07496CE5BD6F4B359B16A6D34E7ACDB8D62F979586E14F1FD7787DC889756D0D1AF57EBB63FED72FE0BC2F8D8A8C4A1A57BF8B72FC9AD795305A7D1844C884EB0056E4D8CE9E8E62FB235AEE5D2C543AB1435180FB99DF874E79599E6CD8F6E8FF51DF69EEB2F1B35D6C60C3AF98E564327EB807651015B8567744D32DF739CA3450F64A8BAE9F6BF32E0EFD48F5B12008C8127AB5D988C7CDE0EF9E9C57A6F68D5BCE48518F12

2025/07/16 08:40:39: Line 350: arSfi.push([0x0403, art.getVariableValue("xCt_Sfi4R3")]);
2025/07/16 08:40:39: Line 350: Array.push arguments
1: Array: 1027,9F4681F7AD0588351229C47BD01A311EE3517EFDCD589490F1E30FA5E583F2184C804B158A7B9969C931D856E378696F2325DE8A01F98BC3FE0010464F30CA9C004800CC9B9A7BBADCFB1034B8D56B851F4C4F1A07496CE5BD6F4B359B16A6D34E7ACDB8D62F979586E14F1FD7787DC889756D0D1AF57EBB63FED72FE0BC2F8D8A8C4A1A57BF8B72FC9AD795305A7D1844C884EB0056E4D8CE9E8E62FB235AEE5D2C543AB1435180FB99DF874E79599E6CD8F6E8FF51DF69EEB2F1B35D6C60C3AF98E564327EB807651015B8567744D32DF739CA3450F64A8BAE9F6BF32E0EFD48F5B12008C8127AB5D988C7CDE0EF9E9C57A6F68D5BCE48518F12

Int: 10

2025/07/16 08:40:39: Line 351: arSfi.push([0x0404, art.getVariableValue("xCt_Sfi4R4")]);
2025/07/16 08:40:39: Line 351: Art.getVariableValue arguments
1: String: xCt_Sfi4R4

ByteString: 8F010992230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0879F3201039F4701039F690701000000000000

2025/07/16 08:40:39: Line 351: arSfi.push([0x0404, art.getVariableValue("xCt_Sfi4R4")]);
2025/07/16 08:40:39: Line 351: Array.push arguments
1: Array: 1028,8F010992230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0879F3201039F4701039F690701000000000000

Int: 11

2025/07/16 08:40:39: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:39: Line 368: Function.TLV arguments
1: Int: 112

2: ByteString: 57104263710300198106D3007226125838315F200F46555251414E2F4D5548414D4D41449F1F18313235383330303030303030303030383331303030303030

3: Double: 2

TLV: 703F57104263710300198106D3007226125838315F200F46555251414E2F4D5548414D4D41449F1F18313235383330303030303030303030383331303030303030

2025/07/16 08:40:39: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:39: Line 368: TLV.getTLV arguments

ByteString: 703F57104263710300198106D3007226125838315F200F46555251414E2F4D5548414D4D41449F1F18313235383330303030303030303030383331303030303030

2025/07/16 08:40:39: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:39: Line 369: Function.TLV arguments
1: Int: 258

2: ByteString: 703F57104263710300198106D3007226125838315F200F46555251414E2F4D5548414D4D41449F1F18313235383330303030303030303030383331303030303030

3: Double: 1

TLV: 010241703F57104263710300198106D3007226125838315F200F46555251414E2F4D5548414D4D41449F1F18313235383330303030303030303030383331303030303030

2025/07/16 08:40:39: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:39: Line 369: TLV.getTLV arguments

ByteString: 010241703F57104263710300198106D3007226125838315F200F46555251414E2F4D5548414D4D41449F1F18313235383330303030303030303030383331303030303030

2025/07/16 08:40:39: Line 370: var bsRem = new ByteString();
2025/07/16 08:40:39: Line 370: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:39: Line 390: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //SFI
2025/07/16 08:40:39: Line 390: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 4

5: ByteString: 010241703F57104263710300198106D3007226125838315F200F46555251414E2F4D5548414D4D41449F1F18313235383330303030303030303030383331303030303030

2025/07/16 08:40:39: DCC9kServer IC Commands
0000: 80 E2 00 04 44 01 02 41-70 3F 57 10 42 63 71 03         D  Ap?W Bcq 
0010: 00 19 81 06 D3 00 72 26-12 58 38 31 5F 20 0F 46           r& X81_  F
0020: 55 52 51 41 4E 2F 4D 55-48 41 4D 4D 41 44 9F 1F     URQAN/MUHAMMAD  
0030: 18 31 32 35 38 33 30 30-30 30 30 30 30 30 30 30      125830000000000
0040: 38 33 31 30 30 30 30 30-30 21 53 57 02 2B 2A        831000000!SW +* 

2025/07/16 08:40:39: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:39: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:39: Line 368: Function.TLV arguments
1: Int: 112

2: ByteString: 9081F89A4E3F3C9B01F7D37B82F61D9A02E1490CD189E82FAD84EE399C6906A902A8A9E33E90AC18B211BE056155EA595C3CAA7D076459CA5E6935C61EC60E680E541EDA1658068B8ACF8A1D184270DF29A933018F9983558B321D9191B3FA5618A61DE3710DB183AE7B3AC4E6FBCE6119A3AF585EF5B4F6B2247378B3DC0DCCD0543B7CDDE6B005205F0A0F1533A8F553D9B3B163C14E848829F94AEB37236BAE7DBCB29D3EE9A3F3A4AADB34FC055E4AC69C6C54137A35138F5BF4A31597DF72FACE2D5D9835A9EDEA8B2ECACB046411024C8E3725EB62E0BBCBE92F40164674402C91D7DCBD489A9591D70C206A6A100003BF5CE9866818BE64

3: Double: 2

TLV: 7081FB9081F89A4E3F3C9B01F7D37B82F61D9A02E1490CD189E82FAD84EE399C6906A902A8A9E33E90AC18B211BE056155EA595C3CAA7D076459CA5E6935C61EC60E680E541EDA1658068B8ACF8A1D184270DF29A933018F9983558B321D9191B3FA5618A61DE3710DB183AE7B3AC4E6FBCE6119A3AF585EF5B4F6B2247378B3DC0DCCD0543B7CDDE6B005205F0A0F1533A8F553D9B3B163C14E848829F94AEB37236BAE7DBCB29D3EE9A3F3A4AADB34FC055E4AC69C6C54137A35138F5BF4A31597DF72FACE2D5D9835A9EDEA8B2ECACB046411024C8E3725EB62E0BBCBE92F40164674402C91D7DCBD489A9591D70C206A6A100003BF5CE9866818BE64

2025/07/16 08:40:39: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:39: Line 368: TLV.getTLV arguments

ByteString: 7081FB9081F89A4E3F3C9B01F7D37B82F61D9A02E1490CD189E82FAD84EE399C6906A902A8A9E33E90AC18B211BE056155EA595C3CAA7D076459CA5E6935C61EC60E680E541EDA1658068B8ACF8A1D184270DF29A933018F9983558B321D9191B3FA5618A61DE3710DB183AE7B3AC4E6FBCE6119A3AF585EF5B4F6B2247378B3DC0DCCD0543B7CDDE6B005205F0A0F1533A8F553D9B3B163C14E848829F94AEB37236BAE7DBCB29D3EE9A3F3A4AADB34FC055E4AC69C6C54137A35138F5BF4A31597DF72FACE2D5D9835A9EDEA8B2ECACB046411024C8E3725EB62E0BBCBE92F40164674402C91D7DCBD489A9591D70C206A6A100003BF5CE9866818BE64

2025/07/16 08:40:39: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:39: Line 369: Function.TLV arguments
1: Int: 513

2: ByteString: 7081FB9081F89A4E3F3C9B01F7D37B82F61D9A02E1490CD189E82FAD84EE399C6906A902A8A9E33E90AC18B211BE056155EA595C3CAA7D076459CA5E6935C61EC60E680E541EDA1658068B8ACF8A1D184270DF29A933018F9983558B321D9191B3FA5618A61DE3710DB183AE7B3AC4E6FBCE6119A3AF585EF5B4F6B2247378B3DC0DCCD0543B7CDDE6B005205F0A0F1533A8F553D9B3B163C14E848829F94AEB37236BAE7DBCB29D3EE9A3F3A4AADB34FC055E4AC69C6C54137A35138F5BF4A31597DF72FACE2D5D9835A9EDEA8B2ECACB046411024C8E3725EB62E0BBCBE92F40164674402C91D7DCBD489A9591D70C206A6A100003BF5CE9866818BE64

3: Double: 1

TLV: 0201FE7081FB9081F89A4E3F3C9B01F7D37B82F61D9A02E1490CD189E82FAD84EE399C6906A902A8A9E33E90AC18B211BE056155EA595C3CAA7D076459CA5E6935C61EC60E680E541EDA1658068B8ACF8A1D184270DF29A933018F9983558B321D9191B3FA5618A61DE3710DB183AE7B3AC4E6FBCE6119A3AF585EF5B4F6B2247378B3DC0DCCD0543B7CDDE6B005205F0A0F1533A8F553D9B3B163C14E848829F94AEB37236BAE7DBCB29D3EE9A3F3A4AADB34FC055E4AC69C6C54137A35138F5BF4A31597DF72FACE2D5D9835A9EDEA8B2ECACB046411024C8E3725EB62E0BBCBE92F40164674402C91D7DCBD489A9591D70C206A6A100003BF5CE9866818BE64

2025/07/16 08:40:39: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:39: Line 369: TLV.getTLV arguments

ByteString: 0201FE7081FB9081F89A4E3F3C9B01F7D37B82F61D9A02E1490CD189E82FAD84EE399C6906A902A8A9E33E90AC18B211BE056155EA595C3CAA7D076459CA5E6935C61EC60E680E541EDA1658068B8ACF8A1D184270DF29A933018F9983558B321D9191B3FA5618A61DE3710DB183AE7B3AC4E6FBCE6119A3AF585EF5B4F6B2247378B3DC0DCCD0543B7CDDE6B005205F0A0F1533A8F553D9B3B163C14E848829F94AEB37236BAE7DBCB29D3EE9A3F3A4AADB34FC055E4AC69C6C54137A35138F5BF4A31597DF72FACE2D5D9835A9EDEA8B2ECACB046411024C8E3725EB62E0BBCBE92F40164674402C91D7DCBD489A9591D70C206A6A100003BF5CE9866818BE64

2025/07/16 08:40:39: Line 370: var bsRem = new ByteString();
2025/07/16 08:40:39: Line 370: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:39: Line 377: var bsFmt = new ByteString("FF00",HEX);
2025/07/16 08:40:39: Line 377: Function.ByteString arguments
1: String: FF00

2: Double: 4

ByteString: FF00

2025/07/16 08:40:39: Line 378: var bsDgi = bsDgi.bytes(0,2).concat(bsFmt).concat(bsDgi.bytes(2));
2025/07/16 08:40:39: Line 378: ByteString.bytes arguments
1: Int: 0

2: Int: 2

ByteString: 0201

2025/07/16 08:40:39: Line 378: var bsDgi = bsDgi.bytes(0,2).concat(bsFmt).concat(bsDgi.bytes(2));
2025/07/16 08:40:39: Line 378: ByteString.concat arguments
1: ByteString: FF00

ByteString: 0201FF00

2025/07/16 08:40:39: Line 378: var bsDgi = bsDgi.bytes(0,2).concat(bsFmt).concat(bsDgi.bytes(2));
2025/07/16 08:40:39: Line 378: ByteString.bytes arguments
1: Int: 2

ByteString: FE7081FB9081F89A4E3F3C9B01F7D37B82F61D9A02E1490CD189E82FAD84EE399C6906A902A8A9E33E90AC18B211BE056155EA595C3CAA7D076459CA5E6935C61EC60E680E541EDA1658068B8ACF8A1D184270DF29A933018F9983558B321D9191B3FA5618A61DE3710DB183AE7B3AC4E6FBCE6119A3AF585EF5B4F6B2247378B3DC0DCCD0543B7CDDE6B005205F0A0F1533A8F553D9B3B163C14E848829F94AEB37236BAE7DBCB29D3EE9A3F3A4AADB34FC055E4AC69C6C54137A35138F5BF4A31597DF72FACE2D5D9835A9EDEA8B2ECACB046411024C8E3725EB62E0BBCBE92F40164674402C91D7DCBD489A9591D70C206A6A100003BF5CE9866818BE64

2025/07/16 08:40:39: Line 378: var bsDgi = bsDgi.bytes(0,2).concat(bsFmt).concat(bsDgi.bytes(2));
2025/07/16 08:40:39: Line 378: ByteString.concat arguments
1: ByteString: FE7081FB9081F89A4E3F3C9B01F7D37B82F61D9A02E1490CD189E82FAD84EE399C6906A902A8A9E33E90AC18B211BE056155EA595C3CAA7D076459CA5E6935C61EC60E680E541EDA1658068B8ACF8A1D184270DF29A933018F9983558B321D9191B3FA5618A61DE3710DB183AE7B3AC4E6FBCE6119A3AF585EF5B4F6B2247378B3DC0DCCD0543B7CDDE6B005205F0A0F1533A8F553D9B3B163C14E848829F94AEB37236BAE7DBCB29D3EE9A3F3A4AADB34FC055E4AC69C6C54137A35138F5BF4A31597DF72FACE2D5D9835A9EDEA8B2ECACB046411024C8E3725EB62E0BBCBE92F40164674402C91D7DCBD489A9591D70C206A6A100003BF5CE9866818BE64

ByteString: 0201FF00FE7081FB9081F89A4E3F3C9B01F7D37B82F61D9A02E1490CD189E82FAD84EE399C6906A902A8A9E33E90AC18B211BE056155EA595C3CAA7D076459CA5E6935C61EC60E680E541EDA1658068B8ACF8A1D184270DF29A933018F9983558B321D9191B3FA5618A61DE3710DB183AE7B3AC4E6FBCE6119A3AF585EF5B4F6B2247378B3DC0DCCD0543B7CDDE6B005205F0A0F1533A8F553D9B3B163C14E848829F94AEB37236BAE7DBCB29D3EE9A3F3A4AADB34FC055E4AC69C6C54137A35138F5BF4A31597DF72FACE2D5D9835A9EDEA8B2ECACB046411024C8E3725EB62E0BBCBE92F40164674402C91D7DCBD489A9591D70C206A6A100003BF5CE9866818BE64

2025/07/16 08:40:39: Line 384: var bsRem = bsDgi.bytes(0xFF);
2025/07/16 08:40:39: Line 384: ByteString.bytes arguments
1: Int: 255

ByteString: 6818BE64

2025/07/16 08:40:39: Line 385: var bsDgi = bsDgi.bytes(0,0xFF);
2025/07/16 08:40:39: Line 385: ByteString.bytes arguments
1: Int: 0

2: Int: 255

ByteString: 0201FF00FE7081FB9081F89A4E3F3C9B01F7D37B82F61D9A02E1490CD189E82FAD84EE399C6906A902A8A9E33E90AC18B211BE056155EA595C3CAA7D076459CA5E6935C61EC60E680E541EDA1658068B8ACF8A1D184270DF29A933018F9983558B321D9191B3FA5618A61DE3710DB183AE7B3AC4E6FBCE6119A3AF585EF5B4F6B2247378B3DC0DCCD0543B7CDDE6B005205F0A0F1533A8F553D9B3B163C14E848829F94AEB37236BAE7DBCB29D3EE9A3F3A4AADB34FC055E4AC69C6C54137A35138F5BF4A31597DF72FACE2D5D9835A9EDEA8B2ECACB046411024C8E3725EB62E0BBCBE92F40164674402C91D7DCBD489A9591D70C206A6A100003BF5CE986

2025/07/16 08:40:39: Line 390: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //SFI
2025/07/16 08:40:39: Line 390: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 5

5: ByteString: 0201FF00FE7081FB9081F89A4E3F3C9B01F7D37B82F61D9A02E1490CD189E82FAD84EE399C6906A902A8A9E33E90AC18B211BE056155EA595C3CAA7D076459CA5E6935C61EC60E680E541EDA1658068B8ACF8A1D184270DF29A933018F9983558B321D9191B3FA5618A61DE3710DB183AE7B3AC4E6FBCE6119A3AF585EF5B4F6B2247378B3DC0DCCD0543B7CDDE6B005205F0A0F1533A8F553D9B3B163C14E848829F94AEB37236BAE7DBCB29D3EE9A3F3A4AADB34FC055E4AC69C6C54137A35138F5BF4A31597DF72FACE2D5D9835A9EDEA8B2ECACB046411024C8E3725EB62E0BBCBE92F40164674402C91D7DCBD489A9591D70C206A6A100003BF5CE986

2025/07/16 08:40:39: DCC9kServer IC Commands
0000: 80 E2 00 05 FF 02 01 FF-00 FE 70 81 FB 90 81 F8               p     
0010: 9A 4E 3F 3C 9B 01 F7 D3-7B 82 F6 1D 9A 02 E1 49      N?<    {      I
0020: 0C D1 89 E8 2F AD 84 EE-39 9C 69 06 A9 02 A8 A9         /   9 i     
0030: E3 3E 90 AC 18 B2 11 BE-05 61 55 EA 59 5C 3C AA      >       aU Y\< 
0040: 7D 07 64 59 CA 5E 69 35-C6 1E C6 0E 68 0E 54 1E     } dY ^i5    h T 
0050: DA 16 58 06 8B 8A CF 8A-1D 18 42 70 DF 29 A9 33       X       Bp ) 3
0060: 01 8F 99 83 55 8B 32 1D-91 91 B3 FA 56 18 A6 1D         U 2     V   
0070: E3 71 0D B1 83 AE 7B 3A-C4 E6 FB CE 61 19 A3 AF      q    {:    a   
0080: 58 5E F5 B4 F6 B2 24 73-78 B3 DC 0D CC D0 54 3B     X^    $sx     T;
0090: 7C DD E6 B0 05 20 5F 0A-0F 15 33 A8 F5 53 D9 B3     |     _   3  S  
00A0: B1 63 C1 4E 84 88 29 F9-4A EB 37 23 6B AE 7D BC      c N  ) J 7#k } 
00B0: B2 9D 3E E9 A3 F3 A4 AA-DB 34 FC 05 5E 4A C6 9C       >      4  ^J  
00C0: 6C 54 13 7A 35 13 8F 5B-F4 A3 15 97 DF 72 FA CE     lT z5  [     r  
00D0: 2D 5D 98 35 A9 ED EA 8B-2E CA CB 04 64 11 02 4C     -] 5    .   d  L
00E0: 8E 37 25 EB 62 E0 BB CB-E9 2F 40 16 46 74 40 2C      7% b    /@ Ft@,
00F0: 91 D7 DC BD 48 9A 95 91-D7 0C 20 6A 6A 10 00 03         H      jj   
0100: BF 5C E9 86 21 53 57 02-2B 2A                        \  !SW +*      

2025/07/16 08:40:39: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:39: Line 392: card.sendApdu(0x80,0xE2,0x00,nP2++,bsRem); //SFI REM
2025/07/16 08:40:39: Line 392: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 6

5: ByteString: 6818BE64

2025/07/16 08:40:39: DCC9kServer IC Commands
0000: 80 E2 00 06 04 68 18 BE-64 21 53 57 02 2B 2A             h  d!SW +* 

2025/07/16 08:40:40: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:40: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:40: Line 368: Function.TLV arguments
1: Int: 112

2: ByteString: 9F32010392230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0878F0109

3: Double: 2

TLV: 702C9F32010392230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0878F0109

2025/07/16 08:40:40: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:40: Line 368: TLV.getTLV arguments

ByteString: 702C9F32010392230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0878F0109

2025/07/16 08:40:40: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:40: Line 369: Function.TLV arguments
1: Int: 514

2: ByteString: 702C9F32010392230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0878F0109

3: Double: 1

TLV: 02022E702C9F32010392230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0878F0109

2025/07/16 08:40:40: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:40: Line 369: TLV.getTLV arguments

ByteString: 02022E702C9F32010392230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0878F0109

2025/07/16 08:40:40: Line 370: var bsRem = new ByteString();
2025/07/16 08:40:40: Line 370: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:40: Line 390: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //SFI
2025/07/16 08:40:40: Line 390: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 7

5: ByteString: 02022E702C9F32010392230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0878F0109

2025/07/16 08:40:40: DCC9kServer IC Commands
0000: 80 E2 00 07 31 02 02 2E-70 2C 9F 32 01 03 92 23         1  .p, 2   #
0010: 03 21 13 71 04 D4 5C 78-60 1C 36 4D 73 09 68 57      ! q  \x` 6Ms hW
0020: 52 8B 00 88 9F 73 29 63-EF D0 5C 07 A1 DE 35 5B     R    s)c  \   5[
0030: F7 D0 87 8F 01 09 21 53-57 02 2B 2A                       !SW +*    

2025/07/16 08:40:40: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:40: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:40: Line 368: Function.TLV arguments
1: Int: 112

2: ByteString

3: Double: 2

TLV: 7081FB9F4681F7B309A4EB1B4C4AD884D434869BDF0DD4917DC5A9D54703BD7451801E8ACFDA7F6041CB1B665A89A9E4B32C14326A6D9C8D1C1C133985CDCC5133AFC62BB5D7AFE307858126AF245E228DC102FF6927081F5203374ACA829E8B471FD12ED6102300D780313EDB4C6DF63CE0B5424A6B6E5B445D51F13286262BAC5207790FB5C7C069DB70882C4734D0EC64AE22CDCDBD26D61F389DAA47780CF5A161B32F4E758E687C6164453B0307E8056271776665F97F043A9E5DC031CA6207BE6258B6171995C9C3B274B5CB7AC4CB84FD6EDAEB9F9EE1DEE5C3852BA4B1E63FDB9996DD131D936025E3883F77DD4EB693197E791EF28BEF687935

2025/07/16 08:40:40: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:40: Line 368: TLV.getTLV arguments

ByteString

2025/07/16 08:40:40: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:40: Line 369: Function.TLV arguments
1: Int: 515

2: ByteString

3: Double: 1

TLV: 0203FE7081FB9F4681F7B309A4EB1B4C4AD884D434869BDF0DD4917DC5A9D54703BD7451801E8ACFDA7F6041CB1B665A89A9E4B32C14326A6D9C8D1C1C133985CDCC5133AFC62BB5D7AFE307858126AF245E228DC102FF6927081F5203374ACA829E8B471FD12ED6102300D780313EDB4C6DF63CE0B5424A6B6E5B445D51F13286262BAC5207790FB5C7C069DB70882C4734D0EC64AE22CDCDBD26D61F389DAA47780CF5A161B32F4E758E687C6164453B0307E8056271776665F97F043A9E5DC031CA6207BE6258B6171995C9C3B274B5CB7AC4CB84FD6EDAEB9F9EE1DEE5C3852BA4B1E63FDB9996DD131D936025E3883F77DD4EB693197E791EF28BEF687935

2025/07/16 08:40:40: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:40: Line 369: TLV.getTLV arguments

ByteString: 0203FE7081FB9F4681F7B309A4EB1B4C4AD884D434869BDF0DD4917DC5A9D54703BD7451801E8ACFDA7F6041CB1B665A89A9E4B32C14326A6D9C8D1C1C133985CDCC5133AFC62BB5D7AFE307858126AF245E228DC102FF6927081F5203374ACA829E8B471FD12ED6102300D780313EDB4C6DF63CE0B5424A6B6E5B445D51F13286262BAC5207790FB5C7C069DB70882C4734D0EC64AE22CDCDBD26D61F389DAA47780CF5A161B32F4E758E687C6164453B0307E8056271776665F97F043A9E5DC031CA6207BE6258B6171995C9C3B274B5CB7AC4CB84FD6EDAEB9F9EE1DEE5C3852BA4B1E63FDB9996DD131D936025E3883F77DD4EB693197E791EF28BEF687935

2025/07/16 08:40:40: Line 370: var bsRem = new ByteString();
2025/07/16 08:40:40: Line 370: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:40: Line 377: var bsFmt = new ByteString("FF00",HEX);
2025/07/16 08:40:40: Line 377: Function.ByteString arguments
1: String: FF00

2: Double: 4

ByteString: FF00

2025/07/16 08:40:40: Line 378: var bsDgi = bsDgi.bytes(0,2).concat(bsFmt).concat(bsDgi.bytes(2));
2025/07/16 08:40:40: Line 378: ByteString.bytes arguments
1: Int: 0

2: Int: 2

ByteString: 0203

2025/07/16 08:40:40: Line 378: var bsDgi = bsDgi.bytes(0,2).concat(bsFmt).concat(bsDgi.bytes(2));
2025/07/16 08:40:40: Line 378: ByteString.concat arguments
1: ByteString: FF00

ByteString: 0203FF00

2025/07/16 08:40:40: Line 378: var bsDgi = bsDgi.bytes(0,2).concat(bsFmt).concat(bsDgi.bytes(2));
2025/07/16 08:40:40: Line 378: ByteString.bytes arguments
1: Int: 2

ByteString: FE7081FB9F4681F7B309A4EB1B4C4AD884D434869BDF0DD4917DC5A9D54703BD7451801E8ACFDA7F6041CB1B665A89A9E4B32C14326A6D9C8D1C1C133985CDCC5133AFC62BB5D7AFE307858126AF245E228DC102FF6927081F5203374ACA829E8B471FD12ED6102300D780313EDB4C6DF63CE0B5424A6B6E5B445D51F13286262BAC5207790FB5C7C069DB70882C4734D0EC64AE22CDCDBD26D61F389DAA47780CF5A161B32F4E758E687C6164453B0307E8056271776665F97F043A9E5DC031CA6207BE6258B6171995C9C3B274B5CB7AC4CB84FD6EDAEB9F9EE1DEE5C3852BA4B1E63FDB9996DD131D936025E3883F77DD4EB693197E791EF28BEF687935

2025/07/16 08:40:40: Line 378: var bsDgi = bsDgi.bytes(0,2).concat(bsFmt).concat(bsDgi.bytes(2));
2025/07/16 08:40:40: Line 378: ByteString.concat arguments
1: ByteString: FE7081FB9F4681F7B309A4EB1B4C4AD884D434869BDF0DD4917DC5A9D54703BD7451801E8ACFDA7F6041CB1B665A89A9E4B32C14326A6D9C8D1C1C133985CDCC5133AFC62BB5D7AFE307858126AF245E228DC102FF6927081F5203374ACA829E8B471FD12ED6102300D780313EDB4C6DF63CE0B5424A6B6E5B445D51F13286262BAC5207790FB5C7C069DB70882C4734D0EC64AE22CDCDBD26D61F389DAA47780CF5A161B32F4E758E687C6164453B0307E8056271776665F97F043A9E5DC031CA6207BE6258B6171995C9C3B274B5CB7AC4CB84FD6EDAEB9F9EE1DEE5C3852BA4B1E63FDB9996DD131D936025E3883F77DD4EB693197E791EF28BEF687935

ByteString

2025/07/16 08:40:40: Line 384: var bsRem = bsDgi.bytes(0xFF);
2025/07/16 08:40:40: Line 384: ByteString.bytes arguments
1: Int: 255

ByteString: EF687935

2025/07/16 08:40:40: Line 385: var bsDgi = bsDgi.bytes(0,0xFF);
2025/07/16 08:40:40: Line 385: ByteString.bytes arguments
1: Int: 0

2: Int: 255

ByteString: 0203FF00FE7081FB9F4681F7B309A4EB1B4C4AD884D434869BDF0DD4917DC5A9D54703BD7451801E8ACFDA7F6041CB1B665A89A9E4B32C14326A6D9C8D1C1C133985CDCC5133AFC62BB5D7AFE307858126AF245E228DC102FF6927081F5203374ACA829E8B471FD12ED6102300D780313EDB4C6DF63CE0B5424A6B6E5B445D51F13286262BAC5207790FB5C7C069DB70882C4734D0EC64AE22CDCDBD26D61F389DAA47780CF5A161B32F4E758E687C6164453B0307E8056271776665F97F043A9E5DC031CA6207BE6258B6171995C9C3B274B5CB7AC4CB84FD6EDAEB9F9EE1DEE5C3852BA4B1E63FDB9996DD131D936025E3883F77DD4EB693197E791EF28B

2025/07/16 08:40:40: Line 390: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //SFI
2025/07/16 08:40:40: Line 390: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 8

5: ByteString: 0203FF00FE7081FB9F4681F7B309A4EB1B4C4AD884D434869BDF0DD4917DC5A9D54703BD7451801E8ACFDA7F6041CB1B665A89A9E4B32C14326A6D9C8D1C1C133985CDCC5133AFC62BB5D7AFE307858126AF245E228DC102FF6927081F5203374ACA829E8B471FD12ED6102300D780313EDB4C6DF63CE0B5424A6B6E5B445D51F13286262BAC5207790FB5C7C069DB70882C4734D0EC64AE22CDCDBD26D61F389DAA47780CF5A161B32F4E758E687C6164453B0307E8056271776665F97F043A9E5DC031CA6207BE6258B6171995C9C3B274B5CB7AC4CB84FD6EDAEB9F9EE1DEE5C3852BA4B1E63FDB9996DD131D936025E3883F77DD4EB693197E791EF28B

2025/07/16 08:40:40: DCC9kServer IC Commands
0000: 80 E2 00 08 FF 02 03 FF-00 FE 70 81 FB 9F 46 81               p   F 
0010: F7 B3 09 A4 EB 1B 4C 4A-D8 84 D4 34 86 9B DF 0D           LJ   4    
0020: D4 91 7D C5 A9 D5 47 03-BD 74 51 80 1E 8A CF DA       }   G  tQ     
0030: 7F 60 41 CB 1B 66 5A 89-A9 E4 B3 2C 14 32 6A 6D     `A  fZ    , 2jm
0040: 9C 8D 1C 1C 13 39 85 CD-CC 51 33 AF C6 2B B5 D7          9   Q3  +  
0050: AF E3 07 85 81 26 AF 24-5E 22 8D C1 02 FF 69 27          & $^"    i'
0060: 08 1F 52 03 37 4A CA 82-9E 8B 47 1F D1 2E D6 10       R 7J    G  .  
0070: 23 00 D7 80 31 3E DB 4C-6D F6 3C E0 B5 42 4A 6B     #   1> Lm <  BJk
0080: 6E 5B 44 5D 51 F1 32 86-26 2B AC 52 07 79 0F B5     n[D]Q 2 &+ R y  
0090: C7 C0 69 DB 70 88 2C 47-34 D0 EC 64 AE 22 CD CD       i p ,G4  d "  
00A0: BD 26 D6 1F 38 9D AA 47-78 0C F5 A1 61 B3 2F 4E      &  8  Gx   a /N
00B0: 75 8E 68 7C 61 64 45 3B-03 07 E8 05 62 71 77 66     u h|adE;    bqwf
00C0: 65 F9 7F 04 3A 9E 5D C0-31 CA 62 07 BE 62 58 B6     e  : ] 1 b  bX 
00D0: 17 19 95 C9 C3 B2 74 B5-CB 7A C4 CB 84 FD 6E DA           t  z    n 
00E0: EB 9F 9E E1 DE E5 C3 85-2B A4 B1 E6 3F DB 99 96             +   ?   
00F0: DD 13 1D 93 60 25 E3 88-3F 77 DD 4E B6 93 19 7E         `%  ?w N   ~
0100: 79 1E F2 8B 21 53 57 02-2B 2A                       y   !SW +*      

2025/07/16 08:40:40: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:40: Line 392: card.sendApdu(0x80,0xE2,0x00,nP2++,bsRem); //SFI REM
2025/07/16 08:40:40: Line 392: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 9

5: ByteString: EF687935

2025/07/16 08:40:40: DCC9kServer IC Commands
0000: 80 E2 00 09 04 EF 68 79-35 21 53 57 02 2B 2A              hy5!SW +* 

2025/07/16 08:40:40: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:40: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:40: Line 368: Function.TLV arguments
1: Int: 112

2: ByteString: 9F4701039F49039F3704

3: Double: 2

TLV: 700A9F4701039F49039F3704

2025/07/16 08:40:40: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:40: Line 368: TLV.getTLV arguments

ByteString: 700A9F4701039F49039F3704

2025/07/16 08:40:40: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:40: Line 369: Function.TLV arguments
1: Int: 516

2: ByteString: 700A9F4701039F49039F3704

3: Double: 1

TLV: 02040C700A9F4701039F49039F3704

2025/07/16 08:40:40: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:40: Line 369: TLV.getTLV arguments

ByteString: 02040C700A9F4701039F49039F3704

2025/07/16 08:40:40: Line 370: var bsRem = new ByteString();
2025/07/16 08:40:40: Line 370: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:40: Line 390: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //SFI
2025/07/16 08:40:40: Line 390: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 10

5: ByteString: 02040C700A9F4701039F49039F3704

2025/07/16 08:40:40: DCC9kServer IC Commands
0000: 80 E2 00 0A 0F 02 04 0C-70 0A 9F 47 01 03 9F 49             p  G   I
0010: 03 9F 37 04 21 53 57 02-2B 2A                         7 !SW +*      

2025/07/16 08:40:40: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:40: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:40: Line 368: Function.TLV arguments
1: Int: 112

2: ByteString: 5A0842637103001981065F3401018E100000000000000000020542035E031F029F0D05B8609C88009F0E0500100000009F0F05B8689C98005F24033007315F280205129F0702FF805F25032507019F4A0182

3: Double: 2

TLV: 70525A0842637103001981065F3401018E100000000000000000020542035E031F029F0D05B8609C88009F0E0500100000009F0F05B8689C98005F24033007315F280205129F0702FF805F25032507019F4A0182

2025/07/16 08:40:40: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:40: Line 368: TLV.getTLV arguments

ByteString: 70525A0842637103001981065F3401018E100000000000000000020542035E031F029F0D05B8609C88009F0E0500100000009F0F05B8689C98005F24033007315F280205129F0702FF805F25032507019F4A0182

2025/07/16 08:40:40: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:40: Line 369: Function.TLV arguments
1: Int: 769

2: ByteString: 70525A0842637103001981065F3401018E100000000000000000020542035E031F029F0D05B8609C88009F0E0500100000009F0F05B8689C98005F24033007315F280205129F0702FF805F25032507019F4A0182

3: Double: 1

TLV: 03015470525A0842637103001981065F3401018E100000000000000000020542035E031F029F0D05B8609C88009F0E0500100000009F0F05B8689C98005F24033007315F280205129F0702FF805F25032507019F4A0182

2025/07/16 08:40:40: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:40: Line 369: TLV.getTLV arguments

ByteString: 03015470525A0842637103001981065F3401018E100000000000000000020542035E031F029F0D05B8609C88009F0E0500100000009F0F05B8689C98005F24033007315F280205129F0702FF805F25032507019F4A0182

2025/07/16 08:40:40: Line 370: var bsRem = new ByteString();
2025/07/16 08:40:40: Line 370: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:40: Line 390: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //SFI
2025/07/16 08:40:40: Line 390: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 11

5: ByteString: 03015470525A0842637103001981065F3401018E100000000000000000020542035E031F029F0D05B8609C88009F0E0500100000009F0F05B8689C98005F24033007315F280205129F0702FF805F25032507019F4A0182

2025/07/16 08:40:40: DCC9kServer IC Commands
0000: 80 E2 00 0B 57 03 01 54-70 52 5A 08 42 63 71 03         W  TpRZ Bcq 
0010: 00 19 81 06 5F 34 01 01-8E 10 00 00 00 00 00 00         _4          
0020: 00 00 02 05 42 03 5E 03-1F 02 9F 0D 05 B8 60 9C         B ^       ` 
0030: 88 00 9F 0E 05 00 10 00-00 00 9F 0F 05 B8 68 9C                   h 
0040: 98 00 5F 24 03 30 07 31-5F 28 02 05 12 9F 07 02       _$ 0 1_(      
0050: FF 80 5F 25 03 25 07 01-9F 4A 01 82 21 53 57 02       _% %   J  !SW 
0060: 2B 2A                                               +*              

2025/07/16 08:40:41: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:41: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:41: Line 368: Function.TLV arguments
1: Int: 112

2: ByteString: 8C159F02069F03069F1A0295055F2A029A039C019F37048D198A029F02069F03069F1A0295055F2A029A039C019F370491089F4401039F420205125F300202269F080200A0

3: Double: 2

TLV: 70458C159F02069F03069F1A0295055F2A029A039C019F37048D198A029F02069F03069F1A0295055F2A029A039C019F370491089F4401039F420205125F300202269F080200A0

2025/07/16 08:40:41: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:41: Line 368: TLV.getTLV arguments

ByteString: 70458C159F02069F03069F1A0295055F2A029A039C019F37048D198A029F02069F03069F1A0295055F2A029A039C019F370491089F4401039F420205125F300202269F080200A0

2025/07/16 08:40:41: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:41: Line 369: Function.TLV arguments
1: Int: 770

2: ByteString: 70458C159F02069F03069F1A0295055F2A029A039C019F37048D198A029F02069F03069F1A0295055F2A029A039C019F370491089F4401039F420205125F300202269F080200A0

3: Double: 1

TLV: 03024770458C159F02069F03069F1A0295055F2A029A039C019F37048D198A029F02069F03069F1A0295055F2A029A039C019F370491089F4401039F420205125F300202269F080200A0

2025/07/16 08:40:41: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:41: Line 369: TLV.getTLV arguments

ByteString: 03024770458C159F02069F03069F1A0295055F2A029A039C019F37048D198A029F02069F03069F1A0295055F2A029A039C019F370491089F4401039F420205125F300202269F080200A0

2025/07/16 08:40:41: Line 370: var bsRem = new ByteString();
2025/07/16 08:40:41: Line 370: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:41: Line 390: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //SFI
2025/07/16 08:40:41: Line 390: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 12

5: ByteString: 03024770458C159F02069F03069F1A0295055F2A029A039C019F37048D198A029F02069F03069F1A0295055F2A029A039C019F370491089F4401039F420205125F300202269F080200A0

2025/07/16 08:40:41: DCC9kServer IC Commands
0000: 80 E2 00 0C 4A 03 02 47-70 45 8C 15 9F 02 06 9F         J  GpE      
0010: 03 06 9F 1A 02 95 05 5F-2A 02 9A 03 9C 01 9F 37            _*      7
0020: 04 8D 19 8A 02 9F 02 06-9F 03 06 9F 1A 02 95 05                     
0030: 5F 2A 02 9A 03 9C 01 9F-37 04 91 08 9F 44 01 03     _*      7    D  
0040: 9F 42 02 05 12 5F 30 02-02 26 9F 08 02 00 A0 21      B   _0  &     !
0050: 53 57 02 2B 2A                                      SW +*           

2025/07/16 08:40:41: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:41: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:41: Line 368: Function.TLV arguments
1: Int: 112

2: ByteString: 5F280205129F0702C080

3: Double: 2

TLV: 700A5F280205129F0702C080

2025/07/16 08:40:41: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:41: Line 368: TLV.getTLV arguments

ByteString: 700A5F280205129F0702C080

2025/07/16 08:40:41: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:41: Line 369: Function.TLV arguments
1: Int: 1025

2: ByteString: 700A5F280205129F0702C080

3: Double: 1

TLV: 04010C700A5F280205129F0702C080

2025/07/16 08:40:41: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:41: Line 369: TLV.getTLV arguments

ByteString: 04010C700A5F280205129F0702C080

2025/07/16 08:40:41: Line 370: var bsRem = new ByteString();
2025/07/16 08:40:41: Line 370: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:41: Line 390: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //SFI
2025/07/16 08:40:41: Line 390: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 13

5: ByteString: 04010C700A5F280205129F0702C080

2025/07/16 08:40:41: DCC9kServer IC Commands
0000: 80 E2 00 0D 0F 04 01 0C-70 0A 5F 28 02 05 12 9F             p _(    
0010: 07 02 C0 80 21 53 57 02-2B 2A                           !SW +*      

2025/07/16 08:40:41: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:41: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:41: Line 368: Function.TLV arguments
1: Int: 112

2: ByteString: 5A0842637103001981065F2403300731

3: Double: 2

TLV: 70105A0842637103001981065F2403300731

2025/07/16 08:40:41: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:41: Line 368: TLV.getTLV arguments

ByteString: 70105A0842637103001981065F2403300731

2025/07/16 08:40:41: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:41: Line 369: Function.TLV arguments
1: Int: 1026

2: ByteString: 70105A0842637103001981065F2403300731

3: Double: 1

TLV: 04021270105A0842637103001981065F2403300731

2025/07/16 08:40:41: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:41: Line 369: TLV.getTLV arguments

ByteString: 04021270105A0842637103001981065F2403300731

2025/07/16 08:40:41: Line 370: var bsRem = new ByteString();
2025/07/16 08:40:41: Line 370: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:41: Line 390: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //SFI
2025/07/16 08:40:41: Line 390: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 14

5: ByteString: 04021270105A0842637103001981065F2403300731

2025/07/16 08:40:41: DCC9kServer IC Commands
0000: 80 E2 00 0E 15 04 02 12-70 10 5A 08 42 63 71 03             p Z Bcq 
0010: 00 19 81 06 5F 24 03 30-07 31 21 53 57 02 2B 2A         _$ 0 1!SW +*

2025/07/16 08:40:41: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:41: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:41: Line 368: Function.TLV arguments
1: Int: 112

2: ByteString: 9F4681F7AD0588351229C47BD01A311EE3517EFDCD589490F1E30FA5E583F2184C804B158A7B9969C931D856E378696F2325DE8A01F98BC3FE0010464F30CA9C004800CC9B9A7BBADCFB1034B8D56B851F4C4F1A07496CE5BD6F4B359B16A6D34E7ACDB8D62F979586E14F1FD7787DC889756D0D1AF57EBB63FED72FE0BC2F8D8A8C4A1A57BF8B72FC9AD795305A7D1844C884EB0056E4D8CE9E8E62FB235AEE5D2C543AB1435180FB99DF874E79599E6CD8F6E8FF51DF69EEB2F1B35D6C60C3AF98E564327EB807651015B8567744D32DF739CA3450F64A8BAE9F6BF32E0EFD48F5B12008C8127AB5D988C7CDE0EF9E9C57A6F68D5BCE48518F12

3: Double: 2

TLV: 7081FB9F4681F7AD0588351229C47BD01A311EE3517EFDCD589490F1E30FA5E583F2184C804B158A7B9969C931D856E378696F2325DE8A01F98BC3FE0010464F30CA9C004800CC9B9A7BBADCFB1034B8D56B851F4C4F1A07496CE5BD6F4B359B16A6D34E7ACDB8D62F979586E14F1FD7787DC889756D0D1AF57EBB63FED72FE0BC2F8D8A8C4A1A57BF8B72FC9AD795305A7D1844C884EB0056E4D8CE9E8E62FB235AEE5D2C543AB1435180FB99DF874E79599E6CD8F6E8FF51DF69EEB2F1B35D6C60C3AF98E564327EB807651015B8567744D32DF739CA3450F64A8BAE9F6BF32E0EFD48F5B12008C8127AB5D988C7CDE0EF9E9C57A6F68D5BCE48518F12

2025/07/16 08:40:41: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:41: Line 368: TLV.getTLV arguments

ByteString: 7081FB9F4681F7AD0588351229C47BD01A311EE3517EFDCD589490F1E30FA5E583F2184C804B158A7B9969C931D856E378696F2325DE8A01F98BC3FE0010464F30CA9C004800CC9B9A7BBADCFB1034B8D56B851F4C4F1A07496CE5BD6F4B359B16A6D34E7ACDB8D62F979586E14F1FD7787DC889756D0D1AF57EBB63FED72FE0BC2F8D8A8C4A1A57BF8B72FC9AD795305A7D1844C884EB0056E4D8CE9E8E62FB235AEE5D2C543AB1435180FB99DF874E79599E6CD8F6E8FF51DF69EEB2F1B35D6C60C3AF98E564327EB807651015B8567744D32DF739CA3450F64A8BAE9F6BF32E0EFD48F5B12008C8127AB5D988C7CDE0EF9E9C57A6F68D5BCE48518F12

2025/07/16 08:40:41: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:41: Line 369: Function.TLV arguments
1: Int: 1027

2: ByteString: 7081FB9F4681F7AD0588351229C47BD01A311EE3517EFDCD589490F1E30FA5E583F2184C804B158A7B9969C931D856E378696F2325DE8A01F98BC3FE0010464F30CA9C004800CC9B9A7BBADCFB1034B8D56B851F4C4F1A07496CE5BD6F4B359B16A6D34E7ACDB8D62F979586E14F1FD7787DC889756D0D1AF57EBB63FED72FE0BC2F8D8A8C4A1A57BF8B72FC9AD795305A7D1844C884EB0056E4D8CE9E8E62FB235AEE5D2C543AB1435180FB99DF874E79599E6CD8F6E8FF51DF69EEB2F1B35D6C60C3AF98E564327EB807651015B8567744D32DF739CA3450F64A8BAE9F6BF32E0EFD48F5B12008C8127AB5D988C7CDE0EF9E9C57A6F68D5BCE48518F12

3: Double: 1

TLV: 0403FE7081FB9F4681F7AD0588351229C47BD01A311EE3517EFDCD589490F1E30FA5E583F2184C804B158A7B9969C931D856E378696F2325DE8A01F98BC3FE0010464F30CA9C004800CC9B9A7BBADCFB1034B8D56B851F4C4F1A07496CE5BD6F4B359B16A6D34E7ACDB8D62F979586E14F1FD7787DC889756D0D1AF57EBB63FED72FE0BC2F8D8A8C4A1A57BF8B72FC9AD795305A7D1844C884EB0056E4D8CE9E8E62FB235AEE5D2C543AB1435180FB99DF874E79599E6CD8F6E8FF51DF69EEB2F1B35D6C60C3AF98E564327EB807651015B8567744D32DF739CA3450F64A8BAE9F6BF32E0EFD48F5B12008C8127AB5D988C7CDE0EF9E9C57A6F68D5BCE48518F12

2025/07/16 08:40:41: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:41: Line 369: TLV.getTLV arguments

ByteString: 0403FE7081FB9F4681F7AD0588351229C47BD01A311EE3517EFDCD589490F1E30FA5E583F2184C804B158A7B9969C931D856E378696F2325DE8A01F98BC3FE0010464F30CA9C004800CC9B9A7BBADCFB1034B8D56B851F4C4F1A07496CE5BD6F4B359B16A6D34E7ACDB8D62F979586E14F1FD7787DC889756D0D1AF57EBB63FED72FE0BC2F8D8A8C4A1A57BF8B72FC9AD795305A7D1844C884EB0056E4D8CE9E8E62FB235AEE5D2C543AB1435180FB99DF874E79599E6CD8F6E8FF51DF69EEB2F1B35D6C60C3AF98E564327EB807651015B8567744D32DF739CA3450F64A8BAE9F6BF32E0EFD48F5B12008C8127AB5D988C7CDE0EF9E9C57A6F68D5BCE48518F12

2025/07/16 08:40:41: Line 370: var bsRem = new ByteString();
2025/07/16 08:40:41: Line 370: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:41: Line 377: var bsFmt = new ByteString("FF00",HEX);
2025/07/16 08:40:41: Line 377: Function.ByteString arguments
1: String: FF00

2: Double: 4

ByteString: FF00

2025/07/16 08:40:41: Line 378: var bsDgi = bsDgi.bytes(0,2).concat(bsFmt).concat(bsDgi.bytes(2));
2025/07/16 08:40:41: Line 378: ByteString.bytes arguments
1: Int: 0

2: Int: 2

ByteString: 0403

2025/07/16 08:40:41: Line 378: var bsDgi = bsDgi.bytes(0,2).concat(bsFmt).concat(bsDgi.bytes(2));
2025/07/16 08:40:41: Line 378: ByteString.concat arguments
1: ByteString: FF00

ByteString: 0403FF00

2025/07/16 08:40:41: Line 378: var bsDgi = bsDgi.bytes(0,2).concat(bsFmt).concat(bsDgi.bytes(2));
2025/07/16 08:40:41: Line 378: ByteString.bytes arguments
1: Int: 2

ByteString: FE7081FB9F4681F7AD0588351229C47BD01A311EE3517EFDCD589490F1E30FA5E583F2184C804B158A7B9969C931D856E378696F2325DE8A01F98BC3FE0010464F30CA9C004800CC9B9A7BBADCFB1034B8D56B851F4C4F1A07496CE5BD6F4B359B16A6D34E7ACDB8D62F979586E14F1FD7787DC889756D0D1AF57EBB63FED72FE0BC2F8D8A8C4A1A57BF8B72FC9AD795305A7D1844C884EB0056E4D8CE9E8E62FB235AEE5D2C543AB1435180FB99DF874E79599E6CD8F6E8FF51DF69EEB2F1B35D6C60C3AF98E564327EB807651015B8567744D32DF739CA3450F64A8BAE9F6BF32E0EFD48F5B12008C8127AB5D988C7CDE0EF9E9C57A6F68D5BCE48518F12

2025/07/16 08:40:41: Line 378: var bsDgi = bsDgi.bytes(0,2).concat(bsFmt).concat(bsDgi.bytes(2));
2025/07/16 08:40:41: Line 378: ByteString.concat arguments
1: ByteString: FE7081FB9F4681F7AD0588351229C47BD01A311EE3517EFDCD589490F1E30FA5E583F2184C804B158A7B9969C931D856E378696F2325DE8A01F98BC3FE0010464F30CA9C004800CC9B9A7BBADCFB1034B8D56B851F4C4F1A07496CE5BD6F4B359B16A6D34E7ACDB8D62F979586E14F1FD7787DC889756D0D1AF57EBB63FED72FE0BC2F8D8A8C4A1A57BF8B72FC9AD795305A7D1844C884EB0056E4D8CE9E8E62FB235AEE5D2C543AB1435180FB99DF874E79599E6CD8F6E8FF51DF69EEB2F1B35D6C60C3AF98E564327EB807651015B8567744D32DF739CA3450F64A8BAE9F6BF32E0EFD48F5B12008C8127AB5D988C7CDE0EF9E9C57A6F68D5BCE48518F12

ByteString: 0403FF00FE7081FB9F4681F7AD0588351229C47BD01A311EE3517EFDCD589490F1E30FA5E583F2184C804B158A7B9969C931D856E378696F2325DE8A01F98BC3FE0010464F30CA9C004800CC9B9A7BBADCFB1034B8D56B851F4C4F1A07496CE5BD6F4B359B16A6D34E7ACDB8D62F979586E14F1FD7787DC889756D0D1AF57EBB63FED72FE0BC2F8D8A8C4A1A57BF8B72FC9AD795305A7D1844C884EB0056E4D8CE9E8E62FB235AEE5D2C543AB1435180FB99DF874E79599E6CD8F6E8FF51DF69EEB2F1B35D6C60C3AF98E564327EB807651015B8567744D32DF739CA3450F64A8BAE9F6BF32E0EFD48F5B12008C8127AB5D988C7CDE0EF9E9C57A6F68D5BCE48518F12

2025/07/16 08:40:41: Line 384: var bsRem = bsDgi.bytes(0xFF);
2025/07/16 08:40:41: Line 384: ByteString.bytes arguments
1: Int: 255

ByteString: 48518F12

2025/07/16 08:40:41: Line 385: var bsDgi = bsDgi.bytes(0,0xFF);
2025/07/16 08:40:41: Line 385: ByteString.bytes arguments
1: Int: 0

2: Int: 255

ByteString: 0403FF00FE7081FB9F4681F7AD0588351229C47BD01A311EE3517EFDCD589490F1E30FA5E583F2184C804B158A7B9969C931D856E378696F2325DE8A01F98BC3FE0010464F30CA9C004800CC9B9A7BBADCFB1034B8D56B851F4C4F1A07496CE5BD6F4B359B16A6D34E7ACDB8D62F979586E14F1FD7787DC889756D0D1AF57EBB63FED72FE0BC2F8D8A8C4A1A57BF8B72FC9AD795305A7D1844C884EB0056E4D8CE9E8E62FB235AEE5D2C543AB1435180FB99DF874E79599E6CD8F6E8FF51DF69EEB2F1B35D6C60C3AF98E564327EB807651015B8567744D32DF739CA3450F64A8BAE9F6BF32E0EFD48F5B12008C8127AB5D988C7CDE0EF9E9C57A6F68D5BCE

2025/07/16 08:40:41: Line 390: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //SFI
2025/07/16 08:40:41: Line 390: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 15

5: ByteString: 0403FF00FE7081FB9F4681F7AD0588351229C47BD01A311EE3517EFDCD589490F1E30FA5E583F2184C804B158A7B9969C931D856E378696F2325DE8A01F98BC3FE0010464F30CA9C004800CC9B9A7BBADCFB1034B8D56B851F4C4F1A07496CE5BD6F4B359B16A6D34E7ACDB8D62F979586E14F1FD7787DC889756D0D1AF57EBB63FED72FE0BC2F8D8A8C4A1A57BF8B72FC9AD795305A7D1844C884EB0056E4D8CE9E8E62FB235AEE5D2C543AB1435180FB99DF874E79599E6CD8F6E8FF51DF69EEB2F1B35D6C60C3AF98E564327EB807651015B8567744D32DF739CA3450F64A8BAE9F6BF32E0EFD48F5B12008C8127AB5D988C7CDE0EF9E9C57A6F68D5BCE

2025/07/16 08:40:41: DCC9kServer IC Commands
0000: 80 E2 00 0F FF 04 03 FF-00 FE 70 81 FB 9F 46 81               p   F 
0010: F7 AD 05 88 35 12 29 C4-7B D0 1A 31 1E E3 51 7E         5 ) {  1  Q~
0020: FD CD 58 94 90 F1 E3 0F-A5 E5 83 F2 18 4C 80 4B       X          L K
0030: 15 8A 7B 99 69 C9 31 D8-56 E3 78 69 6F 23 25 DE       { i 1 V xio#% 
0040: 8A 01 F9 8B C3 FE 00 10-46 4F 30 CA 9C 00 48 00             FO0   H 
0050: CC 9B 9A 7B BA DC FB 10-34 B8 D5 6B 85 1F 4C 4F        {    4  k  LO
0060: 1A 07 49 6C E5 BD 6F 4B-35 9B 16 A6 D3 4E 7A CD       Il  oK5    Nz 
0070: B8 D6 2F 97 95 86 E1 4F-1F D7 78 7D C8 89 75 6D       /    O  x}  um
0080: 0D 1A F5 7E BB 63 FE D7-2F E0 BC 2F 8D 8A 8C 4A        ~ c  /  /   J
0090: 1A 57 BF 8B 72 FC 9A D7-95 30 5A 7D 18 44 C8 84      W  r    0Z} D  
00A0: EB 00 56 E4 D8 CE 9E 8E-62 FB 23 5A EE 5D 2C 54       V     b #Z ],T
00B0: 3A B1 43 51 80 FB 99 DF-87 4E 79 59 9E 6C D8 F6     : CQ     NyY l  
00C0: E8 FF 51 DF 69 EE B2 F1-B3 5D 6C 60 C3 AF 98 E5       Q i    ]l`    
00D0: 64 32 7E B8 07 65 10 15-B8 56 77 44 D3 2D F7 39     d2~  e   VwD - 9
00E0: CA 34 50 F6 4A 8B AE 9F-6B F3 2E 0E FD 48 F5 B1      4P J   k .  H  
00F0: 20 08 C8 12 7A B5 D9 88-C7 CD E0 EF 9E 9C 57 A6         z         W 
0100: F6 8D 5B CE 21 53 57 02-2B 2A                         [ !SW +*      

2025/07/16 08:40:42: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:42: Line 392: card.sendApdu(0x80,0xE2,0x00,nP2++,bsRem); //SFI REM
2025/07/16 08:40:42: Line 392: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 16

5: ByteString: 48518F12

2025/07/16 08:40:42: DCC9kServer IC Commands
0000: 80 E2 00 10 04 48 51 8F-12 21 53 57 02 2B 2A             HQ  !SW +* 

2025/07/16 08:40:42: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:42: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:42: Line 368: Function.TLV arguments
1: Int: 112

2: ByteString: 8F010992230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0879F3201039F4701039F690701000000000000

3: Double: 2

TLV: 703A8F010992230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0879F3201039F4701039F690701000000000000

2025/07/16 08:40:42: Line 368: var bsDat = new TLV(0x70, arSfi[nCt][1], TLV.EMV).getTLV();
2025/07/16 08:40:42: Line 368: TLV.getTLV arguments

ByteString: 703A8F010992230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0879F3201039F4701039F690701000000000000

2025/07/16 08:40:42: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:42: Line 369: Function.TLV arguments
1: Int: 1028

2: ByteString: 703A8F010992230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0879F3201039F4701039F690701000000000000

3: Double: 1

TLV: 04043C703A8F010992230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0879F3201039F4701039F690701000000000000

2025/07/16 08:40:42: Line 369: var bsDgi = new TLV(arSfi[nCt][0], bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:42: Line 369: TLV.getTLV arguments

ByteString: 04043C703A8F010992230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0879F3201039F4701039F690701000000000000

2025/07/16 08:40:42: Line 370: var bsRem = new ByteString();
2025/07/16 08:40:42: Line 370: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:42: Line 390: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //SFI
2025/07/16 08:40:42: Line 390: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 17

5: ByteString: 04043C703A8F010992230321137104D45C78601C364D73096857528B00889F732963EFD05C07A1DE355BF7D0879F3201039F4701039F690701000000000000

2025/07/16 08:40:42: DCC9kServer IC Commands
0000: 80 E2 00 11 3F 04 04 3C-70 3A 8F 01 09 92 23 03         ?  <p:    # 
0010: 21 13 71 04 D4 5C 78 60-1C 36 4D 73 09 68 57 52     ! q  \x` 6Ms hWR
0020: 8B 00 88 9F 73 29 63 EF-D0 5C 07 A1 DE 35 5B F7         s)c  \   5[ 
0030: D0 87 9F 32 01 03 9F 47-01 03 9F 69 07 01 00 00        2   G   i    
0040: 00 00 00 00 21 53 57 02-2B 2A                           !SW +*      

2025/07/16 08:40:42: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:42: Line 398: var bsDgi = new TLV(0x9200, art.getVariableValue("tCtP3i_9F10_Iad"), TLV.DGI).getTLV();
2025/07/16 08:40:42: Line 398: Art.getVariableValue arguments
1: String: tCtP3i_9F10_Iad

ByteString: 9F100706011203000000

2025/07/16 08:40:42: Line 398: var bsDgi = new TLV(0x9200, art.getVariableValue("tCtP3i_9F10_Iad"), TLV.DGI).getTLV();
2025/07/16 08:40:42: Line 398: Function.TLV arguments
1: Int: 37376

2: ByteString: 9F100706011203000000

3: Double: 1

TLV: 92000A9F100706011203000000

2025/07/16 08:40:42: Line 398: var bsDgi = new TLV(0x9200, art.getVariableValue("tCtP3i_9F10_Iad"), TLV.DGI).getTLV();
2025/07/16 08:40:42: Line 398: TLV.getTLV arguments

ByteString: 92000A9F100706011203000000

2025/07/16 08:40:42: Line 399: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //9200 (GenAC: Iss App Data)
2025/07/16 08:40:42: Line 399: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 18

5: ByteString: 92000A9F100706011203000000

2025/07/16 08:40:42: DCC9kServer IC Commands
0000: 80 E2 00 12 0D 92 00 0A-9F 10 07 06 01 12 03 00                     
0010: 00 00 21 53 57 02 2B 2A-                              !SW +*        

2025/07/16 08:40:42: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:42: Line 403: var bsAtc = art.getVariableValue("xCtCki_9F36_Atc");
2025/07/16 08:40:42: Line 403: Art.getVariableValue arguments
1: String: xCtCki_9F36_Atc

ByteString: 0000

2025/07/16 08:40:42: Line 404: if ((bsAtc.length > 0)&&(bsAtc.toUnsigned() > 0))
2025/07/16 08:40:42: Line 404: ByteString.toUnsigned arguments

Double: 0

2025/07/16 08:40:42: Line 407: var bsAtc = new ByteString();
2025/07/16 08:40:42: Line 407: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:42: Line 409: var bsLogFmt = art.getVariableValue("xCtCki_9F4F_LogFmt");
2025/07/16 08:40:42: Line 409: Art.getVariableValue arguments
1: String: xCtCki_9F4F_LogFmt

ByteString: 

2025/07/16 08:40:42: Line 431: var bsDat =        art.getVariableValue("tCtP3i_9F51_ApCuc")
2025/07/16 08:40:42: Line 431: Art.getVariableValue arguments
1: String: tCtP3i_9F51_ApCuc

ByteString: 9F51020512

2025/07/16 08:40:42: Line 432: .concat(art.getVariableValue("tCtP3i_9F52_Ada"))
2025/07/16 08:40:42: Line 432: Art.getVariableValue arguments
1: String: tCtP3i_9F52_Ada

ByteString: 9F5206822800000000

2025/07/16 08:40:42: Line 432: .concat(art.getVariableValue("tCtP3i_9F52_Ada"))
2025/07/16 08:40:42: Line 432: ByteString.concat arguments
1: ByteString: 9F5206822800000000

ByteString: 9F510205129F5206822800000000

2025/07/16 08:40:42: Line 433: .concat(art.getVariableValue("tCtP3i_9F53_Ctli"))
2025/07/16 08:40:42: Line 433: Art.getVariableValue arguments
1: String: tCtP3i_9F53_Ctli

ByteString: 9F530100

2025/07/16 08:40:42: Line 433: .concat(art.getVariableValue("tCtP3i_9F53_Ctli"))
2025/07/16 08:40:42: Line 433: ByteString.concat arguments
1: ByteString: 9F530100

ByteString: 9F510205129F52068228000000009F530100

2025/07/16 08:40:42: Line 434: .concat(art.getVariableValue("tCtP3i_9F54_Cttal"))
2025/07/16 08:40:42: Line 434: Art.getVariableValue arguments
1: String: tCtP3i_9F54_Cttal

ByteString: 9F5406000000000000

2025/07/16 08:40:42: Line 434: .concat(art.getVariableValue("tCtP3i_9F54_Cttal"))
2025/07/16 08:40:42: Line 434: ByteString.concat arguments
1: ByteString: 9F5406000000000000

ByteString: 9F510205129F52068228000000009F5301009F5406000000000000

2025/07/16 08:40:42: Line 435: .concat(art.getVariableValue("tCtP3i_9F56_Iai"))
2025/07/16 08:40:42: Line 435: Art.getVariableValue arguments
1: String: tCtP3i_9F56_Iai

ByteString: 9F560180

2025/07/16 08:40:42: Line 435: .concat(art.getVariableValue("tCtP3i_9F56_Iai"))
2025/07/16 08:40:42: Line 435: ByteString.concat arguments
1: ByteString: 9F560180

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F560180

2025/07/16 08:40:42: Line 436: .concat(art.getVariableValue("tCtP3i_9F57_IsCoc"))
2025/07/16 08:40:42: Line 436: Art.getVariableValue arguments
1: String: tCtP3i_9F57_IsCoc

ByteString: 9F57020512

2025/07/16 08:40:42: Line 436: .concat(art.getVariableValue("tCtP3i_9F57_IsCoc"))
2025/07/16 08:40:42: Line 436: ByteString.concat arguments
1: ByteString: 9F57020512

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F57020512

2025/07/16 08:40:42: Line 437: .concat(art.getVariableValue("tCtP3i_9F58_Lcol"))
2025/07/16 08:40:42: Line 437: Art.getVariableValue arguments
1: String: tCtP3i_9F58_Lcol

ByteString: 9F580100

2025/07/16 08:40:42: Line 437: .concat(art.getVariableValue("tCtP3i_9F58_Lcol"))
2025/07/16 08:40:42: Line 437: ByteString.concat arguments
1: ByteString: 9F580100

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F580100

2025/07/16 08:40:42: Line 438: .concat(art.getVariableValue("tCtP3i_9F59_Ucol"))
2025/07/16 08:40:42: Line 438: Art.getVariableValue arguments
1: String: tCtP3i_9F59_Ucol

ByteString: 9F590100

2025/07/16 08:40:42: Line 438: .concat(art.getVariableValue("tCtP3i_9F59_Ucol"))
2025/07/16 08:40:42: Line 438: ByteString.concat arguments
1: ByteString: 9F590100

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F590100

2025/07/16 08:40:42: Line 439: .concat(art.getVariableValue("tCtP3i_9F5C_Cttaul"))
2025/07/16 08:40:42: Line 439: Art.getVariableValue arguments
1: String: tCtP3i_9F5C_Cttaul

ByteString: 9F5C06000000000000

2025/07/16 08:40:42: Line 439: .concat(art.getVariableValue("tCtP3i_9F5C_Cttaul"))
2025/07/16 08:40:42: Line 439: ByteString.concat arguments
1: ByteString: 9F5C06000000000000

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C06000000000000

2025/07/16 08:40:42: Line 440: .concat(art.getVariableValue("tCtP3i_9F5E_Ctiul"))
2025/07/16 08:40:42: Line 440: Art.getVariableValue arguments
1: String: tCtP3i_9F5E_Ctiul

ByteString: 9F5E0101

2025/07/16 08:40:42: Line 440: .concat(art.getVariableValue("tCtP3i_9F5E_Ctiul"))
2025/07/16 08:40:42: Line 440: ByteString.concat arguments
1: ByteString: 9F5E0101

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E0101

2025/07/16 08:40:42: Line 441: .concat(art.getVariableValue("tCtP3i_9F63_Ociv"))
2025/07/16 08:40:42: Line 441: Art.getVariableValue arguments
1: String: tCtP3i_9F63_Ociv

ByteString: 

2025/07/16 08:40:42: Line 441: .concat(art.getVariableValue("tCtP3i_9F63_Ociv"))
2025/07/16 08:40:42: Line 441: ByteString.concat arguments
1: ByteString: 

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E0101

2025/07/16 08:40:42: Line 442: .concat(art.getVariableValue("tCtP3i_9F67_MsdOf"))
2025/07/16 08:40:42: Line 442: Art.getVariableValue arguments
1: String: tCtP3i_9F67_MsdOf

ByteString: 

2025/07/16 08:40:42: Line 442: .concat(art.getVariableValue("tCtP3i_9F67_MsdOf"))
2025/07/16 08:40:42: Line 442: ByteString.concat arguments
1: ByteString: 

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E0101

2025/07/16 08:40:42: Line 443: .concat(art.getVariableValue("tCtP3i_9F68_Cap"))
2025/07/16 08:40:42: Line 443: Art.getVariableValue arguments
1: String: tCtP3i_9F68_Cap

ByteString: 9F68040080D000

2025/07/16 08:40:42: Line 443: .concat(art.getVariableValue("tCtP3i_9F68_Cap"))
2025/07/16 08:40:42: Line 443: ByteString.concat arguments
1: ByteString: 9F68040080D000

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E01019F68040080D000

2025/07/16 08:40:42: Line 444: .concat(art.getVariableValue("tCtP3i_9F6B_Ccl"))
2025/07/16 08:40:42: Line 444: Art.getVariableValue arguments
1: String: tCtP3i_9F6B_Ccl

ByteString: 

2025/07/16 08:40:42: Line 444: .concat(art.getVariableValue("tCtP3i_9F6B_Ccl"))
2025/07/16 08:40:42: Line 444: ByteString.concat arguments
1: ByteString: 

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E01019F68040080D000

2025/07/16 08:40:42: Line 445: .concat(art.getVariableValue("tCtP3i_9F6D_VlpRt"))
2025/07/16 08:40:42: Line 445: Art.getVariableValue arguments
1: String: tCtP3i_9F6D_VlpRt

ByteString: 

2025/07/16 08:40:42: Line 445: .concat(art.getVariableValue("tCtP3i_9F6D_VlpRt"))
2025/07/16 08:40:42: Line 445: ByteString.concat arguments
1: ByteString: 

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E01019F68040080D000

2025/07/16 08:40:42: Line 446: .concat(art.getVariableValue("tCtP3i_9F6E_Ffi"))
2025/07/16 08:40:42: Line 446: Art.getVariableValue arguments
1: String: tCtP3i_9F6E_Ffi

ByteString: 9F6E0420700000

2025/07/16 08:40:42: Line 446: .concat(art.getVariableValue("tCtP3i_9F6E_Ffi"))
2025/07/16 08:40:42: Line 446: ByteString.concat arguments
1: ByteString: 9F6E0420700000

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E01019F68040080D0009F6E0420700000

2025/07/16 08:40:42: Line 447: .concat(art.getVariableValue("tCtP3i_9F72_Ctc"))
2025/07/16 08:40:42: Line 447: Art.getVariableValue arguments
1: String: tCtP3i_9F72_Ctc

ByteString: 9F720100

2025/07/16 08:40:42: Line 447: .concat(art.getVariableValue("tCtP3i_9F72_Ctc"))
2025/07/16 08:40:42: Line 447: ByteString.concat arguments
1: ByteString: 9F720100

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E01019F68040080D0009F6E04207000009F720100

2025/07/16 08:40:42: Line 448: .concat(art.getVariableValue("tCtP3i_9F73_Ccf"))
2025/07/16 08:40:42: Line 448: Art.getVariableValue arguments
1: String: tCtP3i_9F73_Ccf

ByteString: 

2025/07/16 08:40:42: Line 448: .concat(art.getVariableValue("tCtP3i_9F73_Ccf"))
2025/07/16 08:40:42: Line 448: ByteString.concat arguments
1: ByteString: 

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E01019F68040080D0009F6E04207000009F720100

2025/07/16 08:40:42: Line 449: .concat(art.getVariableValue("tCtP3i_9F77_VlpFl"))
2025/07/16 08:40:42: Line 449: Art.getVariableValue arguments
1: String: tCtP3i_9F77_VlpFl

ByteString: 

2025/07/16 08:40:42: Line 449: .concat(art.getVariableValue("tCtP3i_9F77_VlpFl"))
2025/07/16 08:40:42: Line 449: ByteString.concat arguments
1: ByteString: 

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E01019F68040080D0009F6E04207000009F720100

2025/07/16 08:40:42: Line 450: .concat(art.getVariableValue("tCtP3i_9F78_VlpStl"))
2025/07/16 08:40:42: Line 450: Art.getVariableValue arguments
1: String: tCtP3i_9F78_VlpStl

ByteString: 

2025/07/16 08:40:42: Line 450: .concat(art.getVariableValue("tCtP3i_9F78_VlpStl"))
2025/07/16 08:40:42: Line 450: ByteString.concat arguments
1: ByteString: 

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E01019F68040080D0009F6E04207000009F720100

2025/07/16 08:40:42: Line 451: .concat(art.getVariableValue("tCtP3i_9F79_VlpAf"))
2025/07/16 08:40:42: Line 451: Art.getVariableValue arguments
1: String: tCtP3i_9F79_VlpAf

ByteString: 

2025/07/16 08:40:42: Line 451: .concat(art.getVariableValue("tCtP3i_9F79_VlpAf"))
2025/07/16 08:40:42: Line 451: ByteString.concat arguments
1: ByteString: 

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E01019F68040080D0009F6E04207000009F720100

2025/07/16 08:40:42: Line 452: .concat(art.getVariableValue("tCtP3i_9F7C_Ced"))
2025/07/16 08:40:42: Line 452: Art.getVariableValue arguments
1: String: tCtP3i_9F7C_Ced

ByteString: 

2025/07/16 08:40:42: Line 452: .concat(art.getVariableValue("tCtP3i_9F7C_Ced"))
2025/07/16 08:40:42: Line 452: ByteString.concat arguments
1: ByteString: 

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E01019F68040080D0009F6E04207000009F720100

2025/07/16 08:40:42: Line 453: .concat(art.getVariableValue("tCtP3i_9F5D_Aosa")); // 9F5D is last [PERSO_SPEC] pg 65
2025/07/16 08:40:42: Line 453: Art.getVariableValue arguments
1: String: tCtP3i_9F5D_Aosa

ByteString: 

2025/07/16 08:40:42: Line 453: .concat(art.getVariableValue("tCtP3i_9F5D_Aosa")); // 9F5D is last [PERSO_SPEC] pg 65
2025/07/16 08:40:42: Line 453: ByteString.concat arguments
1: ByteString: 

ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E01019F68040080D0009F6E04207000009F720100

2025/07/16 08:40:42: Line 457: var bsDgi = new TLV(0x3001, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:42: Line 457: Function.TLV arguments
1: Int: 12289

2: ByteString: 9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E01019F68040080D0009F6E04207000009F720100

3: Double: 1

TLV: 30014B9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E01019F68040080D0009F6E04207000009F720100

2025/07/16 08:40:42: Line 457: var bsDgi = new TLV(0x3001, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:42: Line 457: TLV.getTLV arguments

ByteString: 30014B9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E01019F68040080D0009F6E04207000009F720100

2025/07/16 08:40:42: Line 458: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //3001
2025/07/16 08:40:42: Line 458: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 19

5: ByteString: 30014B9F510205129F52068228000000009F5301009F54060000000000009F5601809F570205129F5801009F5901009F5C060000000000009F5E01019F68040080D0009F6E04207000009F720100

2025/07/16 08:40:42: DCC9kServer IC Commands
0000: 80 E2 00 13 4E 30 01 4B-9F 51 02 05 12 9F 52 06         N0 K Q    R 
0010: 82 28 00 00 00 00 9F 53-01 00 9F 54 06 00 00 00      (     S   T    
0020: 00 00 00 9F 56 01 80 9F-57 02 05 12 9F 58 01 00         V   W    X  
0030: 9F 59 01 00 9F 5C 06 00-00 00 00 00 00 9F 5E 01      Y   \        ^ 
0040: 01 9F 68 04 00 80 D0 00-9F 6E 04 20 70 00 00 9F       h      n  p   
0050: 72 01 00 21 53 57 02 2B-2A                          r  !SW +*       

2025/07/16 08:40:42: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:42: Line 464: var bsDat =        art.getVariableValue("tCtP3i_DF11_ClTc")
2025/07/16 08:40:42: Line 464: Art.getVariableValue arguments
1: String: tCtP3i_DF11_ClTc

ByteString: 

2025/07/16 08:40:42: Line 465: .concat(art.getVariableValue("tCtP3i_DF21_ClTcll"))
2025/07/16 08:40:42: Line 465: Art.getVariableValue arguments
1: String: tCtP3i_DF21_ClTcll

ByteString: 

2025/07/16 08:40:42: Line 465: .concat(art.getVariableValue("tCtP3i_DF21_ClTcll"))
2025/07/16 08:40:42: Line 465: ByteString.concat arguments
1: ByteString: 

ByteString: 

2025/07/16 08:40:42: Line 466: .concat(art.getVariableValue("tCtP3i_DF31_ClTcul"))
2025/07/16 08:40:42: Line 466: Art.getVariableValue arguments
1: String: tCtP3i_DF31_ClTcul

ByteString: 

2025/07/16 08:40:42: Line 466: .concat(art.getVariableValue("tCtP3i_DF31_ClTcul"))
2025/07/16 08:40:42: Line 466: ByteString.concat arguments
1: ByteString: 

ByteString: 

2025/07/16 08:40:42: Line 467: .concat(art.getVariableValue("tCtP3i_DF41_VlpStl"))
2025/07/16 08:40:42: Line 467: Art.getVariableValue arguments
1: String: tCtP3i_DF41_VlpStl

ByteString: 

2025/07/16 08:40:42: Line 467: .concat(art.getVariableValue("tCtP3i_DF41_VlpStl"))
2025/07/16 08:40:42: Line 467: ByteString.concat arguments
1: ByteString: 

ByteString: 

2025/07/16 08:40:42: Line 468: .concat(art.getVariableValue("tCtP3i_DF51_VlpAf"))
2025/07/16 08:40:42: Line 468: Art.getVariableValue arguments
1: String: tCtP3i_DF51_VlpAf

ByteString: 

2025/07/16 08:40:42: Line 468: .concat(art.getVariableValue("tCtP3i_DF51_VlpAf"))
2025/07/16 08:40:42: Line 468: ByteString.concat arguments
1: ByteString: 

ByteString: 

2025/07/16 08:40:42: Line 469: .concat(art.getVariableValue("tCtP3i_DF61_VlpRt"))
2025/07/16 08:40:42: Line 469: Art.getVariableValue arguments
1: String: tCtP3i_DF61_VlpRt

ByteString: 

2025/07/16 08:40:42: Line 469: .concat(art.getVariableValue("tCtP3i_DF61_VlpRt"))
2025/07/16 08:40:42: Line 469: ByteString.concat arguments
1: ByteString: 

ByteString: 

2025/07/16 08:40:42: Line 470: .concat(art.getVariableValue("tCtP3i_DF71_VlpFl"));
2025/07/16 08:40:42: Line 470: Art.getVariableValue arguments
1: String: tCtP3i_DF71_VlpFl

ByteString: 

2025/07/16 08:40:42: Line 470: .concat(art.getVariableValue("tCtP3i_DF71_VlpFl"));
2025/07/16 08:40:42: Line 470: ByteString.concat arguments
1: ByteString: 

ByteString: 

2025/07/16 08:40:42: Line 484: var bsDat =        art.getVariableValue("tCtP3i_DF11_Ctc1")
2025/07/16 08:40:42: Line 484: Art.getVariableValue arguments
1: String: tCtP3i_DF11_Ctc1

ByteString: 

2025/07/16 08:40:42: Line 485: .concat(art.getVariableValue("tCtP3i_DF21_Ctcl1"))
2025/07/16 08:40:42: Line 485: Art.getVariableValue arguments
1: String: tCtP3i_DF21_Ctcl1

ByteString: DF210100

2025/07/16 08:40:42: Line 485: .concat(art.getVariableValue("tCtP3i_DF21_Ctcl1"))
2025/07/16 08:40:42: Line 485: ByteString.concat arguments
1: ByteString: DF210100

ByteString: DF210100

2025/07/16 08:40:42: Line 486: .concat(art.getVariableValue("tCtP3i_DF31_Ctcul1"));
2025/07/16 08:40:42: Line 486: Art.getVariableValue arguments
1: String: tCtP3i_DF31_Ctcul1

ByteString: DF310100

2025/07/16 08:40:42: Line 486: .concat(art.getVariableValue("tCtP3i_DF31_Ctcul1"));
2025/07/16 08:40:42: Line 486: ByteString.concat arguments
1: ByteString: DF310100

ByteString: DF210100DF310100

2025/07/16 08:40:42: Line 492: var bsDgi = new TLV(0x3F56, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:42: Line 492: Function.TLV arguments
1: Int: 16214

2: ByteString: DF210100DF310100

3: Double: 1

TLV: 3F5608DF210100DF310100

2025/07/16 08:40:42: Line 492: var bsDgi = new TLV(0x3F56, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:42: Line 492: TLV.getTLV arguments

ByteString: 3F5608DF210100DF310100

2025/07/16 08:40:42: Line 493: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //3F56 (Counters Data Template - VIS)
2025/07/16 08:40:42: Line 493: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 20

5: ByteString: 3F5608DF210100DF310100

2025/07/16 08:40:42: DCC9kServer IC Commands
0000: 80 E2 00 14 0B 3F 56 08-DF 21 01 00 DF 31 01 00          ?V  !   1  
0010: 21 53 57 02 2B 2A                                   !SW +*          

2025/07/16 08:40:42: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:42: Line 500: var bsDat =        art.getVariableValue("tCtP3i_DF11_Ctci1")
2025/07/16 08:40:42: Line 500: Art.getVariableValue arguments
1: String: tCtP3i_DF11_Ctci1

ByteString: 

2025/07/16 08:40:42: Line 501: .concat(art.getVariableValue("tCtP3i_DF21_Ctcil1"))
2025/07/16 08:40:42: Line 501: Art.getVariableValue arguments
1: String: tCtP3i_DF21_Ctcil1

ByteString: 

2025/07/16 08:40:42: Line 501: .concat(art.getVariableValue("tCtP3i_DF21_Ctcil1"))
2025/07/16 08:40:42: Line 501: ByteString.concat arguments
1: ByteString: 

ByteString: 

2025/07/16 08:40:42: Line 502: .concat(art.getVariableValue("tCtP3i_DF31_Ctiul1"))
2025/07/16 08:40:42: Line 502: Art.getVariableValue arguments
1: String: tCtP3i_DF31_Ctiul1

ByteString: 

2025/07/16 08:40:42: Line 502: .concat(art.getVariableValue("tCtP3i_DF31_Ctiul1"))
2025/07/16 08:40:42: Line 502: ByteString.concat arguments
1: ByteString: 

ByteString: 

2025/07/16 08:40:42: Line 503: .concat(art.getVariableValue("tCtP3i_DF51_Ctcic1"))
2025/07/16 08:40:42: Line 503: Art.getVariableValue arguments
1: String: tCtP3i_DF51_Ctcic1

ByteString: 

2025/07/16 08:40:42: Line 503: .concat(art.getVariableValue("tCtP3i_DF51_Ctcic1"))
2025/07/16 08:40:42: Line 503: ByteString.concat arguments
1: ByteString: 

ByteString: 

2025/07/16 08:40:42: Line 504: .concat(art.getVariableValue("tCtP3i_DF61_Ctcicl1"));
2025/07/16 08:40:42: Line 504: Art.getVariableValue arguments
1: String: tCtP3i_DF61_Ctcicl1

ByteString: 

2025/07/16 08:40:42: Line 504: .concat(art.getVariableValue("tCtP3i_DF61_Ctcicl1"));
2025/07/16 08:40:42: Line 504: ByteString.concat arguments
1: ByteString: 

ByteString: 

2025/07/16 08:40:42: Line 518: var bsDat =        art.getVariableValue("tCtP3i_DF11_Ctta1")
2025/07/16 08:40:42: Line 518: Art.getVariableValue arguments
1: String: tCtP3i_DF11_Ctta1

ByteString: 

2025/07/16 08:40:42: Line 519: .concat(art.getVariableValue("tCtP3i_DF21_Cttal1"))
2025/07/16 08:40:42: Line 519: Art.getVariableValue arguments
1: String: tCtP3i_DF21_Cttal1

ByteString: 

2025/07/16 08:40:42: Line 519: .concat(art.getVariableValue("tCtP3i_DF21_Cttal1"))
2025/07/16 08:40:42: Line 519: ByteString.concat arguments
1: ByteString: 

ByteString: 

2025/07/16 08:40:42: Line 520: .concat(art.getVariableValue("tCtP3i_DF31_Cttaul1"))
2025/07/16 08:40:42: Line 520: Art.getVariableValue arguments
1: String: tCtP3i_DF31_Cttaul1

ByteString: 

2025/07/16 08:40:42: Line 520: .concat(art.getVariableValue("tCtP3i_DF31_Cttaul1"))
2025/07/16 08:40:42: Line 520: ByteString.concat arguments
1: ByteString: 

ByteString: 

2025/07/16 08:40:42: Line 521: .concat(art.getVariableValue("tCtP3i_DF41_CttaNc"))
2025/07/16 08:40:42: Line 521: Art.getVariableValue arguments
1: String: tCtP3i_DF41_CttaNc

ByteString: 

2025/07/16 08:40:42: Line 521: .concat(art.getVariableValue("tCtP3i_DF41_CttaNc"))
2025/07/16 08:40:42: Line 521: ByteString.concat arguments
1: ByteString: 

ByteString: 

2025/07/16 08:40:42: Line 522: .concat(art.getVariableValue("tCtP3i_DF51_CttalNc"));
2025/07/16 08:40:42: Line 522: Art.getVariableValue arguments
1: String: tCtP3i_DF51_CttalNc

ByteString: 

2025/07/16 08:40:42: Line 522: .concat(art.getVariableValue("tCtP3i_DF51_CttalNc"));
2025/07/16 08:40:42: Line 522: ByteString.concat arguments
1: ByteString: 

ByteString: 

2025/07/16 08:40:42: Line 536: var bsDat = art.getVariableValue("tCtP3i_DF11_ProCtl1");
2025/07/16 08:40:42: Line 536: Art.getVariableValue arguments
1: String: tCtP3i_DF11_ProCtl1

ByteString: 

2025/07/16 08:40:42: Line 550: var bsDat = art.getVariableValue("tCtP3i_DF11_AipAfl1");
2025/07/16 08:40:42: Line 550: Art.getVariableValue arguments
1: String: tCtP3i_DF11_AipAfl1

ByteString: 

2025/07/16 08:40:42: Line 564: var bsDat =        art.getVariableValue("tCtP3i_DF01_ApCap")
2025/07/16 08:40:42: Line 564: Art.getVariableValue arguments
1: String: tCtP3i_DF01_ApCap

ByteString: 

2025/07/16 08:40:42: Line 565: .concat(art.getVariableValue("tCtP3i_DF02_Psfe"));
2025/07/16 08:40:42: Line 565: Art.getVariableValue arguments
1: String: tCtP3i_DF02_Psfe

ByteString: 

2025/07/16 08:40:42: Line 565: .concat(art.getVariableValue("tCtP3i_DF02_Psfe"));
2025/07/16 08:40:42: Line 565: ByteString.concat arguments
1: ByteString: 

ByteString: 

2025/07/16 08:40:42: Line 581: var bsA5 =        art.getVariableValue("tCtP3i_50_ApLb")
2025/07/16 08:40:42: Line 581: Art.getVariableValue arguments
1: String: tCtP3i_50_ApLb

ByteString: 500A56697361204465626974

2025/07/16 08:40:42: Line 582: .concat(art.getVariableValue("tCtP3i_87_Api"))
2025/07/16 08:40:42: Line 582: Art.getVariableValue arguments
1: String: tCtP3i_87_Api

ByteString: 870101

2025/07/16 08:40:42: Line 582: .concat(art.getVariableValue("tCtP3i_87_Api"))
2025/07/16 08:40:42: Line 582: ByteString.concat arguments
1: ByteString: 870101

ByteString: 500A56697361204465626974870101

2025/07/16 08:40:42: Line 583: .concat(art.getVariableValue("tCtP3i_5F2D_Lng"))
2025/07/16 08:40:42: Line 583: Art.getVariableValue arguments
1: String: tCtP3i_5F2D_Lng

ByteString: 5F2D02656E

2025/07/16 08:40:42: Line 583: .concat(art.getVariableValue("tCtP3i_5F2D_Lng"))
2025/07/16 08:40:42: Line 583: ByteString.concat arguments
1: ByteString: 5F2D02656E

ByteString: 500A566973612044656269748701015F2D02656E

2025/07/16 08:40:42: Line 584: .concat(art.getVariableValue("tCtP3i_9F11_Icti"))
2025/07/16 08:40:42: Line 584: Art.getVariableValue arguments
1: String: tCtP3i_9F11_Icti

ByteString: 9F110101

2025/07/16 08:40:42: Line 584: .concat(art.getVariableValue("tCtP3i_9F11_Icti"))
2025/07/16 08:40:42: Line 584: ByteString.concat arguments
1: ByteString: 9F110101

ByteString: 500A566973612044656269748701015F2D02656E9F110101

2025/07/16 08:40:42: Line 585: .concat(art.getVariableValue("tCtP3i_9F12_Apn"))
2025/07/16 08:40:42: Line 585: Art.getVariableValue arguments
1: String: tCtP3i_9F12_Apn

ByteString: 9F120A56697361204465626974

2025/07/16 08:40:42: Line 585: .concat(art.getVariableValue("tCtP3i_9F12_Apn"))
2025/07/16 08:40:42: Line 585: ByteString.concat arguments
1: ByteString: 9F120A56697361204465626974

ByteString: 500A566973612044656269748701015F2D02656E9F1101019F120A56697361204465626974

2025/07/16 08:40:42: Line 586: .concat(art.getVariableValue("tCtP3i_9F38_Pdol"))
2025/07/16 08:40:42: Line 586: Art.getVariableValue arguments
1: String: tCtP3i_9F38_Pdol

ByteString: 9F38189F66049F02069F03069F1A0295055F2A029A039C019F3704

2025/07/16 08:40:42: Line 586: .concat(art.getVariableValue("tCtP3i_9F38_Pdol"))
2025/07/16 08:40:42: Line 586: ByteString.concat arguments
1: ByteString: 9F38189F66049F02069F03069F1A0295055F2A029A039C019F3704

ByteString: 500A566973612044656269748701015F2D02656E9F1101019F120A566973612044656269749F38189F66049F02069F03069F1A0295055F2A029A039C019F3704

2025/07/16 08:40:42: Line 587: .concat(art.getVariableValue("tCtP3i_BF0C_FciDd"));
2025/07/16 08:40:42: Line 587: Art.getVariableValue arguments
1: String: tCtP3i_BF0C_FciDd

ByteString: 

2025/07/16 08:40:42: Line 587: .concat(art.getVariableValue("tCtP3i_BF0C_FciDd"));
2025/07/16 08:40:42: Line 587: ByteString.concat arguments
1: ByteString: 

ByteString: 500A566973612044656269748701015F2D02656E9F1101019F120A566973612044656269749F38189F66049F02069F03069F1A0295055F2A029A039C019F3704

2025/07/16 08:40:42: Line 588: var bsDat = new TLV(0xA5, bsA5, TLV.EMV).getTLV();
2025/07/16 08:40:42: Line 588: Function.TLV arguments
1: Int: 165

2: ByteString: 500A566973612044656269748701015F2D02656E9F1101019F120A566973612044656269749F38189F66049F02069F03069F1A0295055F2A029A039C019F3704

3: Double: 2

TLV: A540500A566973612044656269748701015F2D02656E9F1101019F120A566973612044656269749F38189F66049F02069F03069F1A0295055F2A029A039C019F3704

2025/07/16 08:40:42: Line 588: var bsDat = new TLV(0xA5, bsA5, TLV.EMV).getTLV();
2025/07/16 08:40:42: Line 588: TLV.getTLV arguments

ByteString: A540500A566973612044656269748701015F2D02656E9F1101019F120A566973612044656269749F38189F66049F02069F03069F1A0295055F2A029A039C019F3704

2025/07/16 08:40:42: Line 592: var bsDgi = new TLV(0x9102, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:42: Line 592: Function.TLV arguments
1: Int: 37122

2: ByteString: A540500A566973612044656269748701015F2D02656E9F1101019F120A566973612044656269749F38189F66049F02069F03069F1A0295055F2A029A039C019F3704

3: Double: 1

TLV: 910242A540500A566973612044656269748701015F2D02656E9F1101019F120A566973612044656269749F38189F66049F02069F03069F1A0295055F2A029A039C019F3704

2025/07/16 08:40:42: Line 592: var bsDgi = new TLV(0x9102, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:42: Line 592: TLV.getTLV arguments

ByteString: 910242A540500A566973612044656269748701015F2D02656E9F1101019F120A566973612044656269749F38189F66049F02069F03069F1A0295055F2A029A039C019F3704

2025/07/16 08:40:42: Line 593: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //9102 (FCI VSDC)
2025/07/16 08:40:42: Line 593: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 21

5: ByteString: 910242A540500A566973612044656269748701015F2D02656E9F1101019F120A566973612044656269749F38189F66049F02069F03069F1A0295055F2A029A039C019F3704

2025/07/16 08:40:42: DCC9kServer IC Commands
0000: 80 E2 00 15 45 91 02 42-A5 40 50 0A 56 69 73 61         E  B @P Visa
0010: 20 44 65 62 69 74 87 01-01 5F 2D 02 65 6E 9F 11      Debit   _- en  
0020: 01 01 9F 12 0A 56 69 73-61 20 44 65 62 69 74 9F          Visa Debit 
0030: 38 18 9F 66 04 9F 02 06-9F 03 06 9F 1A 02 95 05     8  f            
0040: 5F 2A 02 9A 03 9C 01 9F-37 04 21 53 57 02 2B 2A     _*      7 !SW +*

2025/07/16 08:40:43: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:43: Line 602: var bsA5 =        art.getVariableValue("tCtP3i_50_ApLb")
2025/07/16 08:40:43: Line 602: Art.getVariableValue arguments
1: String: tCtP3i_50_ApLb

ByteString: 500A56697361204465626974

2025/07/16 08:40:43: Line 603: .concat(art.getVariableValue("tCtP3i_87_Api"))
2025/07/16 08:40:43: Line 603: Art.getVariableValue arguments
1: String: tCtP3i_87_Api

ByteString: 870101

2025/07/16 08:40:43: Line 603: .concat(art.getVariableValue("tCtP3i_87_Api"))
2025/07/16 08:40:43: Line 603: ByteString.concat arguments
1: ByteString: 870101

ByteString: 500A56697361204465626974870101

2025/07/16 08:40:43: Line 604: .concat(art.getVariableValue("tCtP3i_5F2D_Lng"))
2025/07/16 08:40:43: Line 604: Art.getVariableValue arguments
1: String: tCtP3i_5F2D_Lng

ByteString: 5F2D02656E

2025/07/16 08:40:43: Line 604: .concat(art.getVariableValue("tCtP3i_5F2D_Lng"))
2025/07/16 08:40:43: Line 604: ByteString.concat arguments
1: ByteString: 5F2D02656E

ByteString: 500A566973612044656269748701015F2D02656E

2025/07/16 08:40:43: Line 605: .concat(art.getVariableValue("tClP3i_9F38_Pdol"))
2025/07/16 08:40:43: Line 605: Art.getVariableValue arguments
1: String: tClP3i_9F38_Pdol

ByteString: 9F38189F66049F02069F03069F1A0295055F2A029A039C019F3704

2025/07/16 08:40:43: Line 605: .concat(art.getVariableValue("tClP3i_9F38_Pdol"))
2025/07/16 08:40:43: Line 605: ByteString.concat arguments
1: ByteString: 9F38189F66049F02069F03069F1A0295055F2A029A039C019F3704

ByteString: 500A566973612044656269748701015F2D02656E9F38189F66049F02069F03069F1A0295055F2A029A039C019F3704

2025/07/16 08:40:43: Line 606: .concat(art.getVariableValue("tClP3i_BF0C_FciDd"));
2025/07/16 08:40:43: Line 606: Art.getVariableValue arguments
1: String: tClP3i_BF0C_FciDd

ByteString: BF0C089F5A056005120512

2025/07/16 08:40:43: Line 606: .concat(art.getVariableValue("tClP3i_BF0C_FciDd"));
2025/07/16 08:40:43: Line 606: ByteString.concat arguments
1: ByteString: BF0C089F5A056005120512

ByteString: 500A566973612044656269748701015F2D02656E9F38189F66049F02069F03069F1A0295055F2A029A039C019F3704BF0C089F5A056005120512

2025/07/16 08:40:43: Line 607: var bsDat = new TLV(0xA5, bsA5, TLV.EMV).getTLV();
2025/07/16 08:40:43: Line 607: Function.TLV arguments
1: Int: 165

2: ByteString: 500A566973612044656269748701015F2D02656E9F38189F66049F02069F03069F1A0295055F2A029A039C019F3704BF0C089F5A056005120512

3: Double: 2

TLV: A53A500A566973612044656269748701015F2D02656E9F38189F66049F02069F03069F1A0295055F2A029A039C019F3704BF0C089F5A056005120512

2025/07/16 08:40:43: Line 607: var bsDat = new TLV(0xA5, bsA5, TLV.EMV).getTLV();
2025/07/16 08:40:43: Line 607: TLV.getTLV arguments

ByteString: A53A500A566973612044656269748701015F2D02656E9F38189F66049F02069F03069F1A0295055F2A029A039C019F3704BF0C089F5A056005120512

2025/07/16 08:40:43: Line 611: var bsDgi = new TLV(0x9103, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:43: Line 611: Function.TLV arguments
1: Int: 37123

2: ByteString: A53A500A566973612044656269748701015F2D02656E9F38189F66049F02069F03069F1A0295055F2A029A039C019F3704BF0C089F5A056005120512

3: Double: 1

TLV: 91033CA53A500A566973612044656269748701015F2D02656E9F38189F66049F02069F03069F1A0295055F2A029A039C019F3704BF0C089F5A056005120512

2025/07/16 08:40:43: Line 611: var bsDgi = new TLV(0x9103, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:43: Line 611: TLV.getTLV arguments

ByteString: 91033CA53A500A566973612044656269748701015F2D02656E9F38189F66049F02069F03069F1A0295055F2A029A039C019F3704BF0C089F5A056005120512

2025/07/16 08:40:43: Line 612: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //9103 (FCI Contactless)
2025/07/16 08:40:43: Line 612: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 22

5: ByteString: 91033CA53A500A566973612044656269748701015F2D02656E9F38189F66049F02069F03069F1A0295055F2A029A039C019F3704BF0C089F5A056005120512

2025/07/16 08:40:43: DCC9kServer IC Commands
0000: 80 E2 00 16 3F 91 03 3C-A5 3A 50 0A 56 69 73 61         ?  < :P Visa
0010: 20 44 65 62 69 74 87 01-01 5F 2D 02 65 6E 9F 38      Debit   _- en 8
0020: 18 9F 66 04 9F 02 06 9F-03 06 9F 1A 02 95 05 5F       f            _
0030: 2A 02 9A 03 9C 01 9F 37-04 BF 0C 08 9F 5A 05 60     *      7     Z `
0040: 05 12 05 12 21 53 57 02-2B 2A                           !SW +*      

2025/07/16 08:40:43: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:43: Line 653: var bsPk = art.getVariableValue("xCtP3i_1F70_IcPk");
2025/07/16 08:40:43: Line 653: Art.getVariableValue arguments
1: String: xCtP3i_1F70_IcPk

ByteString: 8B050AC36A80B0BE484D4A8CC83FD08373C02FFF2DA90E35C25E0027E64AADF550B02F4766234236A374F7811732838B4C6D8CE3C74B3008A434E6381BA194F8CC9BB183A2234895D99D6B701D82B3DC5B56F515BDA83F930F66A1A97FC4652DF8D19E7833744A287505CA280FE56F1D2B34E38CF2B70F519B79139DC92AF51BA2467B22BDF9EB7D194809CD140F31B06C67F4F67A2DD63DCCFDF43C73AACF4C59CE55B9FA21C976F5E0E8C3B487D862E58422040E09B4D7632C6B531BF06B9DAD46FE89A351E14BAE2D1ED1B1E322AB8F076C38499C83716293BD0EC0EE5F1765C4F01DABC137D9227D4D21C53EC436BAB946C55FEC4F431FEEDECA57AB7C013F01AE2AE7B60F7653F1FEB4221BB1628CBA402E3CB157CC80CC5D183298CD021F4A7E315930595F4489D71791E3E08D333F33AE5A6280FB5255D534A5AE52E9ED62A6930EF8DA835A48E4786B6B355404630584AA6C6DFF9B77AEDE8E7EE8E1E163B7FFEAD0BC9B8A02581741ACBCA4D51B79A4AD52ADFFDADEEEF9C84F995CF56F735B120AE9EB91DAF2C63C0CA13A4C1E2110A3D261D519A96609879EFABA9523E0EC52425417E2C942A3D6A7E58C68661ED1E0800190F6DF77A3B16E17F5073921B679C690B0382B7EB36D7AD0E6A4B2ABAAD7B3FF2C818293BBDF465512B5B007FEEFC53F8B

2025/07/16 08:40:43: Line 654: var kPk = new KeyPair(bsPk, c_bsKek);
2025/07/16 08:40:43: Line 654: Function.KeyPair arguments
1: ByteString: 8B050AC36A80B0BE484D4A8CC83FD08373C02FFF2DA90E35C25E0027E64AADF550B02F4766234236A374F7811732838B4C6D8CE3C74B3008A434E6381BA194F8CC9BB183A2234895D99D6B701D82B3DC5B56F515BDA83F930F66A1A97FC4652DF8D19E7833744A287505CA280FE56F1D2B34E38CF2B70F519B79139DC92AF51BA2467B22BDF9EB7D194809CD140F31B06C67F4F67A2DD63DCCFDF43C73AACF4C59CE55B9FA21C976F5E0E8C3B487D862E58422040E09B4D7632C6B531BF06B9DAD46FE89A351E14BAE2D1ED1B1E322AB8F076C38499C83716293BD0EC0EE5F1765C4F01DABC137D9227D4D21C53EC436BAB946C55FEC4F431FEEDECA57AB7C013F01AE2AE7B60F7653F1FEB4221BB1628CBA402E3CB157CC80CC5D183298CD021F4A7E315930595F4489D71791E3E08D333F33AE5A6280FB5255D534A5AE52E9ED62A6930EF8DA835A48E4786B6B355404630584AA6C6DFF9B77AEDE8E7EE8E1E163B7FFEAD0BC9B8A02581741ACBCA4D51B79A4AD52ADFFDADEEEF9C84F995CF56F735B120AE9EB91DAF2C63C0CA13A4C1E2110A3D261D519A96609879EFABA9523E0EC52425417E2C942A3D6A7E58C68661ED1E0800190F6DF77A3B16E17F5073921B679C690B0382B7EB36D7AD0E6A4B2ABAAD7B3FF2C818293BBDF465512B5B007FEEFC53F8B

2: ByteString

KeyPair: CCBB93799F14423934C989E09107C65161302C03072D0EC2FAB1EEACC831DBA5F3B7E0B4BA27E728214FEA096C1E5FBFA744CBB3C1BE78641DC8BD6A19EF397D2C5926079B6CEDA13CA1422E60A691B874BF2232CB18B4DD06D5F03D92B85D95

2025/07/16 08:40:43: Line 658: var bsBufMax = art.getVariableValue("xCt_PkBufMax");// Max buffer
2025/07/16 08:40:43: Line 658: Art.getVariableValue arguments
1: String: xCt_PkBufMax

ByteString: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

2025/07/16 08:40:43: Line 659: var nPkSiz = kPk.getSize()/16;                      // Divide by 16 because getSize gives mod bit length (8 bits/byte) plus mod is 2 times size of component => 8x2=16
2025/07/16 08:40:43: Line 659: KeyPair.getSize arguments

Int: 768

2025/07/16 08:40:43: Line 662: var bsBuf = bsBufMax.left(nPkSiz).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:43: Line 662: ByteString.left arguments
1: Int: 48

ByteString: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

2025/07/16 08:40:43: Line 662: var bsBuf = bsBufMax.left(nPkSiz).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:43: Line 662: ByteString.pad arguments
1: Double: 37

ByteString: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000

2025/07/16 08:40:43: Line 666: var bsDek = c_kSkuDek.getComponent(Key.DES);
2025/07/16 08:40:43: Line 666: Key.getComponent arguments
1: Double: 393216

ByteString

2025/07/16 08:40:43: Line 667: var bsNa = new ByteString();
2025/07/16 08:40:43: Line 667: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:43: Line 668: var bsEnc = new ByteString();
2025/07/16 08:40:43: Line 668: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:43: Line 671: art.execute("MultosSecureRecord", "CLR-ECB", "RSA-U",  bsBuf, bsDek, "", "", "", 0, 0, bsNa, bsNa, bsEnc);
2025/07/16 08:40:43: Line 671: Art.execute arguments
1: String: MultosSecureRecord

2: String: CLR-ECB

3: String: RSA-U

4: ByteString: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000

5: ByteString

6: String: 

7: String: 

8: String: 

9: Int: 0

10: Int: 0

11: ByteString: 

12: ByteString: 

13: ByteString: 

2025/07/16 08:40:43: Line 671: art.execute("MultosSecureRecord", "CLR-ECB", "RSA-U",  bsBuf, bsDek, "", "", "", 0, 0, bsNa, bsNa, bsEnc);
2025/07/16 08:40:43: Line 671: ByteString.toString arguments

String

Int: 0

2025/07/16 08:40:43: Line 672: var bsDgi = new TLV(0x8201, bsEnc, TLV.DGI).getTLV();
2025/07/16 08:40:43: Line 672: Function.TLV arguments
1: Int: 33281

2: ByteString: E40607D8224E066FB420FA2234FFC2C483AEBE6EED8862CD40C26C046C07868A66065D9E4F86A2E3D6A6F3A2A7BB78F1F9DF4AC45A01FA56

3: Double: 1

TLV: 820138E40607D8224E066FB420FA2234FFC2C483AEBE6EED8862CD40C26C046C07868A66065D9E4F86A2E3D6A6F3A2A7BB78F1F9DF4AC45A01FA56

2025/07/16 08:40:43: Line 672: var bsDgi = new TLV(0x8201, bsEnc, TLV.DGI).getTLV();
2025/07/16 08:40:43: Line 672: TLV.getTLV arguments

ByteString: 820138E40607D8224E066FB420FA2234FFC2C483AEBE6EED8862CD40C26C046C07868A66065D9E4F86A2E3D6A6F3A2A7BB78F1F9DF4AC45A01FA56

2025/07/16 08:40:43: Line 673: card.sendApdu(0x80,0xE2,0x60,nP2++,bsDgi); //8201 (U)
2025/07/16 08:40:43: Line 673: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 96

4: Int: 23

5: ByteString: 820138E40607D8224E066FB420FA2234FFC2C483AEBE6EED8862CD40C26C046C07868A66065D9E4F86A2E3D6A6F3A2A7BB78F1F9DF4AC45A01FA56

2025/07/16 08:40:43: DCC9kServer IC Commands
0000: 80 E2 60 17 3B 82 01 38-E4 06 07 D8 22 4E 06 6F       ` ;  8    "N o
0010: B4 20 FA 22 34 FF C2 C4-83 AE BE 6E ED 88 62 CD        "4      n  b 
0020: 40 C2 6C 04 6C 07 86 8A-66 06 5D 9E 4F 86 A2 E3     @ l l   f ] O   
0030: D6 A6 F3 A2 A7 BB 78 F1-F9 DF 4A C4 5A 01 FA 56           x   J Z  V
0040: 21 53 57 02 2B 2A                                   !SW +*          

2025/07/16 08:40:43: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:43: Line 676: art.execute("MultosSecureRecord", "CLR-ECB", "RSA-DQ", bsBuf, bsDek, "", "", "", 0, 0, bsNa, bsNa, bsEnc);
2025/07/16 08:40:43: Line 676: Art.execute arguments
1: String: MultosSecureRecord

2: String: CLR-ECB

3: String: RSA-DQ

4: ByteString: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000

5: ByteString

6: String: 

7: String: 

8: String: 

9: Int: 0

10: Int: 0

11: ByteString: 75

12: ByteString: 75

13: ByteString: E40607D8224E066FB420FA2234FFC2C483AEBE6EED8862CD40C26C046C07868A66065D9E4F86A2E3D6A6F3A2A7BB78F1F9DF4AC45A01FA56

2025/07/16 08:40:43: Line 676: art.execute("MultosSecureRecord", "CLR-ECB", "RSA-DQ", bsBuf, bsDek, "", "", "", 0, 0, bsNa, bsNa, bsEnc);
2025/07/16 08:40:43: Line 676: ByteString.toString arguments

String: 

Int: 0

2025/07/16 08:40:43: Line 677: var bsDgi = new TLV(0x8202, bsEnc, TLV.DGI).getTLV();
2025/07/16 08:40:43: Line 677: Function.TLV arguments
1: Int: 33282

2: ByteString: 6CD0FC9F4440CAB6C35D57D36B73F223E3862BBC886E621E47D78929793F82A8C8687BFB2856C221911B66257BBAD999F9DF4AC45A01FA56

3: Double: 1

TLV: 8202386CD0FC9F4440CAB6C35D57D36B73F223E3862BBC886E621E47D78929793F82A8C8687BFB2856C221911B66257BBAD999F9DF4AC45A01FA56

2025/07/16 08:40:43: Line 677: var bsDgi = new TLV(0x8202, bsEnc, TLV.DGI).getTLV();
2025/07/16 08:40:43: Line 677: TLV.getTLV arguments

ByteString: 8202386CD0FC9F4440CAB6C35D57D36B73F223E3862BBC886E621E47D78929793F82A8C8687BFB2856C221911B66257BBAD999F9DF4AC45A01FA56

2025/07/16 08:40:43: Line 678: card.sendApdu(0x80,0xE2,0x60,nP2++,bsDgi); //8202 (DQ)
2025/07/16 08:40:43: Line 678: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 96

4: Int: 24

5: ByteString: 8202386CD0FC9F4440CAB6C35D57D36B73F223E3862BBC886E621E47D78929793F82A8C8687BFB2856C221911B66257BBAD999F9DF4AC45A01FA56

2025/07/16 08:40:43: DCC9kServer IC Commands
0000: 80 E2 60 18 3B 82 02 38-6C D0 FC 9F 44 40 CA B6       ` ;  8l   D@  
0010: C3 5D 57 D3 6B 73 F2 23-E3 86 2B BC 88 6E 62 1E      ]W ks #  +  nb 
0020: 47 D7 89 29 79 3F 82 A8-C8 68 7B FB 28 56 C2 21     G  )y?   h{ (V !
0030: 91 1B 66 25 7B BA D9 99-F9 DF 4A C4 5A 01 FA 56       f%{     J Z  V
0040: 21 53 57 02 2B 2A                                   !SW +*          

2025/07/16 08:40:43: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:43: Line 681: art.execute("MultosSecureRecord", "CLR-ECB", "RSA-DP", bsBuf, bsDek, "", "", "", 0, 0, bsNa, bsNa, bsEnc);
2025/07/16 08:40:43: Line 681: Art.execute arguments
1: String: MultosSecureRecord

2: String: CLR-ECB

3: String: RSA-DP

4: ByteString: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000

5: ByteString: 018800000018F7D60412BF80EB7443C4A806C1D392D17D682B25C3CD9F8C000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010100000107000000010101000001080000000101010000010A0000000101000000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C000000010100000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333930313030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B00000001010080000128000000010100000000030000000000000001700000000101010000000000000000000008F4178D32E8A8FD8E00000018588E699C00A79A8615BD5FA24AD1A6222B7ADB33A7E3BF01

6: String: 

7: String: 

8: String: 

9: Int: 0

10: Int: 0

11: ByteString: 93

12: ByteString: 93

13: ByteString: 6CD0FC9F4440CAB6C35D57D36B73F223E3862BBC886E621E47D78929793F82A8C8687BFB2856C221911B66257BBAD999F9DF4AC45A01FA56

2025/07/16 08:40:43: Line 681: art.execute("MultosSecureRecord", "CLR-ECB", "RSA-DP", bsBuf, bsDek, "", "", "", 0, 0, bsNa, bsNa, bsEnc);
2025/07/16 08:40:43: Line 681: ByteString.toString arguments

String

Int: 0

2025/07/16 08:40:43: Line 682: var bsDgi = new TLV(0x8203, bsEnc, TLV.DGI).getTLV();
2025/07/16 08:40:43: Line 682: Function.TLV arguments
1: Int: 33283

2: ByteString: F1A3E7F26D32C1E5C885A2A0EDBD6BB0D6DB3DBF819A3245C80C44E83D9BC1B7912694C18CD529A1B7318D922D8D7E1AF9DF4AC45A01FA56

3: Double: 1

TLV: 820338F1A3E7F26D32C1E5C885A2A0EDBD6BB0D6DB3DBF819A3245C80C44E83D9BC1B7912694C18CD529A1B7318D922D8D7E1AF9DF4AC45A01FA56

2025/07/16 08:40:43: Line 682: var bsDgi = new TLV(0x8203, bsEnc, TLV.DGI).getTLV();
2025/07/16 08:40:43: Line 682: TLV.getTLV arguments

ByteString: 820338F1A3E7F26D32C1E5C885A2A0EDBD6BB0D6DB3DBF819A3245C80C44E83D9BC1B7912694C18CD529A1B7318D922D8D7E1AF9DF4AC45A01FA56

2025/07/16 08:40:43: Line 683: card.sendApdu(0x80,0xE2,0x60,nP2++,bsDgi); //8203 (DP)
2025/07/16 08:40:43: Line 683: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 96

4: Int: 25

5: ByteString: 820338F1A3E7F26D32C1E5C885A2A0EDBD6BB0D6DB3DBF819A3245C80C44E83D9BC1B7912694C18CD529A1B7318D922D8D7E1AF9DF4AC45A01FA56

2025/07/16 08:40:43: DCC9kServer IC Commands
0000: 80 E2 60 19 3B 82 03 38-F1 A3 E7 F2 6D 32 C1 E5       ` ;  8    m2  
0010: C8 85 A2 A0 ED BD 6B B0-D6 DB 3D BF 81 9A 32 45           k   =   2E
0020: C8 0C 44 E8 3D 9B C1 B7-91 26 94 C1 8C D5 29 A1       D =    &    ) 
0030: B7 31 8D 92 2D 8D 7E 1A-F9 DF 4A C4 5A 01 FA 56      1  - ~   J Z  V
0040: 21 53 57 02 2B 2A                                   !SW +*          

2025/07/16 08:40:43: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:43: Line 686: art.execute("MultosSecureRecord", "CLR-ECB", "RSA-Q",  bsBuf, bsDek, "", "", "", 0, 0, bsNa, bsNa, bsEnc);
2025/07/16 08:40:43: Line 686: Art.execute arguments
1: String: MultosSecureRecord

2: String: CLR-ECB

3: String: RSA-Q

4: ByteString: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000

5: ByteString

6: String: 

7: String: 

8: String: 

9: Int: 0

10: Int: 0

11: ByteString: 2D

12: ByteString: 2D

13: ByteString: F1A3E7F26D32C1E5C885A2A0EDBD6BB0D6DB3DBF819A3245C80C44E83D9BC1B7912694C18CD529A1B7318D922D8D7E1AF9DF4AC45A01FA56

2025/07/16 08:40:43: Line 686: art.execute("MultosSecureRecord", "CLR-ECB", "RSA-Q",  bsBuf, bsDek, "", "", "", 0, 0, bsNa, bsNa, bsEnc);
2025/07/16 08:40:43: Line 686: ByteString.toString arguments

String

Int: 0

2025/07/16 08:40:43: Line 687: var bsDgi = new TLV(0x8204, bsEnc, TLV.DGI).getTLV();
2025/07/16 08:40:43: Line 687: Function.TLV arguments
1: Int: 33284

2: ByteString: 3A08CEE09BB8D55AF882645A24490BDE737959F25015C55F7CDE0FD492D6EB7DB0FC8E6F2D880C3BC6D8A94D3DD6AACDF9DF4AC45A01FA56

3: Double: 1

TLV: 8204383A08CEE09BB8D55AF882645A24490BDE737959F25015C55F7CDE0FD492D6EB7DB0FC8E6F2D880C3BC6D8A94D3DD6AACDF9DF4AC45A01FA56

2025/07/16 08:40:43: Line 687: var bsDgi = new TLV(0x8204, bsEnc, TLV.DGI).getTLV();
2025/07/16 08:40:43: Line 687: TLV.getTLV arguments

ByteString: 8204383A08CEE09BB8D55AF882645A24490BDE737959F25015C55F7CDE0FD492D6EB7DB0FC8E6F2D880C3BC6D8A94D3DD6AACDF9DF4AC45A01FA56

2025/07/16 08:40:43: Line 688: card.sendApdu(0x80,0xE2,0x60,nP2++,bsDgi); //8204 (Q)
2025/07/16 08:40:43: Line 688: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 96

4: Int: 26

5: ByteString: 8204383A08CEE09BB8D55AF882645A24490BDE737959F25015C55F7CDE0FD492D6EB7DB0FC8E6F2D880C3BC6D8A94D3DD6AACDF9DF4AC45A01FA56

2025/07/16 08:40:43: DCC9kServer IC Commands
0000: 80 E2 60 1A 3B 82 04 38-3A 08 CE E0 9B B8 D5 5A       ` ;  8:      Z
0010: F8 82 64 5A 24 49 0B DE-73 79 59 F2 50 15 C5 5F       dZ$I  syY P  _
0020: 7C DE 0F D4 92 D6 EB 7D-B0 FC 8E 6F 2D 88 0C 3B     |      }   o-  ;
0030: C6 D8 A9 4D 3D D6 AA CD-F9 DF 4A C4 5A 01 FA 56        M=     J Z  V
0040: 21 53 57 02 2B 2A                                   !SW +*          

2025/07/16 08:40:44: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:44: Line 691: art.execute("MultosSecureRecord", "CLR-ECB", "RSA-P",  bsBuf, bsDek, "", "", "", 0, 0, bsNa, bsNa, bsEnc);
2025/07/16 08:40:44: Line 691: Art.execute arguments
1: String: MultosSecureRecord

2: String: CLR-ECB

3: String: RSA-P

4: ByteString: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000

5: ByteString

6: String: 

7: String: 

8: String: 

9: Int: 0

10: Int: 0

11: ByteString: 90

12: ByteString: 90

13: ByteString: 3A08CEE09BB8D55AF882645A24490BDE737959F25015C55F7CDE0FD492D6EB7DB0FC8E6F2D880C3BC6D8A94D3DD6AACDF9DF4AC45A01FA56

2025/07/16 08:40:44: Line 691: art.execute("MultosSecureRecord", "CLR-ECB", "RSA-P",  bsBuf, bsDek, "", "", "", 0, 0, bsNa, bsNa, bsEnc);
2025/07/16 08:40:44: Line 691: ByteString.toString arguments

String: 

Int: 0

2025/07/16 08:40:44: Line 692: var bsDgi = new TLV(0x8205, bsEnc, TLV.DGI).getTLV();
2025/07/16 08:40:44: Line 692: Function.TLV arguments
1: Int: 33285

2: ByteString: AC8ED0E3A6BE9C91AD5C51402A110D4263FBE44153C12A696E071A87DAC9464A3CE59A977F97DDF6E8A34444BCFBB993F9DF4AC45A01FA56

3: Double: 1

TLV: 820538AC8ED0E3A6BE9C91AD5C51402A110D4263FBE44153C12A696E071A87DAC9464A3CE59A977F97DDF6E8A34444BCFBB993F9DF4AC45A01FA56

2025/07/16 08:40:44: Line 692: var bsDgi = new TLV(0x8205, bsEnc, TLV.DGI).getTLV();
2025/07/16 08:40:44: Line 692: TLV.getTLV arguments

ByteString: 820538AC8ED0E3A6BE9C91AD5C51402A110D4263FBE44153C12A696E071A87DAC9464A3CE59A977F97DDF6E8A34444BCFBB993F9DF4AC45A01FA56

2025/07/16 08:40:44: Line 693: card.sendApdu(0x80,0xE2,0x60,nP2++,bsDgi); //8205 (P)
2025/07/16 08:40:44: Line 693: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 96

4: Int: 27

5: ByteString: 820538AC8ED0E3A6BE9C91AD5C51402A110D4263FBE44153C12A696E071A87DAC9464A3CE59A977F97DDF6E8A34444BCFBB993F9DF4AC45A01FA56

2025/07/16 08:40:44: DCC9kServer IC Commands
0000: 80 E2 60 1B 3B 82 05 38-AC 8E D0 E3 A6 BE 9C 91       ` ;  8        
0010: AD 5C 51 40 2A 11 0D 42-63 FB E4 41 53 C1 2A 69      \Q@*  Bc  AS *i
0020: 6E 07 1A 87 DA C9 46 4A-3C E5 9A 97 7F 97 DD F6     n     FJ<      
0030: E8 A3 44 44 BC FB B9 93-F9 DF 4A C4 5A 01 FA 56       DD      J Z  V
0040: 21 53 57 02 2B 2A                                   !SW +*          

2025/07/16 08:40:44: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:44: Line 600: function c_KeyBlkTranslate(sCat, kDek, nMeth)
2025/07/16 08:40:44: Line 600: UBJSGlobalClass.c_KeyBlkTranslate arguments
1: String: xCtP3i_1F20_Kac

2: Key

3: Double: 5

2025/07/16 08:40:44: Line 609: new ByteString("!"+"!+"+CALL+"("+sCat+", "+kDek.getComponent(Key.DES)+", "+nMeth+")",ASCII); // Log begin func
2025/07/16 08:40:44: Line 609: Key.getComponent arguments
1: Double: 393216

ByteString

2025/07/16 08:40:44: Line 609: new ByteString("!"+"!+"+CALL+"("+sCat+", "+kDek.getComponent(Key.DES)+", "+nMeth+")",ASCII); // Log begin func
2025/07/16 08:40:44: Line 609: ByteString.valueOf arguments

ByteString

2025/07/16 08:40:44: Line 609: new ByteString("!"+"!+"+CALL+"("+sCat+", "+kDek.getComponent(Key.DES)+", "+nMeth+")",ASCII); // Log begin func
2025/07/16 08:40:44: Line 609: ByteString.toString arguments

String

2025/07/16 08:40:44: Line 609: new ByteString("!"+"!+"+CALL+"("+sCat+", "+kDek.getComponent(Key.DES)+", "+nMeth+")",ASCII); // Log begin func
2025/07/16 08:40:44: Line 609: Function.ByteString arguments
1: String: !!+000863.c_KeyBlkTranslate(xCtP3i_1F20_Kac

2: Double: 1

ByteString

2025/07/16 08:40:44: Line 613: var oOut = new Object();
2025/07/16 08:40:44: Line 613: Function.Object arguments

Object: [object Object]

2025/07/16 08:40:44: Line 522: function c_KeyBlkImport(sCat, nTyp)
2025/07/16 08:40:44: Line 522: UBJSGlobalClass.c_KeyBlkImport arguments
1: String: xCtP3i_1F20_Kac

2: Int: 3

2025/07/16 08:40:44: Line 531: new ByteString("!"+"!+"+CALL+"("+sCat+", "+nTyp+")",ASCII); // Log begin func
2025/07/16 08:40:44: Line 531: Function.ByteString arguments
1: String: !!+000863.c_KeyBlkImport(xCtP3i_1F20_Kac, 3)

2: Double: 1

ByteString: 21212B3030303836332E635F4B6579426C6B496D706F7274287843745033695F314632305F4B61632C203329

2025/07/16 08:40:44: Line 537: var bsBlk = art.getVariableValue(sCat);
2025/07/16 08:40:44: Line 537: Art.getVariableValue arguments
1: String: xCtP3i_1F20_Kac

ByteString: DF0110A1DC090B44EC5163C8CE1E7AE89FFAD4DF02015D

2025/07/16 08:40:44: Line 541: if (!bsBlk.left(2).equals(new ByteString("DF01",HEX))) // Find key tag
2025/07/16 08:40:44: Line 541: ByteString.left arguments
1: Int: 2

ByteString: DF01

2025/07/16 08:40:44: Line 541: if (!bsBlk.left(2).equals(new ByteString("DF01",HEX))) // Find key tag
2025/07/16 08:40:44: Line 541: Function.ByteString arguments
1: String: DF01

2: Double: 4

ByteString: DF01

2025/07/16 08:40:44: Line 541: if (!bsBlk.left(2).equals(new ByteString("DF01",HEX))) // Find key tag
2025/07/16 08:40:44: Line 541: ByteString.equals arguments
1: ByteString: DF01

Int: 1

2025/07/16 08:40:44: Line 543: var tlBlk = new TLVList(bsBlk, TLV.EMV);
2025/07/16 08:40:44: Line 543: Function.TLVList arguments
1: ByteString: DF0110A1DC090B44EC5163C8CE1E7AE89FFAD4DF02015D

2: Double: 2

TLVList: DF0110A1DC090B44EC5163C8CE1E7AE89FFAD4DF02015D

2025/07/16 08:40:44: Line 544: var tKey = tlBlk.find(0xDF01);
2025/07/16 08:40:44: Line 544: TLVList.find arguments
1: Int: 57089

TLV: DF0110A1DC090B44EC5163C8CE1E7AE89FFAD4

2025/07/16 08:40:44: Line 545: if ((tKey == null)||(tKey.getValue().length%8 != 0))
2025/07/16 08:40:44: Line 545: TLV.getValue arguments

ByteString: A1DC090B44EC5163C8CE1E7AE89FFAD4

2025/07/16 08:40:44: Line 547: var bsKey = tKey.getValue();
2025/07/16 08:40:44: Line 547: TLV.getValue arguments

ByteString: A1DC090B44EC5163C8CE1E7AE89FFAD4

2025/07/16 08:40:44: Line 551: var tKcv = tlBlk.find(0xDF02);
2025/07/16 08:40:44: Line 551: TLVList.find arguments
1: Int: 57090

TLV: DF02015D

2025/07/16 08:40:44: Line 554: var bsBlkKcv = tKcv.getValue();
2025/07/16 08:40:44: Line 554: TLV.getValue arguments

ByteString: 5D

2025/07/16 08:40:44: Line 559: var bsKek = c_kKek.getComponent(Key.DES);
2025/07/16 08:40:44: Line 559: Key.getComponent arguments
1: Double: 393216

ByteString

2025/07/16 08:40:44: Line 560: var bsTok = new ByteString();
2025/07/16 08:40:44: Line 560: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:44: Line 561: art.execute("UBDesEcb", sMode, bsKek, bsKey, bsTok);
2025/07/16 08:40:44: Line 561: Art.execute arguments
1: String: UBDesEcb

2: String: DecryptKey3{T3}

3: ByteString

4: ByteString: A1DC090B44EC5163C8CE1E7AE89FFAD4

5: ByteString: 

Int: 0

2025/07/16 08:40:44: Line 562: var kKey = new Key(bsTok);
2025/07/16 08:40:44: Line 562: Function.Key arguments
1: ByteString

Key

2025/07/16 08:40:44: Line 566: var bsKcv = kKey.getKcv(Key.EIGHTZEROS).left(bsBlkKcv.length);
2025/07/16 08:40:44: Line 566: Key.getKcv arguments
1: Double: 1048576

ByteString: 5DCEF345D52FEA0C

2025/07/16 08:40:44: Line 566: var bsKcv = kKey.getKcv(Key.EIGHTZEROS).left(bsBlkKcv.length);
2025/07/16 08:40:44: Line 566: ByteString.left arguments
1: Int: 1

ByteString: 5D

2025/07/16 08:40:44: Line 567: if (bsKcv.toString() != bsBlkKcv.toString())
2025/07/16 08:40:44: Line 567: ByteString.toString arguments

String: 5D

2025/07/16 08:40:44: Line 567: if (bsKcv.toString() != bsBlkKcv.toString())
2025/07/16 08:40:44: Line 567: ByteString.toString arguments

String: 5D

2025/07/16 08:40:44: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 577: Key.getComponent arguments
1: Double: 393216

ByteString

2025/07/16 08:40:44: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 577: ByteString.toString arguments

String

2025/07/16 08:40:44: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 577: ByteString.toString arguments

String: 5D

2025/07/16 08:40:44: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 577: Function.ByteString arguments
1: String: !!-000863.c_KeyBlkImport(xCtP3i_1F20_Kac

2: Double: 1

ByteString

2025/07/16 08:40:44: Line 578: UBJSGlobalClass.c_KeyBlkImport result
Key: 01880000001877D9BF352D314DC5E6CF7BD7FB2622165E532621116D9A96000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101000000010400000001010100000105000000010101000001090000000101000000010B0000000101000000010C00000001010000000163000000010100000001650000000101000000016400000001010000000161000000040100000010800001020000001001323032353037313630353339303730308000010300000000000000010200000000000000011000000000000000011100000000008000012B0000000101008000012900000001010100000162000000010101800001280000000101000000000300000000000000017000000001010100000000000000000000082861371AC49838920000001807D329727C79A12446A5648321F9B4362B7ADB33A7E3BF01

2025/07/16 08:40:44: Line 623: oOut.bsKcv = kKey.getKcv(Key.EIGHTZEROS).left(3);
2025/07/16 08:40:44: Line 623: Key.getKcv arguments
1: Double: 1048576

ByteString: 5DCEF345D52FEA0C

2025/07/16 08:40:44: Line 623: oOut.bsKcv = kKey.getKcv(Key.EIGHTZEROS).left(3);
2025/07/16 08:40:44: Line 623: ByteString.left arguments
1: Int: 3

ByteString: 5DCEF3

2025/07/16 08:40:44: Line 627: var kWrp = new Key();
2025/07/16 08:40:44: Line 627: Function.Key arguments

Key: 

2025/07/16 08:40:44: Line 628: crypto.wrap(kDek, nMeth, kKey, kWrp);
2025/07/16 08:40:44: Line 628: Crypto.wrap arguments
1: Key

2: Double: 5

3: Key

4: Key: 

Void: undefined

2025/07/16 08:40:44: Line 629: oOut.bsEnc = kWrp.getComponent(Key.DES);
2025/07/16 08:40:44: Line 629: Key.getComponent arguments
1: Double: 393216

ByteString: AE64FACD4DCD85FB1DC6AA30738CB3FB

2025/07/16 08:40:44: Line 638: new ByteString("!"+"!-"+CALL+"("+sCat+", "+oOut.bsEnc.toString()+", "+oOut.bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 638: ByteString.toString arguments

String: AE64FACD4DCD85FB1DC6AA30738CB3FB

2025/07/16 08:40:44: Line 638: new ByteString("!"+"!-"+CALL+"("+sCat+", "+oOut.bsEnc.toString()+", "+oOut.bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 638: ByteString.toString arguments

String: 5DCEF3

2025/07/16 08:40:44: Line 638: new ByteString("!"+"!-"+CALL+"("+sCat+", "+oOut.bsEnc.toString()+", "+oOut.bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 638: Function.ByteString arguments
1: String: !!-000863.c_KeyBlkTranslate(xCtP3i_1F20_Kac, AE64FACD4DCD85FB1DC6AA30738CB3FB, 5DCEF3)

2: Double: 1

ByteString: 21212D3030303836332E635F4B6579426C6B5472616E736C617465287843745033695F314632305F4B61632C2041453634464143443444434438354642314443364141333037333843423346422C2035444345463329

2025/07/16 08:40:44: Line 639: UBJSGlobalClass.c_KeyBlkTranslate result
Object: [object Object]

2025/07/16 08:40:44: Line 600: function c_KeyBlkTranslate(sCat, kDek, nMeth)
2025/07/16 08:40:44: Line 600: UBJSGlobalClass.c_KeyBlkTranslate arguments
1: String: xCtP3i_1F21_Ksmi

2: Key

3: Double: 5

2025/07/16 08:40:44: Line 609: new ByteString("!"+"!+"+CALL+"("+sCat+", "+kDek.getComponent(Key.DES)+", "+nMeth+")",ASCII); // Log begin func
2025/07/16 08:40:44: Line 609: Key.getComponent arguments
1: Double: 393216

ByteString

2025/07/16 08:40:44: Line 609: new ByteString("!"+"!+"+CALL+"("+sCat+", "+kDek.getComponent(Key.DES)+", "+nMeth+")",ASCII); // Log begin func
2025/07/16 08:40:44: Line 609: ByteString.valueOf arguments

ByteString

2025/07/16 08:40:44: Line 609: new ByteString("!"+"!+"+CALL+"("+sCat+", "+kDek.getComponent(Key.DES)+", "+nMeth+")",ASCII); // Log begin func
2025/07/16 08:40:44: Line 609: ByteString.toString arguments

String: 018800000018F7D60412BF80EB7443C4A806C1D392D17D682B25C3CD9F8C000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010100000107000000010101000001080000000101010000010A0000000101000000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C000000010100000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333930313030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B00000001010080000128000000010100000000030000000000000001700000000101010000000000000000000008F4178D32E8A8FD8E00000018588E699C00A79A8615BD5FA24AD1A6222B7ADB33A7E3BF01

2025/07/16 08:40:44: Line 609: new ByteString("!"+"!+"+CALL+"("+sCat+", "+kDek.getComponent(Key.DES)+", "+nMeth+")",ASCII); // Log begin func
2025/07/16 08:40:44: Line 609: Function.ByteString arguments
1: String: !!+000863.c_KeyBlkTranslate(xCtP3i_1F21_Ksmi

2: Double: 1

ByteString

2025/07/16 08:40:44: Line 613: var oOut = new Object();
2025/07/16 08:40:44: Line 613: Function.Object arguments

Object: [object Object]

2025/07/16 08:40:44: Line 522: function c_KeyBlkImport(sCat, nTyp)
2025/07/16 08:40:44: Line 522: UBJSGlobalClass.c_KeyBlkImport arguments
1: String: xCtP3i_1F21_Ksmi

2: Int: 3

2025/07/16 08:40:44: Line 531: new ByteString("!"+"!+"+CALL+"("+sCat+", "+nTyp+")",ASCII); // Log begin func
2025/07/16 08:40:44: Line 531: Function.ByteString arguments
1: String: !!+000863.c_KeyBlkImport(xCtP3i_1F21_Ksmi, 3)

2: Double: 1

ByteString: 21212B3030303836332E635F4B6579426C6B496D706F7274287843745033695F314632315F4B736D692C203329

2025/07/16 08:40:44: Line 537: var bsBlk = art.getVariableValue(sCat);
2025/07/16 08:40:44: Line 537: Art.getVariableValue arguments
1: String: xCtP3i_1F21_Ksmi

ByteString: DF0110905D76036CA51490F4F084C26D6048A5DF020168

2025/07/16 08:40:44: Line 541: if (!bsBlk.left(2).equals(new ByteString("DF01",HEX))) // Find key tag
2025/07/16 08:40:44: Line 541: ByteString.left arguments
1: Int: 2

ByteString: DF01

2025/07/16 08:40:44: Line 541: if (!bsBlk.left(2).equals(new ByteString("DF01",HEX))) // Find key tag
2025/07/16 08:40:44: Line 541: Function.ByteString arguments
1: String: DF01

2: Double: 4

ByteString: DF01

2025/07/16 08:40:44: Line 541: if (!bsBlk.left(2).equals(new ByteString("DF01",HEX))) // Find key tag
2025/07/16 08:40:44: Line 541: ByteString.equals arguments
1: ByteString: DF01

Int: 1

2025/07/16 08:40:44: Line 543: var tlBlk = new TLVList(bsBlk, TLV.EMV);
2025/07/16 08:40:44: Line 543: Function.TLVList arguments
1: ByteString: DF0110905D76036CA51490F4F084C26D6048A5DF020168

2: Double: 2

TLVList: DF0110905D76036CA51490F4F084C26D6048A5DF020168

2025/07/16 08:40:44: Line 544: var tKey = tlBlk.find(0xDF01);
2025/07/16 08:40:44: Line 544: TLVList.find arguments
1: Int: 57089

TLV: DF0110905D76036CA51490F4F084C26D6048A5

2025/07/16 08:40:44: Line 545: if ((tKey == null)||(tKey.getValue().length%8 != 0))
2025/07/16 08:40:44: Line 545: TLV.getValue arguments

ByteString: 905D76036CA51490F4F084C26D6048A5

2025/07/16 08:40:44: Line 547: var bsKey = tKey.getValue();
2025/07/16 08:40:44: Line 547: TLV.getValue arguments

ByteString: 905D76036CA51490F4F084C26D6048A5

2025/07/16 08:40:44: Line 551: var tKcv = tlBlk.find(0xDF02);
2025/07/16 08:40:44: Line 551: TLVList.find arguments
1: Int: 57090

TLV: DF020168

2025/07/16 08:40:44: Line 554: var bsBlkKcv = tKcv.getValue();
2025/07/16 08:40:44: Line 554: TLV.getValue arguments

ByteString: 68

2025/07/16 08:40:44: Line 559: var bsKek = c_kKek.getComponent(Key.DES);
2025/07/16 08:40:44: Line 559: Key.getComponent arguments
1: Double: 393216

ByteString: 018800000018D1375D8E0BF28D0F74F15ED58D3453275BCE6D7A6D674200000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010100000107000000010101000001080000000101010000010A0000000101000000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C00000001010000000163000000010100000001650000000101000000016400000001010000000161000000040100000010800001020000001001323032353031313531303333313330308000010300000000000000010200000000000000011000000000000000011100000000008000012B000000010100800001290000000101010000016200000001010180000128000000010100000000030000000000000001700000000101010000000000000000000008E6875B89EFDAB41800000018BBAE00142B1764AEA7CF467274ED36882B7ADB33A7E3BF01

2025/07/16 08:40:44: Line 560: var bsTok = new ByteString();
2025/07/16 08:40:44: Line 560: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:44: Line 561: art.execute("UBDesEcb", sMode, bsKek, bsKey, bsTok);
2025/07/16 08:40:44: Line 561: Art.execute arguments
1: String: UBDesEcb

2: String: DecryptKey3{T3}

3: ByteString

4: ByteString: 905D76036CA51490F4F084C26D6048A5

5: ByteString: 

Int: 0

2025/07/16 08:40:44: Line 562: var kKey = new Key(bsTok);
2025/07/16 08:40:44: Line 562: Function.Key arguments
1: ByteString: 018800000018F24CBDC89F8CEA434B891646D3227265A27E2944F017FF00000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101000000010400000001010100000105000000010101000001090000000101000000010B0000000101000000010C00000001010000000163000000010100000001650000000101000000016400000001010000000161000000040100000010800001020000001001323032353037313630353339303730308000010300000000000000010200000000000000011000000000000000011100000000008000012B000000010100800001290000000101010000016200000001010180000128000000010100000000030000000000000001700000000101010000000000000000000008EE9350D4BFC05725000000180B6112E0871A37CFA87B3065009F69172B7ADB33A7E3BF01

Key

2025/07/16 08:40:44: Line 566: var bsKcv = kKey.getKcv(Key.EIGHTZEROS).left(bsBlkKcv.length);
2025/07/16 08:40:44: Line 566: Key.getKcv arguments
1: Double: 1048576

ByteString: 68040BBE7F117570

2025/07/16 08:40:44: Line 566: var bsKcv = kKey.getKcv(Key.EIGHTZEROS).left(bsBlkKcv.length);
2025/07/16 08:40:44: Line 566: ByteString.left arguments
1: Int: 1

ByteString: 68

2025/07/16 08:40:44: Line 567: if (bsKcv.toString() != bsBlkKcv.toString())
2025/07/16 08:40:44: Line 567: ByteString.toString arguments

String: 68

2025/07/16 08:40:44: Line 567: if (bsKcv.toString() != bsBlkKcv.toString())
2025/07/16 08:40:44: Line 567: ByteString.toString arguments

String: 68

2025/07/16 08:40:44: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 577: Key.getComponent arguments
1: Double: 393216

ByteString

2025/07/16 08:40:44: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 577: ByteString.toString arguments

String

2025/07/16 08:40:44: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 577: ByteString.toString arguments

String: 68

2025/07/16 08:40:44: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 577: Function.ByteString arguments
1: String: !!-000863.c_KeyBlkImport(xCtP3i_1F21_Ksmi

2: Double: 1

ByteString: 21212D3030303836332E635F4B6579426C6B496D706F7274287843745033695F314632315F4B736D692C2030313838303030303030313846323443424443383946384345413433344238393136343644333232373236354132374532393434463031374646303030303030303134303030303030303144303030303030303030303030303030343031303030303030303430303030303130303030303030303034303130303030303031343030303030303031303030303030303130313030303030303030303230303030303030313031303130303030303130333030303030303031303130313030303030313036303030303030303130313030303030303031303730303030303030313031303030303030303130383030303030303031303130313030303030313041303030303030303130313030303030303031303430303030303030313031303130303030303130353030303030303031303130313030303030313039303030303030303130313030303030303031304230303030303030313031303030303030303130433030303030303031303130303030303030313633303030303030303130313030303030303031363530303030303030313031303030303030303136343030303030303031303130303030303030313631303030303030303430313030303030303130383030303031303230303030303031303031333233303332333533303337333133363330333533333339333033373330333038303030303130333030303030303030303030303030303130323030303030303030303030303030303131303030303030303030303030303030303131313030303030303030303038303030303132423030303030303031303130303830303030313239303030303030303130313031303030303031363230303030303030313031303138303030303132383030303030303031303130303030303030303033303030303030303030303030303030313730303030303030303130313031303030303030303030303030303030303030303030384545393335304434424643303537323530303030303031383042363131324530383731413337434641383742333036353030394636393137324237414442333341374533424630312C20363829

2025/07/16 08:40:44: Line 578: UBJSGlobalClass.c_KeyBlkImport result
Key: 018800000018F24CBDC89F8CEA434B891646D3227265A27E2944F017FF00000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101000000010400000001010100000105000000010101000001090000000101000000010B0000000101000000010C00000001010000000163000000010100000001650000000101000000016400000001010000000161000000040100000010800001020000001001323032353037313630353339303730308000010300000000000000010200000000000000011000000000000000011100000000008000012B000000010100800001290000000101010000016200000001010180000128000000010100000000030000000000000001700000000101010000000000000000000008EE9350D4BFC05725000000180B6112E0871A37CFA87B3065009F69172B7ADB33A7E3BF01

2025/07/16 08:40:44: Line 623: oOut.bsKcv = kKey.getKcv(Key.EIGHTZEROS).left(3);
2025/07/16 08:40:44: Line 623: Key.getKcv arguments
1: Double: 1048576

ByteString: 68040BBE7F117570

2025/07/16 08:40:44: Line 623: oOut.bsKcv = kKey.getKcv(Key.EIGHTZEROS).left(3);
2025/07/16 08:40:44: Line 623: ByteString.left arguments
1: Int: 3

ByteString: 68040B

2025/07/16 08:40:44: Line 627: var kWrp = new Key();
2025/07/16 08:40:44: Line 627: Function.Key arguments

Key: 

2025/07/16 08:40:44: Line 628: crypto.wrap(kDek, nMeth, kKey, kWrp);
2025/07/16 08:40:44: Line 628: Crypto.wrap arguments
1: Key

2: Double: 5

3: Key

4: Key: 

Void: undefined

2025/07/16 08:40:44: Line 629: oOut.bsEnc = kWrp.getComponent(Key.DES);
2025/07/16 08:40:44: Line 629: Key.getComponent arguments
1: Double: 393216

ByteString: B84DA31FBA5807B333CDA4B132516CB7

2025/07/16 08:40:44: Line 638: new ByteString("!"+"!-"+CALL+"("+sCat+", "+oOut.bsEnc.toString()+", "+oOut.bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 638: ByteString.toString arguments

String: B84DA31FBA5807B333CDA4B132516CB7

2025/07/16 08:40:44: Line 638: new ByteString("!"+"!-"+CALL+"("+sCat+", "+oOut.bsEnc.toString()+", "+oOut.bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 638: ByteString.toString arguments

String: 68040B

2025/07/16 08:40:44: Line 638: new ByteString("!"+"!-"+CALL+"("+sCat+", "+oOut.bsEnc.toString()+", "+oOut.bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 638: Function.ByteString arguments
1: String: !!-000863.c_KeyBlkTranslate(xCtP3i_1F21_Ksmi, B84DA31FBA5807B333CDA4B132516CB7, 68040B)

2: Double: 1

ByteString: 21212D3030303836332E635F4B6579426C6B5472616E736C617465287843745033695F314632315F4B736D692C2042383444413331464241353830374233333343444134423133323531364342372C2036383034304229

2025/07/16 08:40:44: Line 639: UBJSGlobalClass.c_KeyBlkTranslate result
Object: [object Object]

2025/07/16 08:40:44: Line 600: function c_KeyBlkTranslate(sCat, kDek, nMeth)
2025/07/16 08:40:44: Line 600: UBJSGlobalClass.c_KeyBlkTranslate arguments
1: String: xCtP3i_1F22_Ksmc

2: Key

3: Double: 5

2025/07/16 08:40:44: Line 609: new ByteString("!"+"!+"+CALL+"("+sCat+", "+kDek.getComponent(Key.DES)+", "+nMeth+")",ASCII); // Log begin func
2025/07/16 08:40:44: Line 609: Key.getComponent arguments
1: Double: 393216

ByteString

2025/07/16 08:40:44: Line 609: new ByteString("!"+"!+"+CALL+"("+sCat+", "+kDek.getComponent(Key.DES)+", "+nMeth+")",ASCII); // Log begin func
2025/07/16 08:40:44: Line 609: ByteString.valueOf arguments

ByteString: 018800000018F7D60412BF80EB7443C4A806C1D392D17D682B25C3CD9F8C000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010100000107000000010101000001080000000101010000010A0000000101000000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C000000010100000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333930313030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B00000001010080000128000000010100000000030000000000000001700000000101010000000000000000000008F4178D32E8A8FD8E00000018588E699C00A79A8615BD5FA24AD1A6222B7ADB33A7E3BF01

2025/07/16 08:40:44: Line 609: new ByteString("!"+"!+"+CALL+"("+sCat+", "+kDek.getComponent(Key.DES)+", "+nMeth+")",ASCII); // Log begin func
2025/07/16 08:40:44: Line 609: ByteString.toString arguments

String

2025/07/16 08:40:44: Line 609: new ByteString("!"+"!+"+CALL+"("+sCat+", "+kDek.getComponent(Key.DES)+", "+nMeth+")",ASCII); // Log begin func
2025/07/16 08:40:44: Line 609: Function.ByteString arguments
1: String: !!+000863.c_KeyBlkTranslate(xCtP3i_1F22_Ksmc

2: Double: 1

ByteString: 21212B3030303836332E635F4B6579426C6B5472616E736C617465287843745033695F314632325F4B736D632C2030313838303030303030313846374436303431324246383045423734343343344138303643314433393244313744363832423235433343443946384330303030303134303030303030303144303030303030303030303030303030343031303030303030303430303030303130303030303030303034303130303030303031343030303030303031303030303030303130313030303030303030303230303030303030313031303130303030303130333030303030303031303130313030303030313036303030303030303130313031303030303031303730303030303030313031303130303030303130383030303030303031303130313030303030313041303030303030303130313030303030303031303430303030303030313031303130303030303130353030303030303031303130303030303030313039303030303030303130313030303030303031304230303030303030313031303030303030303130433030303030303031303130303030303030313634303030303030303130313030383030303031323930303030303030313031303130303030303136323030303030303031303130313030303030313635303030303030303130313030303030303031363130303030303030343031303030303030313038303030303130323030303030303130303133323330333233353330333733313336333033353333333933303331333033303830303030313033303030303030303030303030303030313633303030303030303130313030303030303031303230303030303030303030303030303031313030303030303030303030303030303031313130303030303030303030383030303031324230303030303030313031303038303030303132383030303030303031303130303030303030303033303030303030303030303030303030313730303030303030303130313031303030303030303030303030303030303030303030384634313738443332453841384644384530303030303031383538384536393943303041373941383631354244354641323441443141363232324237414442333341374533424630312C203529

2025/07/16 08:40:44: Line 613: var oOut = new Object();
2025/07/16 08:40:44: Line 613: Function.Object arguments

Object: [object Object]

2025/07/16 08:40:44: Line 522: function c_KeyBlkImport(sCat, nTyp)
2025/07/16 08:40:44: Line 522: UBJSGlobalClass.c_KeyBlkImport arguments
1: String: xCtP3i_1F22_Ksmc

2: Int: 3

2025/07/16 08:40:44: Line 531: new ByteString("!"+"!+"+CALL+"("+sCat+", "+nTyp+")",ASCII); // Log begin func
2025/07/16 08:40:44: Line 531: Function.ByteString arguments
1: String: !!+000863.c_KeyBlkImport(xCtP3i_1F22_Ksmc, 3)

2: Double: 1

ByteString: 21212B3030303836332E635F4B6579426C6B496D706F7274287843745033695F314632325F4B736D632C203329

2025/07/16 08:40:44: Line 537: var bsBlk = art.getVariableValue(sCat);
2025/07/16 08:40:44: Line 537: Art.getVariableValue arguments
1: String: xCtP3i_1F22_Ksmc

ByteString: DF01107BE4874540EB297B8EF303EF2E034A24DF02018C

2025/07/16 08:40:44: Line 541: if (!bsBlk.left(2).equals(new ByteString("DF01",HEX))) // Find key tag
2025/07/16 08:40:44: Line 541: ByteString.left arguments
1: Int: 2

ByteString: DF01

2025/07/16 08:40:44: Line 541: if (!bsBlk.left(2).equals(new ByteString("DF01",HEX))) // Find key tag
2025/07/16 08:40:44: Line 541: Function.ByteString arguments
1: String: DF01

2: Double: 4

ByteString: DF01

2025/07/16 08:40:44: Line 541: if (!bsBlk.left(2).equals(new ByteString("DF01",HEX))) // Find key tag
2025/07/16 08:40:44: Line 541: ByteString.equals arguments
1: ByteString: DF01

Int: 1

2025/07/16 08:40:44: Line 543: var tlBlk = new TLVList(bsBlk, TLV.EMV);
2025/07/16 08:40:44: Line 543: Function.TLVList arguments
1: ByteString: DF01107BE4874540EB297B8EF303EF2E034A24DF02018C

2: Double: 2

TLVList: DF01107BE4874540EB297B8EF303EF2E034A24DF02018C

2025/07/16 08:40:44: Line 544: var tKey = tlBlk.find(0xDF01);
2025/07/16 08:40:44: Line 544: TLVList.find arguments
1: Int: 57089

TLV: DF01107BE4874540EB297B8EF303EF2E034A24

2025/07/16 08:40:44: Line 545: if ((tKey == null)||(tKey.getValue().length%8 != 0))
2025/07/16 08:40:44: Line 545: TLV.getValue arguments

ByteString: 7BE4874540EB297B8EF303EF2E034A24

2025/07/16 08:40:44: Line 547: var bsKey = tKey.getValue();
2025/07/16 08:40:44: Line 547: TLV.getValue arguments

ByteString: 7BE4874540EB297B8EF303EF2E034A24

2025/07/16 08:40:44: Line 551: var tKcv = tlBlk.find(0xDF02);
2025/07/16 08:40:44: Line 551: TLVList.find arguments
1: Int: 57090

TLV: DF02018C

2025/07/16 08:40:44: Line 554: var bsBlkKcv = tKcv.getValue();
2025/07/16 08:40:44: Line 554: TLV.getValue arguments

ByteString: 8C

2025/07/16 08:40:44: Line 559: var bsKek = c_kKek.getComponent(Key.DES);
2025/07/16 08:40:44: Line 559: Key.getComponent arguments
1: Double: 393216

ByteString

2025/07/16 08:40:44: Line 560: var bsTok = new ByteString();
2025/07/16 08:40:44: Line 560: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:44: Line 561: art.execute("UBDesEcb", sMode, bsKek, bsKey, bsTok);
2025/07/16 08:40:44: Line 561: Art.execute arguments
1: String: UBDesEcb

2: String: DecryptKey3{T3}

3: ByteString

4: ByteString: 7BE4874540EB297B8EF303EF2E034A24

5: ByteString: 

Int: 0

2025/07/16 08:40:44: Line 562: var kKey = new Key(bsTok);
2025/07/16 08:40:44: Line 562: Function.Key arguments
1: ByteString

Key

2025/07/16 08:40:44: Line 566: var bsKcv = kKey.getKcv(Key.EIGHTZEROS).left(bsBlkKcv.length);
2025/07/16 08:40:44: Line 566: Key.getKcv arguments
1: Double: 1048576

ByteString: 8C83F3E5DE8D7031

2025/07/16 08:40:44: Line 566: var bsKcv = kKey.getKcv(Key.EIGHTZEROS).left(bsBlkKcv.length);
2025/07/16 08:40:44: Line 566: ByteString.left arguments
1: Int: 1

ByteString: 8C

2025/07/16 08:40:44: Line 567: if (bsKcv.toString() != bsBlkKcv.toString())
2025/07/16 08:40:44: Line 567: ByteString.toString arguments

String: 8C

2025/07/16 08:40:44: Line 567: if (bsKcv.toString() != bsBlkKcv.toString())
2025/07/16 08:40:44: Line 567: ByteString.toString arguments

String: 8C

2025/07/16 08:40:44: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 577: Key.getComponent arguments
1: Double: 393216

ByteString

2025/07/16 08:40:44: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 577: ByteString.toString arguments

String

2025/07/16 08:40:44: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 577: ByteString.toString arguments

String: 8C

2025/07/16 08:40:44: Line 577: new ByteString("!"+"!-"+CALL+"("+sCat+", "+kKey.getComponent(Key.DES).toString()+", "+bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 577: Function.ByteString arguments
1: String: !!-000863.c_KeyBlkImport(xCtP3i_1F22_Ksmc

2: Double: 1

ByteString

2025/07/16 08:40:44: Line 578: UBJSGlobalClass.c_KeyBlkImport result
Key

2025/07/16 08:40:44: Line 623: oOut.bsKcv = kKey.getKcv(Key.EIGHTZEROS).left(3);
2025/07/16 08:40:44: Line 623: Key.getKcv arguments
1: Double: 1048576

ByteString: 8C83F3E5DE8D7031

2025/07/16 08:40:44: Line 623: oOut.bsKcv = kKey.getKcv(Key.EIGHTZEROS).left(3);
2025/07/16 08:40:44: Line 623: ByteString.left arguments
1: Int: 3

ByteString: 8C83F3

2025/07/16 08:40:44: Line 627: var kWrp = new Key();
2025/07/16 08:40:44: Line 627: Function.Key arguments

Key: 

2025/07/16 08:40:44: Line 628: crypto.wrap(kDek, nMeth, kKey, kWrp);
2025/07/16 08:40:44: Line 628: Crypto.wrap arguments
1: Key

2: Double: 5

3: Key

4: Key: 

Void: undefined

2025/07/16 08:40:44: Line 629: oOut.bsEnc = kWrp.getComponent(Key.DES);
2025/07/16 08:40:44: Line 629: Key.getComponent arguments
1: Double: 393216

ByteString: 65A91F2A4ECC1C54DAF2523788715056

2025/07/16 08:40:44: Line 638: new ByteString("!"+"!-"+CALL+"("+sCat+", "+oOut.bsEnc.toString()+", "+oOut.bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 638: ByteString.toString arguments

String: 65A91F2A4ECC1C54DAF2523788715056

2025/07/16 08:40:44: Line 638: new ByteString("!"+"!-"+CALL+"("+sCat+", "+oOut.bsEnc.toString()+", "+oOut.bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 638: ByteString.toString arguments

String: 8C83F3

2025/07/16 08:40:44: Line 638: new ByteString("!"+"!-"+CALL+"("+sCat+", "+oOut.bsEnc.toString()+", "+oOut.bsKcv.toString()+")",ASCII); // Log end func
2025/07/16 08:40:44: Line 638: Function.ByteString arguments
1: String: !!-000863.c_KeyBlkTranslate(xCtP3i_1F22_Ksmc, 65A91F2A4ECC1C54DAF2523788715056, 8C83F3)

2: Double: 1

ByteString: 21212D3030303836332E635F4B6579426C6B5472616E736C617465287843745033695F314632325F4B736D632C2036354139314632413445434331433534444146323532333738383731353035362C2038433833463329

2025/07/16 08:40:44: Line 639: UBJSGlobalClass.c_KeyBlkTranslate result
Object: [object Object]

2025/07/16 08:40:44: Line 711: .concat(oSmi.bsEnc)
2025/07/16 08:40:44: Line 711: ByteString.concat arguments
1: ByteString: B84DA31FBA5807B333CDA4B132516CB7

ByteString: AE64FACD4DCD85FB1DC6AA30738CB3FBB84DA31FBA5807B333CDA4B132516CB7

2025/07/16 08:40:44: Line 712: .concat(oSmc.bsEnc);
2025/07/16 08:40:44: Line 712: ByteString.concat arguments
1: ByteString: 65A91F2A4ECC1C54DAF2523788715056

ByteString: AE64FACD4DCD85FB1DC6AA30738CB3FBB84DA31FBA5807B333CDA4B132516CB765A91F2A4ECC1C54DAF2523788715056

2025/07/16 08:40:44: Line 716: var bsDgi = new TLV(0x8000, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:44: Line 716: Function.TLV arguments
1: Int: 32768

2: ByteString: AE64FACD4DCD85FB1DC6AA30738CB3FBB84DA31FBA5807B333CDA4B132516CB765A91F2A4ECC1C54DAF2523788715056

3: Double: 1

TLV: 800030AE64FACD4DCD85FB1DC6AA30738CB3FBB84DA31FBA5807B333CDA4B132516CB765A91F2A4ECC1C54DAF2523788715056

2025/07/16 08:40:44: Line 716: var bsDgi = new TLV(0x8000, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:44: Line 716: TLV.getTLV arguments

ByteString: 800030AE64FACD4DCD85FB1DC6AA30738CB3FBB84DA31FBA5807B333CDA4B132516CB765A91F2A4ECC1C54DAF2523788715056

2025/07/16 08:40:44: Line 717: card.sendApdu(0x80,0xE2,0x60,nP2++,bsDgi); //8000 (App keys)
2025/07/16 08:40:44: Line 717: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 96

4: Int: 28

5: ByteString: 800030AE64FACD4DCD85FB1DC6AA30738CB3FBB84DA31FBA5807B333CDA4B132516CB765A91F2A4ECC1C54DAF2523788715056

2025/07/16 08:40:44: DCC9kServer IC Commands
0000: 80 E2 60 1C 33 80 00 30-AE 64 FA CD 4D CD 85 FB       ` 3  0 d  M   
0010: 1D C6 AA 30 73 8C B3 FB-B8 4D A3 1F BA 58 07 B3        0s    M   X  
0020: 33 CD A4 B1 32 51 6C B7-65 A9 1F 2A 4E CC 1C 54     3   2Ql e  *N  T
0030: DA F2 52 37 88 71 50 56-21 53 57 02 2B 2A             R7 qPV!SW +*  

2025/07/16 08:40:44: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:44: Line 738: .concat(oSmi.bsKcv)
2025/07/16 08:40:44: Line 738: ByteString.concat arguments
1: ByteString: 68040B

ByteString: 5DCEF368040B

2025/07/16 08:40:44: Line 739: .concat(oSmc.bsKcv);
2025/07/16 08:40:44: Line 739: ByteString.concat arguments
1: ByteString: 8C83F3

ByteString: 5DCEF368040B8C83F3

2025/07/16 08:40:44: Line 743: var bsDgi = new TLV(0x9000, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:44: Line 743: Function.TLV arguments
1: Int: 36864

2: ByteString: 5DCEF368040B8C83F3

3: Double: 1

TLV: 9000095DCEF368040B8C83F3

2025/07/16 08:40:44: Line 743: var bsDgi = new TLV(0x9000, bsDat, TLV.DGI).getTLV();
2025/07/16 08:40:44: Line 743: TLV.getTLV arguments

ByteString: 9000095DCEF368040B8C83F3

2025/07/16 08:40:44: Line 744: card.sendApdu(0x80,0xE2,0x80,nP2++,bsDgi); //9000 (KCV)
2025/07/16 08:40:44: Line 744: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 128

4: Int: 29

5: ByteString: 9000095DCEF368040B8C83F3

2025/07/16 08:40:44: DCC9kServer IC Commands
0000: 80 E2 80 1D 0C 90 00 09-5D CE F3 68 04 0B 8C 83             ]  h    
0010: F3 21 53 57 02 2B 2A                                 !SW +*         

2025/07/16 08:40:45: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:45: Line 748: new ByteString("!"+"!-"+CALL+"()",ASCII); // Log end func
2025/07/16 08:40:45: Line 748: Function.ByteString arguments
1: String: !!-000863.t_Perso()

2: Double: 1

ByteString: 21212D3030303836332E745F506572736F2829

2025/07/16 08:40:45: Line 749: UBJSGlobalClass.t_Perso result
Void: undefined

2025/07/16 08:40:45: Line 49: function c_Auth(bsAid, nMeth, nVr, nId, nSecLvl)
2025/07/16 08:40:45: Line 49: UBJSGlobalClass.c_Auth arguments
1: ByteString: A000000151000000

2: Int: 22

3: Int: 0

4: Int: 0

5: Int: 0

2025/07/16 08:40:45: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:45: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 22

Boolean: false

2025/07/16 08:40:45: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:45: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:45: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:45: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:45: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:45: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:45: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 58: ByteString.toString arguments

String: A000000151000000

2025/07/16 08:40:45: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 58: Number.toString arguments
1: Int: 10

String: 22

2025/07/16 08:40:45: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:45: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:45: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:45: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 58: Function.ByteString arguments
1: String: !!+000863.c_Auth(A000000151000000, 22, 0, 0, 0)

2: Double: 1

ByteString: 21212B3030303836332E635F4175746828413030303030303135313030303030302C2032322C20302C20302C203029

2025/07/16 08:40:45: Line 62: var bsF001 = new ByteString("F001", HEX);
2025/07/16 08:40:45: Line 62: Function.ByteString arguments
1: String: F001

2: Double: 4

ByteString: F001

2025/07/16 08:40:45: Line 63: var bsF002 = new ByteString("F002", HEX);
2025/07/16 08:40:45: Line 63: Function.ByteString arguments
1: String: F002

2: Double: 4

ByteString: F002

2025/07/16 08:40:45: Line 64: var bsF003 = new ByteString("F003", HEX);
2025/07/16 08:40:45: Line 64: Function.ByteString arguments
1: String: F003

2: Double: 4

ByteString: F003

2025/07/16 08:40:45: Line 65: var bs0F01 = new ByteString("0F01", HEX);
2025/07/16 08:40:45: Line 65: Function.ByteString arguments
1: String: 0F01

2: Double: 4

ByteString: 0F01

2025/07/16 08:40:45: Line 66: var bs0F02 = new ByteString("0F02", HEX);
2025/07/16 08:40:45: Line 66: Function.ByteString arguments
1: String: 0F02

2: Double: 4

ByteString: 0F02

2025/07/16 08:40:45: Line 67: var bs0F03 = new ByteString("0F03", HEX);
2025/07/16 08:40:45: Line 67: Function.ByteString arguments
1: String: 0F03

2: Double: 4

ByteString: 0F03

2025/07/16 08:40:45: Line 68: var bs0182 = new ByteString("0182", HEX);
2025/07/16 08:40:45: Line 68: Function.ByteString arguments
1: String: 0182

2: Double: 4

ByteString: 0182

2025/07/16 08:40:45: Line 69: var bs0101 = new ByteString("0101", HEX);
2025/07/16 08:40:45: Line 69: Function.ByteString arguments
1: String: 0101

2: Double: 4

ByteString: 0101

2025/07/16 08:40:45: Line 70: var bs0181 = new ByteString("0181", HEX);
2025/07/16 08:40:45: Line 70: Function.ByteString arguments
1: String: 0181

2: Double: 4

ByteString: 0181

2025/07/16 08:40:45: Line 71: var bsZero12 = new ByteString("000000000000000000000000",HEX);
2025/07/16 08:40:45: Line 71: Function.ByteString arguments
1: String: 000000000000000000000000

2: Double: 4

ByteString: 000000000000000000000000

2025/07/16 08:40:45: Line 72: var bsZero8  = new ByteString("0000000000000000",HEX);
2025/07/16 08:40:45: Line 72: Function.ByteString arguments
1: String: 0000000000000000

2: Double: 4

ByteString: 0000000000000000

2025/07/16 08:40:45: Line 77: card.sendApdu(0x00,0xA4,0x04,0x00,bsAid,0x00); //Select AID
2025/07/16 08:40:45: Line 77: Card.sendApdu arguments
1: Int: 0

2: Int: 164

3: Int: 4

4: Int: 0

5: ByteString: A000000151000000

6: Int: 0

2025/07/16 08:40:45: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 00     !IOCTL ISOCase4 
0010: A4 04 00 08 A0 00 00 01-51 00 00 00 00 21 53 57             Q    !SW
0020: 02 2B 2A                                             +*             

2025/07/16 08:40:45: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: 6F 10 A5 04 9F 65 01 FF-84 08 A0 00 00 01 51 00     o    e        Q 
0010: 00 00                                                               

ByteString: 6F10A5049F6501FF8408A000000151000000

2025/07/16 08:40:45: Line 81: var bsRterm = crypto.generateRandom(8);
2025/07/16 08:40:45: Line 81: Crypto.generateRandom arguments
1: Int: 8

ByteString: 2EA7AE905C929604

2025/07/16 08:40:45: Line 87: var bsIuRtn = card.sendApdu(0x80,0x50,nVr,nId,bsRterm,0x00);//Init update
2025/07/16 08:40:45: Line 87: Card.sendApdu arguments
1: Int: 128

2: Int: 80

3: Int: 0

4: Int: 0

5: ByteString: 2EA7AE905C929604

6: Int: 0

2025/07/16 08:40:45: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: 50 00 00 08 2E A7 AE 90-5C 92 96 04 00 21 53 57     P   .   \    !SW
0020: 02 2B 2A                                             +*             

2025/07/16 08:40:45: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: FF FF FF FF FB F3 04 EA-75 44 01 02 00 04 83 36             uD     6
0010: AB 90 D0 41 58 0B E6 C8-D3 7E A2 00                    AX    ~      

ByteString: FFFFFFFFFBF304EA7544010200048336AB90D041580BE6C8D37EA200

2025/07/16 08:40:45: Line 235: var bsIuDiv  = bsIuRtn.bytes(4,6);
2025/07/16 08:40:45: Line 235: ByteString.bytes arguments
1: Int: 4

2: Int: 6

ByteString: FBF304EA7544

2025/07/16 08:40:45: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:45: Line 236: ByteString.concat arguments
1: ByteString: F001

ByteString: FBF304EA7544F001

2025/07/16 08:40:45: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:45: Line 236: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F001FBF304EA7544

2025/07/16 08:40:45: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:45: Line 236: ByteString.concat arguments
1: ByteString: 0F01

ByteString: FBF304EA7544F001FBF304EA75440F01

2025/07/16 08:40:45: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:45: Line 237: ByteString.concat arguments
1: ByteString: F002

ByteString: FBF304EA7544F002

2025/07/16 08:40:45: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:45: Line 237: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F002FBF304EA7544

2025/07/16 08:40:45: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:45: Line 237: ByteString.concat arguments
1: ByteString: 0F02

ByteString: FBF304EA7544F002FBF304EA75440F02

2025/07/16 08:40:45: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:45: Line 238: ByteString.concat arguments
1: ByteString: F003

ByteString: FBF304EA7544F003

2025/07/16 08:40:45: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:45: Line 238: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F003FBF304EA7544

2025/07/16 08:40:45: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:45: Line 238: ByteString.concat arguments
1: ByteString: 0F03

ByteString: FBF304EA7544F003FBF304EA75440F03

2025/07/16 08:40:45: Line 242: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsEncDiv, c_kDKenc);
2025/07/16 08:40:45: Line 242: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F001FBF304EA75440F01

4: Key

Void: undefined

2025/07/16 08:40:45: Line 243: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsMacDiv, c_kDKmac);
2025/07/16 08:40:45: Line 243: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F002FBF304EA75440F02

4: Key: 018800000018CBBF06B3292727B3C2E642F9DBD1163DB9AB4B268F8C7749000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101000000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C000000010101000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333930313030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B00000001010080000128000000010100000000030000000000000001700000000101010000000000000000000008B1297EF50BFC485F00000018F2D12CD770E152274269CAF8458C72E62B7ADB33A7E3BF01

Void: undefined

2025/07/16 08:40:45: Line 244: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsDekDiv, c_kDKdek);
2025/07/16 08:40:45: Line 244: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F003FBF304EA75440F03

4: Key

Void: undefined

2025/07/16 08:40:45: Line 245: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsDekDiv, c_kDKdekT0);
2025/07/16 08:40:45: Line 245: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F003FBF304EA75440F03

4: Key

Void: undefined

2025/07/16 08:40:45: Line 247: c_kDKenc.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:45: Line 247: Key.getKcv arguments
1: Double: 1048576

ByteString: 2F60DAE9569C6DE8

2025/07/16 08:40:45: Line 248: c_kDKmac.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:45: Line 248: Key.getKcv arguments
1: Double: 1048576

ByteString: 5CCE4854D71634D1

2025/07/16 08:40:45: Line 249: c_kDKdek.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:45: Line 249: Key.getKcv arguments
1: Double: 1048576

ByteString: 36B975605BE0D863

2025/07/16 08:40:45: Line 253: var bsSeqPad = bsIuRtn.bytes(12,2).concat(bsZero12); // Get and pad sequence count
2025/07/16 08:40:45: Line 253: ByteString.bytes arguments
1: Int: 12

2: Int: 2

ByteString: 0004

2025/07/16 08:40:45: Line 253: var bsSeqPad = bsIuRtn.bytes(12,2).concat(bsZero12); // Get and pad sequence count
2025/07/16 08:40:45: Line 253: ByteString.concat arguments
1: ByteString: 000000000000000000000000

ByteString: 0004000000000000000000000000

2025/07/16 08:40:45: Line 254: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEnc);
2025/07/16 08:40:45: Line 254: ByteString.concat arguments
1: ByteString: 0004000000000000000000000000

ByteString: 01820004000000000000000000000000

2025/07/16 08:40:45: Line 254: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEnc);
2025/07/16 08:40:45: Line 254: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01820004000000000000000000000000

4: Key: 018800000018D96C58E00EC1BA7C39431B6D0AD952CB2548134F39B8016A000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101000000010400000001010100000105000000010101000001090000000101000000010B0000000101000000010C000000010100000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333930313030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B0000000101008000012800000001010000000003000000000000000170000000010101000000000000000000000865F67847236889FF00000018B94057707301A70E4B02E45A1604001A2B7ADB33A7E3BF01

Void: undefined

2025/07/16 08:40:45: Line 255: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEncT2);
2025/07/16 08:40:45: Line 255: ByteString.concat arguments
1: ByteString: 0004000000000000000000000000

ByteString: 01820004000000000000000000000000

2025/07/16 08:40:45: Line 255: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEncT2);
2025/07/16 08:40:45: Line 255: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01820004000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:45: Line 256: crypto.deriveKey(c_kDKmac, Crypto.DES_CBC, bs0101.concat(bsSeqPad), c_kSkuMac);
2025/07/16 08:40:45: Line 256: ByteString.concat arguments
1: ByteString: 0004000000000000000000000000

ByteString: 01010004000000000000000000000000

2025/07/16 08:40:45: Line 256: crypto.deriveKey(c_kDKmac, Crypto.DES_CBC, bs0101.concat(bsSeqPad), c_kSkuMac);
2025/07/16 08:40:45: Line 256: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01010004000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:45: Line 257: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDek);
2025/07/16 08:40:45: Line 257: ByteString.concat arguments
1: ByteString: 0004000000000000000000000000

ByteString: 01810004000000000000000000000000

2025/07/16 08:40:45: Line 257: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDek);
2025/07/16 08:40:45: Line 257: Crypto.deriveKey arguments
1: Key: 01880000001840712628C3ABECF288CB42D42D7857CE951E7620CCD20768000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101000000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C000000010101000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333930383030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B00000001010080000128000000010100000000030000000000000001700000000101010000000000000000000008231E1AA6341AC5900000001826191CC5478132419E734C752AFEED782B7ADB33A7E3BF01

2: Double: 2

3: ByteString: 01810004000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:45: Line 258: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDekT3);
2025/07/16 08:40:45: Line 258: ByteString.concat arguments
1: ByteString: 0004000000000000000000000000

ByteString: 01810004000000000000000000000000

2025/07/16 08:40:45: Line 258: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDekT3);
2025/07/16 08:40:45: Line 258: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01810004000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:45: Line 260: c_kSkuEnc.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:45: Line 260: Key.getKcv arguments
1: Double: 1048576

ByteString: F934A3DAA6C1779D

2025/07/16 08:40:45: Line 261: c_kSkuMac.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:45: Line 261: Key.getKcv arguments
1: Double: 1048576

ByteString: 7E11DCF7C0CAD97D

2025/07/16 08:40:45: Line 262: c_kSkuDek.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:45: Line 262: Key.getKcv arguments
1: Double: 1048576

ByteString: CE07A0392B592218

2025/07/16 08:40:45: Line 266: var kTmp = new Key();
2025/07/16 08:40:45: Line 266: Function.Key arguments

Key: 

2025/07/16 08:40:45: Line 267: crypto.wrap(c_kKek, Crypto.DES_ECB, c_kSkuMac, kTmp);
2025/07/16 08:40:45: Line 267: Crypto.wrap arguments
1: Key

2: Double: 5

3: Key

4: Key: 

Void: undefined

2025/07/16 08:40:45: Line 268: var bsTmp = new ByteString();
2025/07/16 08:40:45: Line 268: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:45: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:45: Line 269: Key.getComponent arguments
1: Double: 393216

ByteString: 6A0A37DD92886B71500FF6BC80620CD1

2025/07/16 08:40:45: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:45: Line 269: ByteString.left arguments
1: Int: 8

ByteString: 6A0A37DD92886B71

2025/07/16 08:40:45: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:45: Line 269: Art.execute arguments
1: String: UBDesECB

2: String: DecryptKey3

3: ByteString

4: ByteString: 6A0A37DD92886B71

5: ByteString: 

Int: 0

2025/07/16 08:40:45: Line 270: c_kSkuMacT3s.setComponent(Key.DES, bsTmp);
2025/07/16 08:40:45: Line 270: Key.setComponent arguments
1: Double: 393216

2: ByteString

Void: undefined

2025/07/16 08:40:45: Line 315: var bsRcard = bsIuRtn.bytes(12,8);      // Get card random number
2025/07/16 08:40:45: Line 315: ByteString.bytes arguments
1: Int: 12

2: Int: 8

ByteString: 00048336AB90D041

2025/07/16 08:40:45: Line 316: var bsMacDat = bsRterm.concat(bsRcard).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:45: Line 316: ByteString.concat arguments
1: ByteString: 00048336AB90D041

ByteString: 2EA7AE905C92960400048336AB90D041

2025/07/16 08:40:45: Line 316: var bsMacDat = bsRterm.concat(bsRcard).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:45: Line 316: ByteString.pad arguments
1: Double: 37

ByteString: 2EA7AE905C92960400048336AB90D0418000000000000000

2025/07/16 08:40:45: Line 317: var bsMac = crypto.sign(c_kSkuEncT2, Crypto.DES_MAC, bsMacDat);
2025/07/16 08:40:45: Line 317: Crypto.sign arguments
1: Key

2: Double: 8

3: ByteString: 2EA7AE905C92960400048336AB90D0418000000000000000

ByteString: 580BE6C8D37EA200

2025/07/16 08:40:45: Line 321: var bsCrdCg = bsIuRtn.bytes(20,8); // Card's cryptogram
2025/07/16 08:40:45: Line 321: ByteString.bytes arguments
1: Int: 20

2: Int: 8

ByteString: 580BE6C8D37EA200

2025/07/16 08:40:45: Line 322: if (bsMac.equals(bsCrdCg))
2025/07/16 08:40:45: Line 322: ByteString.equals arguments
1: ByteString: 580BE6C8D37EA200

Int: 1

2025/07/16 08:40:45: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:45: Line 323: ByteString.toString arguments

String: 580BE6C8D37EA200

2025/07/16 08:40:45: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:45: Line 323: ByteString.toString arguments

String: 580BE6C8D37EA200

2025/07/16 08:40:45: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:45: Line 323: GPSystem.trace arguments
1: String: 000863.c_Auth(): Authentication passed; Card's cryptogram (580BE6C8D37EA200) matches calculated cryptogram (580BE6C8D37EA200).

2025/07/16 08:40:45: GPSystem.trace
000863.c_Auth(): Authentication passed; Card's cryptogram (580BE6C8D37EA200) matches calculated cryptogram (580BE6C8D37EA200).

Boolean: true

2025/07/16 08:40:45: Line 331: var bsCgDat = bsRcard.concat(bsRterm).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:45: Line 331: ByteString.concat arguments
1: ByteString: 2EA7AE905C929604

ByteString: 00048336AB90D0412EA7AE905C929604

2025/07/16 08:40:45: Line 331: var bsCgDat = bsRcard.concat(bsRterm).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:45: Line 331: ByteString.pad arguments
1: Double: 37

ByteString: 00048336AB90D0412EA7AE905C9296048000000000000000

2025/07/16 08:40:45: Line 332: var bsCg = crypto.sign(c_kSkuEncT2, Crypto.DES_MAC, bsCgDat);
2025/07/16 08:40:45: Line 332: Crypto.sign arguments
1: Key

2: Double: 8

3: ByteString: 00048336AB90D0412EA7AE905C9296048000000000000000

ByteString: 397E9ACECFAC0397

2025/07/16 08:40:45: Line 371: function c_sendApduS2(nCla, nIns, nP1, nP2, bsDat, nMech, nSecLvl, bsIcv, sMsg)
2025/07/16 08:40:45: Line 371: UBJSGlobalClass.c_sendApduS2 arguments
1: Int: 132

2: Int: 130

3: Int: 0

4: Int: 0

5: ByteString: 397E9ACECFAC0397

6: Double: 9

7: Int: 0

8: ByteString: 0000000000000000

9: String: External Auth

2025/07/16 08:40:45: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:45: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 132

Boolean: false

2025/07/16 08:40:45: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:45: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 130

Boolean: false

2025/07/16 08:40:45: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:45: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:45: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:45: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:45: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:45: Line 378: UBJSGlobalClass.isNaN arguments
1: Double: 9

Boolean: false

2025/07/16 08:40:45: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:45: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:45: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 380: Number.toString arguments
1: Int: 16

String: 84

2025/07/16 08:40:45: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 380: Number.toString arguments
1: Int: 16

String: 82

2025/07/16 08:40:45: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:45: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:45: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 380: ByteString.toString arguments

String: 397E9ACECFAC0397

2025/07/16 08:40:45: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 380: Number.toString arguments
1: Int: 16

String: 9

2025/07/16 08:40:45: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:45: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 380: ByteString.toString arguments

String: 0000000000000000

2025/07/16 08:40:45: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 380: Function.ByteString arguments
1: String: !!+000863.c_sendApduS2(84, 82, 0, 0, 397E9ACECFAC0397, 9, 0, 0000000000000000, External Auth)

2: Double: 1

ByteString: 21212B3030303836332E635F73656E644170647553322838342C2038322C20302C20302C20333937453941434543464143303339372C20392C20302C20303030303030303030303030303030302C2045787465726E616C204175746829

2025/07/16 08:40:45: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:45: Line 384: Number.toString arguments
1: Int: 16

String: 84

2025/07/16 08:40:45: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:45: Line 384: String.toUpperCase arguments

String: 84

2025/07/16 08:40:45: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:45: Line 384: String.substr arguments
1: Int: -2

2: Int: 2

String: 84

2025/07/16 08:40:45: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:45: Line 385: Number.toString arguments
1: Int: 16

String: 82

2025/07/16 08:40:45: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:45: Line 385: String.toUpperCase arguments

String: 82

2025/07/16 08:40:45: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:45: Line 385: String.substr arguments
1: Int: -2

2: Int: 2

String: 82

2025/07/16 08:40:45: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:45: Line 386: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:45: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:45: Line 386: String.toUpperCase arguments

String: 0

2025/07/16 08:40:45: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:45: Line 386: String.substr arguments
1: Int: -2

2: Int: 2

String: 00

2025/07/16 08:40:45: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:45: Line 387: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:45: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:45: Line 387: String.toUpperCase arguments

String: 0

2025/07/16 08:40:45: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:45: Line 387: String.substr arguments
1: Int: -2

2: Int: 2

String: 00

2025/07/16 08:40:45: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:45: Line 388: Number.toString arguments
1: Int: 16

String: 10

2025/07/16 08:40:45: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:45: Line 388: String.toUpperCase arguments

String: 10

2025/07/16 08:40:45: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:45: Line 388: String.substr arguments
1: Int: -2

2: Int: 2

String: 10

2025/07/16 08:40:45: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:45: Line 392: ByteString.valueOf arguments

ByteString: 397E9ACECFAC0397

2025/07/16 08:40:45: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:45: Line 392: ByteString.toString arguments

String: 397E9ACECFAC0397

2025/07/16 08:40:45: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:45: Line 392: Function.ByteString arguments
1: String: 8482000010397E9ACECFAC0397

2: Double: 4

ByteString: 8482000010397E9ACECFAC0397

2025/07/16 08:40:45: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:45: Line 392: ByteString.pad arguments
1: Double: 37

ByteString: 8482000010397E9ACECFAC0397800000

2025/07/16 08:40:45: Line 393: var bsMac = crypto.sign(c_kSkuMac, nMech, bsCmd, bsIcv); // MAC cmd
2025/07/16 08:40:45: Line 393: Crypto.sign arguments
1: Key: 0188000000183440691AF148942C9241207CD4B3CA93FC21A39CB9C9B953000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101010000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C000000010100000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333930383030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B000000010100800001280000000101000000000300000000000000017000000001010100000000000000000000082D080434C7D62FD200000018FFC2DD2F0D1CED902883BEE1C2CEF7442B7ADB33A7E3BF01

2: Double: 9

3: ByteString: 8482000010397E9ACECFAC0397800000

4: ByteString: 0000000000000000

ByteString: B17E35986A058F0F

2025/07/16 08:40:45: Line 402: GPSystem.trace(sMsg); // Log
2025/07/16 08:40:45: Line 402: GPSystem.trace arguments
1: String: External Auth

2025/07/16 08:40:45: GPSystem.trace
External Auth

Boolean: true

2025/07/16 08:40:45: Line 403: var bsRtn = card.sendApdu(nCla,nIns,nP1,nP2,bsDat.concat(bsMac));
2025/07/16 08:40:45: Line 403: ByteString.concat arguments
1: ByteString: B17E35986A058F0F

ByteString: 397E9ACECFAC0397B17E35986A058F0F

2025/07/16 08:40:45: Line 403: var bsRtn = card.sendApdu(nCla,nIns,nP1,nP2,bsDat.concat(bsMac));
2025/07/16 08:40:45: Line 403: Card.sendApdu arguments
1: Int: 132

2: Int: 130

3: Int: 0

4: Int: 0

5: ByteString: 397E9ACECFAC0397B17E35986A058F0F

2025/07/16 08:40:45: DCC9kServer IC Commands
0000: 84 82 00 00 10 39 7E 9A-CE CF AC 03 97 B1 7E 35          9~       ~5
0010: 98 6A 05 8F 0F 21 53 57-02 2B 2A                     j   !SW +*     

2025/07/16 08:40:45: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:45: Line 407: c_bsChainMac = crypto.encrypt(c_kSkuMacT3s, Crypto.DES_CBC, bsMac); // ICV encryption for C-MAC session
2025/07/16 08:40:45: Line 407: Crypto.encrypt arguments
1: Key

2: Double: 2

3: ByteString: B17E35986A058F0F

ByteString: 7C1496A66E9A9332

2025/07/16 08:40:45: Line 411: new ByteString("!"+"!-"+CALL+"("+bsRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:45: Line 411: ByteString.toString arguments

String: 

2025/07/16 08:40:45: Line 411: new ByteString("!"+"!-"+CALL+"("+bsRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:45: Line 411: Function.ByteString arguments
1: String: !!-000863.c_sendApduS2()

2: Double: 1

ByteString: 21212D3030303836332E635F73656E644170647553322829

2025/07/16 08:40:45: Line 412: UBJSGlobalClass.c_sendApduS2 result
ByteString: 

2025/07/16 08:40:45: Line 343: new ByteString("!"+"!-"+CALL+"("+bsIuRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:45: Line 343: ByteString.toString arguments

String: FFFFFFFFFBF304EA7544010200048336AB90D041580BE6C8D37EA200

2025/07/16 08:40:45: Line 343: new ByteString("!"+"!-"+CALL+"("+bsIuRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:45: Line 343: Function.ByteString arguments
1: String: !!-000863.c_Auth(FFFFFFFFFBF304EA7544010200048336AB90D041580BE6C8D37EA200)

2: Double: 1

ByteString: 21212D3030303836332E635F4175746828464646464646464646424633303445413735343430313032303030343833333641423930443034313538304245364338443337454132303029

2025/07/16 08:40:45: Line 344: UBJSGlobalClass.c_Auth result
ByteString: FFFFFFFFFBF304EA7544010200048336AB90D041580BE6C8D37EA200

2025/07/16 08:40:45: Line 1038: function t_PsePerso()
2025/07/16 08:40:45: Line 1038: UBJSGlobalClass.t_PsePerso arguments

2025/07/16 08:40:45: Line 1045: new ByteString("!"+"!+"+CALL+"()",ASCII); // Log begin func
2025/07/16 08:40:45: Line 1045: Function.ByteString arguments
1: String: !!+000863.t_PsePerso()

2: Double: 1

ByteString: 21212B3030303836332E745F507365506572736F2829

2025/07/16 08:40:45: Line 1053: var bsAid = new ByteString("1PAY.SYS.DDF01",ASCII);
2025/07/16 08:40:45: Line 1053: Function.ByteString arguments
1: String: 1PAY.SYS.DDF01

2: Double: 1

ByteString: 315041592E5359532E4444463031

2025/07/16 08:40:45: Line 1054: var bsDel = new TLV(0x4F, bsAid, TLV.EMV).getTLV();
2025/07/16 08:40:45: Line 1054: Function.TLV arguments
1: Int: 79

2: ByteString: 315041592E5359532E4444463031

3: Double: 2

TLV: 4F0E315041592E5359532E4444463031

2025/07/16 08:40:45: Line 1054: var bsDel = new TLV(0x4F, bsAid, TLV.EMV).getTLV();
2025/07/16 08:40:45: Line 1054: TLV.getTLV arguments

ByteString: 4F0E315041592E5359532E4444463031

2025/07/16 08:40:45: Line 1055: card.sendApdu(0x80,0xE4,0x00,0x00,bsDel,0x00,[0x9000,0x6A88]);//Delete PSE
2025/07/16 08:40:45: Line 1055: Card.sendApdu arguments
1: Int: 128

2: Int: 228

3: Int: 0

4: Int: 0

5: ByteString: 4F0E315041592E5359532E4444463031

6: Int: 0

7: Array: 36864,27272

2025/07/16 08:40:45: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: E4 00 00 10 4F 0E 31 50-41 59 2E 53 59 53 2E 44         O 1PAY.SYS.D
0020: 44 46 30 31 00 21 53 57-02 2B 2A                    DF01 !SW +*     

2025/07/16 08:40:45: DCC9kServer IC Response: Result = 0, SW1SW2 = 6A88

ByteString: 

2025/07/16 08:40:45: Line 1061: var sAid = bsAid.toString();
2025/07/16 08:40:45: Line 1061: ByteString.toString arguments

String: 315041592E5359532E4444463031

2025/07/16 08:40:45: Line 437: function c_InstallFmt(sLodAid, sModAid, sAid, sPriv, sC9, sC6, sC7, sC8, sTok)
2025/07/16 08:40:45: Line 437: UBJSGlobalClass.c_InstallFmt arguments
1: String: A000000708000001010000

2: String: A000000708010001010001

3: String: 315041592E5359532E4444463031

4: String: 10

5: String: 

6: String: 

7: String: 

8: String: 

9: String: 

2025/07/16 08:40:45: Line 446: new ByteString("!"+"!+"+CALL+"("+sLodAid+", "+sModAid+", "+sAid+", "+sPriv+", "+sC9+", "+sC6+", "+sC7+", "+sC8+", "+sTok+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 446: Function.ByteString arguments
1: String: !!+000863.c_InstallFmt(A000000708000001010000, A000000708010001010001, 315041592E5359532E4444463031, 10, , , , , )

2: Double: 1

ByteString: 21212B3030303836332E635F496E7374616C6C466D7428413030303030303730383030303030313031303030302C20413030303030303730383031303030313031303030312C20333135303431353932453533353935333245343434343436333033312C2031302C202C202C202C202C2029

2025/07/16 08:40:45: Line 450: var bsLodAid = new ByteString(sLodAid, HEX);
2025/07/16 08:40:45: Line 450: Function.ByteString arguments
1: String: A000000708000001010000

2: Double: 4

ByteString: A000000708000001010000

2025/07/16 08:40:45: Line 451: var bsModAid = new ByteString(sModAid, HEX);
2025/07/16 08:40:45: Line 451: Function.ByteString arguments
1: String: A000000708010001010001

2: Double: 4

ByteString: A000000708010001010001

2025/07/16 08:40:45: Line 452: var bsAid    = new ByteString(sAid, HEX);
2025/07/16 08:40:45: Line 452: Function.ByteString arguments
1: String: 315041592E5359532E4444463031

2: Double: 4

ByteString: 315041592E5359532E4444463031

2025/07/16 08:40:45: Line 453: var bsPriv   = new ByteString(sPriv, HEX);
2025/07/16 08:40:45: Line 453: Function.ByteString arguments
1: String: 10

2: Double: 4

ByteString: 10

2025/07/16 08:40:45: Line 454: var bsTok    = new ByteString(sTok, HEX);
2025/07/16 08:40:45: Line 454: Function.ByteString arguments
1: String: 

2: Double: 4

ByteString: 

2025/07/16 08:40:45: Line 459: var tDat = new TLV(0xC9, new ByteString(sC9, HEX), TLV.EMV);
2025/07/16 08:40:45: Line 459: Function.ByteString arguments
1: String: 

2: Double: 4

ByteString: 

2025/07/16 08:40:45: Line 459: var tDat = new TLV(0xC9, new ByteString(sC9, HEX), TLV.EMV);
2025/07/16 08:40:45: Line 459: Function.TLV arguments
1: Int: 201

2: ByteString: 

3: Double: 2

TLV: C900

2025/07/16 08:40:45: Line 460: var bsApPrm = tDat.getTLV();
2025/07/16 08:40:45: Line 460: TLV.getTLV arguments

ByteString: C900

2025/07/16 08:40:45: Line 463: var bsSyPrm = new ByteString();
2025/07/16 08:40:45: Line 463: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:45: Line 464: var tlDat = new TLVList(new ByteString(), TLV.EMV);
2025/07/16 08:40:45: Line 464: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:45: Line 464: var tlDat = new TLVList(new ByteString(), TLV.EMV);
2025/07/16 08:40:45: Line 464: Function.TLVList arguments
1: ByteString: 

2: Double: 2

TLVList: 

2025/07/16 08:40:45: Line 481: var bsPrm = bsApPrm.concat(bsSyPrm);
2025/07/16 08:40:45: Line 481: ByteString.concat arguments
1: ByteString: 

ByteString: C900

2025/07/16 08:40:45: Line 485: var bsOut =         bsLodAid.getLV(TLV.EMV)
2025/07/16 08:40:45: Line 485: ByteString.getLV arguments
1: Double: 2

ByteString: 0BA000000708000001010000

2025/07/16 08:40:45: Line 486: .concat(bsModAid.getLV(TLV.EMV))
2025/07/16 08:40:45: Line 486: ByteString.getLV arguments
1: Double: 2

ByteString: 0BA000000708010001010001

2025/07/16 08:40:45: Line 486: .concat(bsModAid.getLV(TLV.EMV))
2025/07/16 08:40:45: Line 486: ByteString.concat arguments
1: ByteString: 0BA000000708010001010001

ByteString: 0BA0000007080000010100000BA000000708010001010001

2025/07/16 08:40:45: Line 487: .concat(   bsAid.getLV(TLV.EMV))
2025/07/16 08:40:45: Line 487: ByteString.getLV arguments
1: Double: 2

ByteString: 0E315041592E5359532E4444463031

2025/07/16 08:40:45: Line 487: .concat(   bsAid.getLV(TLV.EMV))
2025/07/16 08:40:45: Line 487: ByteString.concat arguments
1: ByteString: 0E315041592E5359532E4444463031

ByteString: 0BA0000007080000010100000BA0000007080100010100010E315041592E5359532E4444463031

2025/07/16 08:40:45: Line 488: .concat(  bsPriv.getLV(TLV.EMV))
2025/07/16 08:40:45: Line 488: ByteString.getLV arguments
1: Double: 2

ByteString: 0110

2025/07/16 08:40:45: Line 488: .concat(  bsPriv.getLV(TLV.EMV))
2025/07/16 08:40:45: Line 488: ByteString.concat arguments
1: ByteString: 0110

ByteString: 0BA0000007080000010100000BA0000007080100010100010E315041592E5359532E44444630310110

2025/07/16 08:40:45: Line 489: .concat(   bsPrm.getLV(TLV.EMV))
2025/07/16 08:40:45: Line 489: ByteString.getLV arguments
1: Double: 2

ByteString: 02C900

2025/07/16 08:40:45: Line 489: .concat(   bsPrm.getLV(TLV.EMV))
2025/07/16 08:40:45: Line 489: ByteString.concat arguments
1: ByteString: 02C900

ByteString: 0BA0000007080000010100000BA0000007080100010100010E315041592E5359532E4444463031011002C900

2025/07/16 08:40:45: Line 490: .concat(   bsTok.getLV(TLV.EMV));
2025/07/16 08:40:45: Line 490: ByteString.getLV arguments
1: Double: 2

ByteString: 00

2025/07/16 08:40:45: Line 490: .concat(   bsTok.getLV(TLV.EMV));
2025/07/16 08:40:45: Line 490: ByteString.concat arguments
1: ByteString: 00

ByteString: 0BA0000007080000010100000BA0000007080100010100010E315041592E5359532E4444463031011002C90000

2025/07/16 08:40:45: Line 494: new ByteString("!"+"!-"+CALL+"("+bsOut.toString()+")",ASCII); // Log end func
2025/07/16 08:40:45: Line 494: ByteString.toString arguments

String: 0BA0000007080000010100000BA0000007080100010100010E315041592E5359532E4444463031011002C90000

2025/07/16 08:40:45: Line 494: new ByteString("!"+"!-"+CALL+"("+bsOut.toString()+")",ASCII); // Log end func
2025/07/16 08:40:45: Line 494: Function.ByteString arguments
1: String: !!-000863.c_InstallFmt(0BA0000007080000010100000BA0000007080100010100010E315041592E5359532E4444463031011002C90000)

2: Double: 1

ByteString: 21212D3030303836332E635F496E7374616C6C466D742830424130303030303037303830303030303130313030303030424130303030303037303830313030303130313030303130453331353034313539324535333539353332453434343434363330333130313130303243393030303029

2025/07/16 08:40:45: Line 495: UBJSGlobalClass.c_InstallFmt result
ByteString: 0BA0000007080000010100000BA0000007080100010100010E315041592E5359532E4444463031011002C90000

2025/07/16 08:40:45: Line 1063: card.sendApdu(0x80,0xE6,0x0C,0x00,bsDat,0x00); //Install PSE
2025/07/16 08:40:45: Line 1063: Card.sendApdu arguments
1: Int: 128

2: Int: 230

3: Int: 12

4: Int: 0

5: ByteString: 0BA0000007080000010100000BA0000007080100010100010E315041592E5359532E4444463031011002C90000

6: Int: 0

2025/07/16 08:40:45: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: E6 0C 00 2D 0B A0 00 00-07 08 00 00 01 01 00 00        -            
0020: 0B A0 00 00 07 08 01 00-01 01 00 01 0E 31 50 41                  1PA
0030: 59 2E 53 59 53 2E 44 44-46 30 31 01 10 02 C9 00     Y.SYS.DDF01     
0040: 00 00 21 53 57 02 2B 2A-                              !SW +*        

2025/07/16 08:40:45: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: 00                                                                  

ByteString: 00

2025/07/16 08:40:45: Line 49: function c_Auth(bsAid, nMeth, nVr, nId, nSecLvl)
2025/07/16 08:40:45: Line 49: UBJSGlobalClass.c_Auth arguments
1: ByteString: 315041592E5359532E4444463031

2: Int: 22

3: Int: 0

4: Int: 0

5: Int: 0

2025/07/16 08:40:45: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:45: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 22

Boolean: false

2025/07/16 08:40:45: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:45: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:45: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:45: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:45: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:45: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:45: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 58: ByteString.toString arguments

String: 315041592E5359532E4444463031

2025/07/16 08:40:45: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 58: Number.toString arguments
1: Int: 10

String: 22

2025/07/16 08:40:45: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:45: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:45: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:45: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:45: Line 58: Function.ByteString arguments
1: String: !!+000863.c_Auth(315041592E5359532E4444463031, 22, 0, 0, 0)

2: Double: 1

ByteString: 21212B3030303836332E635F4175746828333135303431353932453533353935333245343434343436333033312C2032322C20302C20302C203029

2025/07/16 08:40:45: Line 62: var bsF001 = new ByteString("F001", HEX);
2025/07/16 08:40:45: Line 62: Function.ByteString arguments
1: String: F001

2: Double: 4

ByteString: F001

2025/07/16 08:40:45: Line 63: var bsF002 = new ByteString("F002", HEX);
2025/07/16 08:40:45: Line 63: Function.ByteString arguments
1: String: F002

2: Double: 4

ByteString: F002

2025/07/16 08:40:45: Line 64: var bsF003 = new ByteString("F003", HEX);
2025/07/16 08:40:45: Line 64: Function.ByteString arguments
1: String: F003

2: Double: 4

ByteString: F003

2025/07/16 08:40:45: Line 65: var bs0F01 = new ByteString("0F01", HEX);
2025/07/16 08:40:45: Line 65: Function.ByteString arguments
1: String: 0F01

2: Double: 4

ByteString: 0F01

2025/07/16 08:40:45: Line 66: var bs0F02 = new ByteString("0F02", HEX);
2025/07/16 08:40:45: Line 66: Function.ByteString arguments
1: String: 0F02

2: Double: 4

ByteString: 0F02

2025/07/16 08:40:45: Line 67: var bs0F03 = new ByteString("0F03", HEX);
2025/07/16 08:40:45: Line 67: Function.ByteString arguments
1: String: 0F03

2: Double: 4

ByteString: 0F03

2025/07/16 08:40:45: Line 68: var bs0182 = new ByteString("0182", HEX);
2025/07/16 08:40:45: Line 68: Function.ByteString arguments
1: String: 0182

2: Double: 4

ByteString: 0182

2025/07/16 08:40:45: Line 69: var bs0101 = new ByteString("0101", HEX);
2025/07/16 08:40:45: Line 69: Function.ByteString arguments
1: String: 0101

2: Double: 4

ByteString: 0101

2025/07/16 08:40:45: Line 70: var bs0181 = new ByteString("0181", HEX);
2025/07/16 08:40:45: Line 70: Function.ByteString arguments
1: String: 0181

2: Double: 4

ByteString: 0181

2025/07/16 08:40:45: Line 71: var bsZero12 = new ByteString("000000000000000000000000",HEX);
2025/07/16 08:40:45: Line 71: Function.ByteString arguments
1: String: 000000000000000000000000

2: Double: 4

ByteString: 000000000000000000000000

2025/07/16 08:40:45: Line 72: var bsZero8  = new ByteString("0000000000000000",HEX);
2025/07/16 08:40:45: Line 72: Function.ByteString arguments
1: String: 0000000000000000

2: Double: 4

ByteString: 0000000000000000

2025/07/16 08:40:45: Line 77: card.sendApdu(0x00,0xA4,0x04,0x00,bsAid,0x00); //Select AID
2025/07/16 08:40:45: Line 77: Card.sendApdu arguments
1: Int: 0

2: Int: 164

3: Int: 4

4: Int: 0

5: ByteString: 315041592E5359532E4444463031

6: Int: 0

2025/07/16 08:40:45: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 00     !IOCTL ISOCase4 
0010: A4 04 00 0E 31 50 41 59-2E 53 59 53 2E 44 44 46         1PAY.SYS.DDF
0020: 30 31 00 21 53 57 02 2B-2A                          01 !SW +*       

2025/07/16 08:40:46: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: 6F 10 84 0E 31 50 41 59-2E 53 59 53 2E 44 44 46     o   1PAY.SYS.DDF
0010: 30 31                                               01              

ByteString: 6F10840E315041592E5359532E4444463031

2025/07/16 08:40:46: Line 81: var bsRterm = crypto.generateRandom(8);
2025/07/16 08:40:46: Line 81: Crypto.generateRandom arguments
1: Int: 8

ByteString: 1CB99C23870E2937

2025/07/16 08:40:46: Line 87: var bsIuRtn = card.sendApdu(0x80,0x50,nVr,nId,bsRterm,0x00);//Init update
2025/07/16 08:40:46: Line 87: Card.sendApdu arguments
1: Int: 128

2: Int: 80

3: Int: 0

4: Int: 0

5: ByteString: 1CB99C23870E2937

6: Int: 0

2025/07/16 08:40:46: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: 50 00 00 08 1C B9 9C 23-87 0E 29 37 00 21 53 57     P      #  )7 !SW
0020: 02 2B 2A                                             +*             

2025/07/16 08:40:46: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: FF FF FF FF FB F3 04 EA-75 44 01 02 00 05 FE DE             uD      
0010: 94 D7 4E 8D C0 E0 19 AB-12 68 60 78                   N      h`x    

ByteString: FFFFFFFFFBF304EA754401020005FEDE94D74E8DC0E019AB12686078

2025/07/16 08:40:46: Line 235: var bsIuDiv  = bsIuRtn.bytes(4,6);
2025/07/16 08:40:46: Line 235: ByteString.bytes arguments
1: Int: 4

2: Int: 6

ByteString: FBF304EA7544

2025/07/16 08:40:46: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:46: Line 236: ByteString.concat arguments
1: ByteString: F001

ByteString: FBF304EA7544F001

2025/07/16 08:40:46: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:46: Line 236: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F001FBF304EA7544

2025/07/16 08:40:46: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:46: Line 236: ByteString.concat arguments
1: ByteString: 0F01

ByteString: FBF304EA7544F001FBF304EA75440F01

2025/07/16 08:40:46: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:46: Line 237: ByteString.concat arguments
1: ByteString: F002

ByteString: FBF304EA7544F002

2025/07/16 08:40:46: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:46: Line 237: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F002FBF304EA7544

2025/07/16 08:40:46: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:46: Line 237: ByteString.concat arguments
1: ByteString: 0F02

ByteString: FBF304EA7544F002FBF304EA75440F02

2025/07/16 08:40:46: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:46: Line 238: ByteString.concat arguments
1: ByteString: F003

ByteString: FBF304EA7544F003

2025/07/16 08:40:46: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:46: Line 238: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F003FBF304EA7544

2025/07/16 08:40:46: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:46: Line 238: ByteString.concat arguments
1: ByteString: 0F03

ByteString: FBF304EA7544F003FBF304EA75440F03

2025/07/16 08:40:46: Line 242: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsEncDiv, c_kDKenc);
2025/07/16 08:40:46: Line 242: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F001FBF304EA75440F01

4: Key

Void: undefined

2025/07/16 08:40:46: Line 243: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsMacDiv, c_kDKmac);
2025/07/16 08:40:46: Line 243: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F002FBF304EA75440F02

4: Key

Void: undefined

2025/07/16 08:40:46: Line 244: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsDekDiv, c_kDKdek);
2025/07/16 08:40:46: Line 244: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F003FBF304EA75440F03

4: Key

Void: undefined

2025/07/16 08:40:46: Line 245: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsDekDiv, c_kDKdekT0);
2025/07/16 08:40:46: Line 245: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F003FBF304EA75440F03

4: Key

Void: undefined

2025/07/16 08:40:46: Line 247: c_kDKenc.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:46: Line 247: Key.getKcv arguments
1: Double: 1048576

ByteString: 2F60DAE9569C6DE8

2025/07/16 08:40:46: Line 248: c_kDKmac.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:46: Line 248: Key.getKcv arguments
1: Double: 1048576

ByteString: 5CCE4854D71634D1

2025/07/16 08:40:46: Line 249: c_kDKdek.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:46: Line 249: Key.getKcv arguments
1: Double: 1048576

ByteString: 36B975605BE0D863

2025/07/16 08:40:46: Line 253: var bsSeqPad = bsIuRtn.bytes(12,2).concat(bsZero12); // Get and pad sequence count
2025/07/16 08:40:46: Line 253: ByteString.bytes arguments
1: Int: 12

2: Int: 2

ByteString: 0005

2025/07/16 08:40:46: Line 253: var bsSeqPad = bsIuRtn.bytes(12,2).concat(bsZero12); // Get and pad sequence count
2025/07/16 08:40:46: Line 253: ByteString.concat arguments
1: ByteString: 000000000000000000000000

ByteString: 0005000000000000000000000000

2025/07/16 08:40:46: Line 254: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEnc);
2025/07/16 08:40:46: Line 254: ByteString.concat arguments
1: ByteString: 0005000000000000000000000000

ByteString: 01820005000000000000000000000000

2025/07/16 08:40:46: Line 254: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEnc);
2025/07/16 08:40:46: Line 254: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01820005000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:46: Line 255: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEncT2);
2025/07/16 08:40:46: Line 255: ByteString.concat arguments
1: ByteString: 0005000000000000000000000000

ByteString: 01820005000000000000000000000000

2025/07/16 08:40:46: Line 255: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEncT2);
2025/07/16 08:40:46: Line 255: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01820005000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:46: Line 256: crypto.deriveKey(c_kDKmac, Crypto.DES_CBC, bs0101.concat(bsSeqPad), c_kSkuMac);
2025/07/16 08:40:46: Line 256: ByteString.concat arguments
1: ByteString: 0005000000000000000000000000

ByteString: 01010005000000000000000000000000

2025/07/16 08:40:46: Line 256: crypto.deriveKey(c_kDKmac, Crypto.DES_CBC, bs0101.concat(bsSeqPad), c_kSkuMac);
2025/07/16 08:40:46: Line 256: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01010005000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:46: Line 257: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDek);
2025/07/16 08:40:46: Line 257: ByteString.concat arguments
1: ByteString: 0005000000000000000000000000

ByteString: 01810005000000000000000000000000

2025/07/16 08:40:46: Line 257: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDek);
2025/07/16 08:40:46: Line 257: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01810005000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:46: Line 258: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDekT3);
2025/07/16 08:40:46: Line 258: ByteString.concat arguments
1: ByteString: 0005000000000000000000000000

ByteString: 01810005000000000000000000000000

2025/07/16 08:40:46: Line 258: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDekT3);
2025/07/16 08:40:46: Line 258: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01810005000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:46: Line 260: c_kSkuEnc.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:46: Line 260: Key.getKcv arguments
1: Double: 1048576

ByteString: 331B2D088A671E7C

2025/07/16 08:40:46: Line 261: c_kSkuMac.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:46: Line 261: Key.getKcv arguments
1: Double: 1048576

ByteString: EAA0CE540ED5C38E

2025/07/16 08:40:46: Line 262: c_kSkuDek.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:46: Line 262: Key.getKcv arguments
1: Double: 1048576

ByteString: 9F5302DDD9BB8486

2025/07/16 08:40:46: Line 266: var kTmp = new Key();
2025/07/16 08:40:46: Line 266: Function.Key arguments

Key: 

2025/07/16 08:40:46: Line 267: crypto.wrap(c_kKek, Crypto.DES_ECB, c_kSkuMac, kTmp);
2025/07/16 08:40:46: Line 267: Crypto.wrap arguments
1: Key

2: Double: 5

3: Key

4: Key: 

Void: undefined

2025/07/16 08:40:46: Line 268: var bsTmp = new ByteString();
2025/07/16 08:40:46: Line 268: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:46: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:46: Line 269: Key.getComponent arguments
1: Double: 393216

ByteString: 9DA9539DD560A3FBF1CF193712523936

2025/07/16 08:40:46: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:46: Line 269: ByteString.left arguments
1: Int: 8

ByteString: 9DA9539DD560A3FB

2025/07/16 08:40:46: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:46: Line 269: Art.execute arguments
1: String: UBDesECB

2: String: DecryptKey3

3: ByteString

4: ByteString: 9DA9539DD560A3FB

5: ByteString: 

Int: 0

2025/07/16 08:40:46: Line 270: c_kSkuMacT3s.setComponent(Key.DES, bsTmp);
2025/07/16 08:40:46: Line 270: Key.setComponent arguments
1: Double: 393216

2: ByteString

Void: undefined

2025/07/16 08:40:46: Line 315: var bsRcard = bsIuRtn.bytes(12,8);      // Get card random number
2025/07/16 08:40:46: Line 315: ByteString.bytes arguments
1: Int: 12

2: Int: 8

ByteString: 0005FEDE94D74E8D

2025/07/16 08:40:46: Line 316: var bsMacDat = bsRterm.concat(bsRcard).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:46: Line 316: ByteString.concat arguments
1: ByteString: 0005FEDE94D74E8D

ByteString: 1CB99C23870E29370005FEDE94D74E8D

2025/07/16 08:40:46: Line 316: var bsMacDat = bsRterm.concat(bsRcard).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:46: Line 316: ByteString.pad arguments
1: Double: 37

ByteString: 1CB99C23870E29370005FEDE94D74E8D8000000000000000

2025/07/16 08:40:46: Line 317: var bsMac = crypto.sign(c_kSkuEncT2, Crypto.DES_MAC, bsMacDat);
2025/07/16 08:40:46: Line 317: Crypto.sign arguments
1: Key

2: Double: 8

3: ByteString: 1CB99C23870E29370005FEDE94D74E8D8000000000000000

ByteString: C0E019AB12686078

2025/07/16 08:40:46: Line 321: var bsCrdCg = bsIuRtn.bytes(20,8); // Card's cryptogram
2025/07/16 08:40:46: Line 321: ByteString.bytes arguments
1: Int: 20

2: Int: 8

ByteString: C0E019AB12686078

2025/07/16 08:40:46: Line 322: if (bsMac.equals(bsCrdCg))
2025/07/16 08:40:46: Line 322: ByteString.equals arguments
1: ByteString: C0E019AB12686078

Int: 1

2025/07/16 08:40:46: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:46: Line 323: ByteString.toString arguments

String: C0E019AB12686078

2025/07/16 08:40:46: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:46: Line 323: ByteString.toString arguments

String: C0E019AB12686078

2025/07/16 08:40:46: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:46: Line 323: GPSystem.trace arguments
1: String: 000863.c_Auth(): Authentication passed; Card's cryptogram (C0E019AB12686078) matches calculated cryptogram (C0E019AB12686078).

2025/07/16 08:40:46: GPSystem.trace
000863.c_Auth(): Authentication passed; Card's cryptogram (C0E019AB12686078) matches calculated cryptogram (C0E019AB12686078).

Boolean: true

2025/07/16 08:40:46: Line 331: var bsCgDat = bsRcard.concat(bsRterm).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:46: Line 331: ByteString.concat arguments
1: ByteString: 1CB99C23870E2937

ByteString: 0005FEDE94D74E8D1CB99C23870E2937

2025/07/16 08:40:46: Line 331: var bsCgDat = bsRcard.concat(bsRterm).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:46: Line 331: ByteString.pad arguments
1: Double: 37

ByteString: 0005FEDE94D74E8D1CB99C23870E29378000000000000000

2025/07/16 08:40:46: Line 332: var bsCg = crypto.sign(c_kSkuEncT2, Crypto.DES_MAC, bsCgDat);
2025/07/16 08:40:46: Line 332: Crypto.sign arguments
1: Key

2: Double: 8

3: ByteString: 0005FEDE94D74E8D1CB99C23870E29378000000000000000

ByteString: 8EDDA4106BB7725D

2025/07/16 08:40:46: Line 371: function c_sendApduS2(nCla, nIns, nP1, nP2, bsDat, nMech, nSecLvl, bsIcv, sMsg)
2025/07/16 08:40:46: Line 371: UBJSGlobalClass.c_sendApduS2 arguments
1: Int: 132

2: Int: 130

3: Int: 0

4: Int: 0

5: ByteString: 8EDDA4106BB7725D

6: Double: 9

7: Int: 0

8: ByteString: 0000000000000000

9: String: External Auth

2025/07/16 08:40:46: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:46: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 132

Boolean: false

2025/07/16 08:40:46: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:46: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 130

Boolean: false

2025/07/16 08:40:46: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:46: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:46: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:46: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:46: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:46: Line 378: UBJSGlobalClass.isNaN arguments
1: Double: 9

Boolean: false

2025/07/16 08:40:46: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:46: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:46: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:46: Line 380: Number.toString arguments
1: Int: 16

String: 84

2025/07/16 08:40:46: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:46: Line 380: Number.toString arguments
1: Int: 16

String: 82

2025/07/16 08:40:46: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:46: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:46: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:46: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:46: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:46: Line 380: ByteString.toString arguments

String: 8EDDA4106BB7725D

2025/07/16 08:40:46: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:46: Line 380: Number.toString arguments
1: Int: 16

String: 9

2025/07/16 08:40:46: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:46: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:46: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:46: Line 380: ByteString.toString arguments

String: 0000000000000000

2025/07/16 08:40:46: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:46: Line 380: Function.ByteString arguments
1: String: !!+000863.c_sendApduS2(84, 82, 0, 0, 8EDDA4106BB7725D, 9, 0, 0000000000000000, External Auth)

2: Double: 1

ByteString: 21212B3030303836332E635F73656E644170647553322838342C2038322C20302C20302C20384544444134313036424237373235442C20392C20302C20303030303030303030303030303030302C2045787465726E616C204175746829

2025/07/16 08:40:46: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:46: Line 384: Number.toString arguments
1: Int: 16

String: 84

2025/07/16 08:40:46: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:46: Line 384: String.toUpperCase arguments

String: 84

2025/07/16 08:40:46: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:46: Line 384: String.substr arguments
1: Int: -2

2: Int: 2

String: 84

2025/07/16 08:40:46: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:46: Line 385: Number.toString arguments
1: Int: 16

String: 82

2025/07/16 08:40:46: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:46: Line 385: String.toUpperCase arguments

String: 82

2025/07/16 08:40:46: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:46: Line 385: String.substr arguments
1: Int: -2

2: Int: 2

String: 82

2025/07/16 08:40:46: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:46: Line 386: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:46: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:46: Line 386: String.toUpperCase arguments

String: 0

2025/07/16 08:40:46: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:46: Line 386: String.substr arguments
1: Int: -2

2: Int: 2

String: 00

2025/07/16 08:40:46: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:46: Line 387: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:46: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:46: Line 387: String.toUpperCase arguments

String: 0

2025/07/16 08:40:46: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:46: Line 387: String.substr arguments
1: Int: -2

2: Int: 2

String: 00

2025/07/16 08:40:46: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:46: Line 388: Number.toString arguments
1: Int: 16

String: 10

2025/07/16 08:40:46: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:46: Line 388: String.toUpperCase arguments

String: 10

2025/07/16 08:40:46: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:46: Line 388: String.substr arguments
1: Int: -2

2: Int: 2

String: 10

2025/07/16 08:40:46: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:46: Line 392: ByteString.valueOf arguments

ByteString: 8EDDA4106BB7725D

2025/07/16 08:40:46: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:46: Line 392: ByteString.toString arguments

String: 8EDDA4106BB7725D

2025/07/16 08:40:46: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:46: Line 392: Function.ByteString arguments
1: String: 84820000108EDDA4106BB7725D

2: Double: 4

ByteString: 84820000108EDDA4106BB7725D

2025/07/16 08:40:46: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:46: Line 392: ByteString.pad arguments
1: Double: 37

ByteString: 84820000108EDDA4106BB7725D800000

2025/07/16 08:40:46: Line 393: var bsMac = crypto.sign(c_kSkuMac, nMech, bsCmd, bsIcv); // MAC cmd
2025/07/16 08:40:46: Line 393: Crypto.sign arguments
1: Key

2: Double: 9

3: ByteString: 84820000108EDDA4106BB7725D800000

4: ByteString: 0000000000000000

ByteString: CFADEBB12E6B19FA

2025/07/16 08:40:46: Line 402: GPSystem.trace(sMsg); // Log
2025/07/16 08:40:46: Line 402: GPSystem.trace arguments
1: String: External Auth

2025/07/16 08:40:46: GPSystem.trace
External Auth

Boolean: true

2025/07/16 08:40:46: Line 403: var bsRtn = card.sendApdu(nCla,nIns,nP1,nP2,bsDat.concat(bsMac));
2025/07/16 08:40:46: Line 403: ByteString.concat arguments
1: ByteString: CFADEBB12E6B19FA

ByteString: 8EDDA4106BB7725DCFADEBB12E6B19FA

2025/07/16 08:40:46: Line 403: var bsRtn = card.sendApdu(nCla,nIns,nP1,nP2,bsDat.concat(bsMac));
2025/07/16 08:40:46: Line 403: Card.sendApdu arguments
1: Int: 132

2: Int: 130

3: Int: 0

4: Int: 0

5: ByteString: 8EDDA4106BB7725DCFADEBB12E6B19FA

2025/07/16 08:40:46: DCC9kServer IC Commands
0000: 84 82 00 00 10 8E DD A4-10 6B B7 72 5D CF AD EB              k r]   
0010: B1 2E 6B 19 FA 21 53 57-02 2B 2A                     .k  !SW +*     

2025/07/16 08:40:46: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:46: Line 407: c_bsChainMac = crypto.encrypt(c_kSkuMacT3s, Crypto.DES_CBC, bsMac); // ICV encryption for C-MAC session
2025/07/16 08:40:46: Line 407: Crypto.encrypt arguments
1: Key

2: Double: 2

3: ByteString: CFADEBB12E6B19FA

ByteString: 326BB23AEA570F29

2025/07/16 08:40:46: Line 411: new ByteString("!"+"!-"+CALL+"("+bsRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:46: Line 411: ByteString.toString arguments

String: 

2025/07/16 08:40:46: Line 411: new ByteString("!"+"!-"+CALL+"("+bsRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:46: Line 411: Function.ByteString arguments
1: String: !!-000863.c_sendApduS2()

2: Double: 1

ByteString: 21212D3030303836332E635F73656E644170647553322829

2025/07/16 08:40:46: Line 412: UBJSGlobalClass.c_sendApduS2 result
ByteString: 

2025/07/16 08:40:46: Line 343: new ByteString("!"+"!-"+CALL+"("+bsIuRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:46: Line 343: ByteString.toString arguments

String: FFFFFFFFFBF304EA754401020005FEDE94D74E8DC0E019AB12686078

2025/07/16 08:40:46: Line 343: new ByteString("!"+"!-"+CALL+"("+bsIuRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:46: Line 343: Function.ByteString arguments
1: String: !!-000863.c_Auth(FFFFFFFFFBF304EA754401020005FEDE94D74E8DC0E019AB12686078)

2: Double: 1

ByteString: 21212D3030303836332E635F4175746828464646464646464646424633303445413735343430313032303030354645444539344437344538444330453031394142313236383630373829

2025/07/16 08:40:46: Line 344: UBJSGlobalClass.c_Auth result
ByteString: FFFFFFFFFBF304EA754401020005FEDE94D74E8DC0E019AB12686078

2025/07/16 08:40:46: Line 1073: var bsDat =        art.getVariableValue("tCtP3i_4F_Aid")
2025/07/16 08:40:46: Line 1073: Art.getVariableValue arguments
1: String: tCtP3i_4F_Aid

ByteString: 4F07A0000000031010

2025/07/16 08:40:46: Line 1074: .concat(art.getVariableValue("tCtP3i_50_ApLb"))
2025/07/16 08:40:46: Line 1074: Art.getVariableValue arguments
1: String: tCtP3i_50_ApLb

ByteString: 500A56697361204465626974

2025/07/16 08:40:46: Line 1074: .concat(art.getVariableValue("tCtP3i_50_ApLb"))
2025/07/16 08:40:46: Line 1074: ByteString.concat arguments
1: ByteString: 500A56697361204465626974

ByteString: 4F07A0000000031010500A56697361204465626974

2025/07/16 08:40:46: Line 1075: .concat(art.getVariableValue("tCtP3i_9F12_Apn"))
2025/07/16 08:40:46: Line 1075: Art.getVariableValue arguments
1: String: tCtP3i_9F12_Apn

ByteString: 9F120A56697361204465626974

2025/07/16 08:40:46: Line 1075: .concat(art.getVariableValue("tCtP3i_9F12_Apn"))
2025/07/16 08:40:46: Line 1075: ByteString.concat arguments
1: ByteString: 9F120A56697361204465626974

ByteString: 4F07A0000000031010500A566973612044656269749F120A56697361204465626974

2025/07/16 08:40:46: Line 1076: .concat(art.getVariableValue("tCtP3i_87_Api"))
2025/07/16 08:40:46: Line 1076: Art.getVariableValue arguments
1: String: tCtP3i_87_Api

ByteString: 870101

2025/07/16 08:40:46: Line 1076: .concat(art.getVariableValue("tCtP3i_87_Api"))
2025/07/16 08:40:46: Line 1076: ByteString.concat arguments
1: ByteString: 870101

ByteString: 4F07A0000000031010500A566973612044656269749F120A56697361204465626974870101

2025/07/16 08:40:46: Line 1077: .concat(art.getVariableValue("tPsP3i_73_Ddt"));
2025/07/16 08:40:46: Line 1077: Art.getVariableValue arguments
1: String: tPsP3i_73_Ddt

ByteString: 

2025/07/16 08:40:46: Line 1077: .concat(art.getVariableValue("tPsP3i_73_Ddt"));
2025/07/16 08:40:46: Line 1077: ByteString.concat arguments
1: ByteString: 

ByteString: 4F07A0000000031010500A566973612044656269749F120A56697361204465626974870101

2025/07/16 08:40:46: Line 1078: var bs61 = new TLV(0x61, bsDat, TLV.EMV).getTLV();
2025/07/16 08:40:46: Line 1078: Function.TLV arguments
1: Int: 97

2: ByteString: 4F07A0000000031010500A566973612044656269749F120A56697361204465626974870101

3: Double: 2

TLV: 61254F07A0000000031010500A566973612044656269749F120A56697361204465626974870101

2025/07/16 08:40:46: Line 1078: var bs61 = new TLV(0x61, bsDat, TLV.EMV).getTLV();
2025/07/16 08:40:46: Line 1078: TLV.getTLV arguments

ByteString: 61254F07A0000000031010500A566973612044656269749F120A56697361204465626974870101

2025/07/16 08:40:46: Line 1079: var bs70 = new TLV(0x70, bs61, TLV.EMV).getTLV();
2025/07/16 08:40:46: Line 1079: Function.TLV arguments
1: Int: 112

2: ByteString: 61254F07A0000000031010500A566973612044656269749F120A56697361204465626974870101

3: Double: 2

TLV: 702761254F07A0000000031010500A566973612044656269749F120A56697361204465626974870101

2025/07/16 08:40:46: Line 1079: var bs70 = new TLV(0x70, bs61, TLV.EMV).getTLV();
2025/07/16 08:40:46: Line 1079: TLV.getTLV arguments

ByteString: 702761254F07A0000000031010500A566973612044656269749F120A56697361204465626974870101

2025/07/16 08:40:46: Line 1083: var bsDgi = new TLV(0x0101, bs70, TLV.DGI).getTLV();
2025/07/16 08:40:46: Line 1083: Function.TLV arguments
1: Int: 257

2: ByteString: 702761254F07A0000000031010500A566973612044656269749F120A56697361204465626974870101

3: Double: 1

TLV: 010129702761254F07A0000000031010500A566973612044656269749F120A56697361204465626974870101

2025/07/16 08:40:46: Line 1083: var bsDgi = new TLV(0x0101, bs70, TLV.DGI).getTLV();
2025/07/16 08:40:46: Line 1083: TLV.getTLV arguments

ByteString: 010129702761254F07A0000000031010500A566973612044656269749F120A56697361204465626974870101

2025/07/16 08:40:46: Line 1084: card.sendApdu(0x80,0xE2,0x00,nP2++,bsDgi); //PSE 0101
2025/07/16 08:40:46: Line 1084: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 0

4: Int: 0

5: ByteString: 010129702761254F07A0000000031010500A566973612044656269749F120A56697361204465626974870101

2025/07/16 08:40:46: DCC9kServer IC Commands
0000: 80 E2 00 00 2C 01 01 29-70 27 61 25 4F 07 A0 00         ,  )p'a%O   
0010: 00 00 03 10 10 50 0A 56-69 73 61 20 44 65 62 69          P Visa Debi
0020: 74 9F 12 0A 56 69 73 61-20 44 65 62 69 74 87 01     t   Visa Debit  
0030: 01 21 53 57 02 2B 2A                                 !SW +*         

2025/07/16 08:40:46: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:46: Line 1090: var bsDat =        new ByteString("880101",HEX)
2025/07/16 08:40:46: Line 1090: Function.ByteString arguments
1: String: 880101

2: Double: 4

ByteString: 880101

2025/07/16 08:40:46: Line 1091: .concat(art.getVariableValue("tCtP3i_5F2D_Lng"))
2025/07/16 08:40:46: Line 1091: Art.getVariableValue arguments
1: String: tCtP3i_5F2D_Lng

ByteString: 5F2D02656E

2025/07/16 08:40:46: Line 1091: .concat(art.getVariableValue("tCtP3i_5F2D_Lng"))
2025/07/16 08:40:46: Line 1091: ByteString.concat arguments
1: ByteString: 5F2D02656E

ByteString: 8801015F2D02656E

2025/07/16 08:40:46: Line 1092: .concat(art.getVariableValue("tCtP3i_9F11_Icti"))
2025/07/16 08:40:46: Line 1092: Art.getVariableValue arguments
1: String: tCtP3i_9F11_Icti

ByteString: 9F110101

2025/07/16 08:40:46: Line 1092: .concat(art.getVariableValue("tCtP3i_9F11_Icti"))
2025/07/16 08:40:46: Line 1092: ByteString.concat arguments
1: ByteString: 9F110101

ByteString: 8801015F2D02656E9F110101

2025/07/16 08:40:46: Line 1093: .concat(art.getVariableValue("tPsP3i_BF0C_FciDd"));
2025/07/16 08:40:46: Line 1093: Art.getVariableValue arguments
1: String: tPsP3i_BF0C_FciDd

ByteString: 

2025/07/16 08:40:46: Line 1093: .concat(art.getVariableValue("tPsP3i_BF0C_FciDd"));
2025/07/16 08:40:46: Line 1093: ByteString.concat arguments
1: ByteString: 

ByteString: 8801015F2D02656E9F110101

2025/07/16 08:40:46: Line 1094: var bsA5 = new TLV(0xA5, bsDat, TLV.EMV).getTLV();
2025/07/16 08:40:46: Line 1094: Function.TLV arguments
1: Int: 165

2: ByteString: 8801015F2D02656E9F110101

3: Double: 2

TLV: A50C8801015F2D02656E9F110101

2025/07/16 08:40:46: Line 1094: var bsA5 = new TLV(0xA5, bsDat, TLV.EMV).getTLV();
2025/07/16 08:40:46: Line 1094: TLV.getTLV arguments

ByteString: A50C8801015F2D02656E9F110101

2025/07/16 08:40:46: Line 1098: var bsDgi = new TLV(0x9102, bsA5, TLV.DGI).getTLV();
2025/07/16 08:40:46: Line 1098: Function.TLV arguments
1: Int: 37122

2: ByteString: A50C8801015F2D02656E9F110101

3: Double: 1

TLV: 91020EA50C8801015F2D02656E9F110101

2025/07/16 08:40:46: Line 1098: var bsDgi = new TLV(0x9102, bsA5, TLV.DGI).getTLV();
2025/07/16 08:40:46: Line 1098: TLV.getTLV arguments

ByteString: 91020EA50C8801015F2D02656E9F110101

2025/07/16 08:40:46: Line 1099: card.sendApdu(0x80,0xE2,0x80,nP2++,bsDgi); //PSE 9102
2025/07/16 08:40:46: Line 1099: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 128

4: Int: 1

5: ByteString: 91020EA50C8801015F2D02656E9F110101

2025/07/16 08:40:46: DCC9kServer IC Commands
0000: 80 E2 80 01 11 91 02 0E-A5 0C 88 01 01 5F 2D 02                  _- 
0010: 65 6E 9F 11 01 01 21 53-57 02 2B 2A                 en    !SW +*    

2025/07/16 08:40:46: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:46: Line 1103: new ByteString("!"+"!-"+CALL+"()",ASCII); // Log end func
2025/07/16 08:40:46: Line 1103: Function.ByteString arguments
1: String: !!-000863.t_PsePerso()

2: Double: 1

ByteString: 21212D3030303836332E745F507365506572736F2829

2025/07/16 08:40:46: Line 1104: UBJSGlobalClass.t_PsePerso result
Void: undefined

2025/07/16 08:40:46: Line 49: function c_Auth(bsAid, nMeth, nVr, nId, nSecLvl)
2025/07/16 08:40:46: Line 49: UBJSGlobalClass.c_Auth arguments
1: ByteString: A000000151000000

2: Int: 22

3: Int: 0

4: Int: 0

5: Int: 0

2025/07/16 08:40:46: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:46: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 22

Boolean: false

2025/07/16 08:40:46: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:46: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:46: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:46: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:46: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:46: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:46: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:46: Line 58: ByteString.toString arguments

String: A000000151000000

2025/07/16 08:40:46: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:46: Line 58: Number.toString arguments
1: Int: 10

String: 22

2025/07/16 08:40:46: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:46: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:46: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:46: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:46: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:46: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:46: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:46: Line 58: Function.ByteString arguments
1: String: !!+000863.c_Auth(A000000151000000, 22, 0, 0, 0)

2: Double: 1

ByteString: 21212B3030303836332E635F4175746828413030303030303135313030303030302C2032322C20302C20302C203029

2025/07/16 08:40:46: Line 62: var bsF001 = new ByteString("F001", HEX);
2025/07/16 08:40:46: Line 62: Function.ByteString arguments
1: String: F001

2: Double: 4

ByteString: F001

2025/07/16 08:40:46: Line 63: var bsF002 = new ByteString("F002", HEX);
2025/07/16 08:40:46: Line 63: Function.ByteString arguments
1: String: F002

2: Double: 4

ByteString: F002

2025/07/16 08:40:46: Line 64: var bsF003 = new ByteString("F003", HEX);
2025/07/16 08:40:46: Line 64: Function.ByteString arguments
1: String: F003

2: Double: 4

ByteString: F003

2025/07/16 08:40:46: Line 65: var bs0F01 = new ByteString("0F01", HEX);
2025/07/16 08:40:46: Line 65: Function.ByteString arguments
1: String: 0F01

2: Double: 4

ByteString: 0F01

2025/07/16 08:40:46: Line 66: var bs0F02 = new ByteString("0F02", HEX);
2025/07/16 08:40:46: Line 66: Function.ByteString arguments
1: String: 0F02

2: Double: 4

ByteString: 0F02

2025/07/16 08:40:46: Line 67: var bs0F03 = new ByteString("0F03", HEX);
2025/07/16 08:40:46: Line 67: Function.ByteString arguments
1: String: 0F03

2: Double: 4

ByteString: 0F03

2025/07/16 08:40:46: Line 68: var bs0182 = new ByteString("0182", HEX);
2025/07/16 08:40:46: Line 68: Function.ByteString arguments
1: String: 0182

2: Double: 4

ByteString: 0182

2025/07/16 08:40:46: Line 69: var bs0101 = new ByteString("0101", HEX);
2025/07/16 08:40:46: Line 69: Function.ByteString arguments
1: String: 0101

2: Double: 4

ByteString: 0101

2025/07/16 08:40:46: Line 70: var bs0181 = new ByteString("0181", HEX);
2025/07/16 08:40:46: Line 70: Function.ByteString arguments
1: String: 0181

2: Double: 4

ByteString: 0181

2025/07/16 08:40:46: Line 71: var bsZero12 = new ByteString("000000000000000000000000",HEX);
2025/07/16 08:40:46: Line 71: Function.ByteString arguments
1: String: 000000000000000000000000

2: Double: 4

ByteString: 000000000000000000000000

2025/07/16 08:40:46: Line 72: var bsZero8  = new ByteString("0000000000000000",HEX);
2025/07/16 08:40:46: Line 72: Function.ByteString arguments
1: String: 0000000000000000

2: Double: 4

ByteString: 0000000000000000

2025/07/16 08:40:46: Line 77: card.sendApdu(0x00,0xA4,0x04,0x00,bsAid,0x00); //Select AID
2025/07/16 08:40:46: Line 77: Card.sendApdu arguments
1: Int: 0

2: Int: 164

3: Int: 4

4: Int: 0

5: ByteString: A000000151000000

6: Int: 0

2025/07/16 08:40:46: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 00     !IOCTL ISOCase4 
0010: A4 04 00 08 A0 00 00 01-51 00 00 00 00 21 53 57             Q    !SW
0020: 02 2B 2A                                             +*             

2025/07/16 08:40:46: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: 6F 10 A5 04 9F 65 01 FF-84 08 A0 00 00 01 51 00     o    e        Q 
0010: 00 00                                                               

ByteString: 6F10A5049F6501FF8408A000000151000000

2025/07/16 08:40:46: Line 81: var bsRterm = crypto.generateRandom(8);
2025/07/16 08:40:46: Line 81: Crypto.generateRandom arguments
1: Int: 8

ByteString: 7696685D104AC834

2025/07/16 08:40:46: Line 87: var bsIuRtn = card.sendApdu(0x80,0x50,nVr,nId,bsRterm,0x00);//Init update
2025/07/16 08:40:46: Line 87: Card.sendApdu arguments
1: Int: 128

2: Int: 80

3: Int: 0

4: Int: 0

5: ByteString: 7696685D104AC834

6: Int: 0

2025/07/16 08:40:46: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: 50 00 00 08 76 96 68 5D-10 4A C8 34 00 21 53 57     P   v h] J 4 !SW
0020: 02 2B 2A                                             +*             

2025/07/16 08:40:47: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: FF FF FF FF FB F3 04 EA-75 44 01 02 00 06 2E 55             uD    .U
0010: 79 77 AB F0 E3 BB 3E 86-3A 08 49 38                 yw    > : I8    

ByteString: FFFFFFFFFBF304EA7544010200062E557977ABF0E3BB3E863A084938

2025/07/16 08:40:47: Line 235: var bsIuDiv  = bsIuRtn.bytes(4,6);
2025/07/16 08:40:47: Line 235: ByteString.bytes arguments
1: Int: 4

2: Int: 6

ByteString: FBF304EA7544

2025/07/16 08:40:47: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:47: Line 236: ByteString.concat arguments
1: ByteString: F001

ByteString: FBF304EA7544F001

2025/07/16 08:40:47: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:47: Line 236: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F001FBF304EA7544

2025/07/16 08:40:47: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:47: Line 236: ByteString.concat arguments
1: ByteString: 0F01

ByteString: FBF304EA7544F001FBF304EA75440F01

2025/07/16 08:40:47: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:47: Line 237: ByteString.concat arguments
1: ByteString: F002

ByteString: FBF304EA7544F002

2025/07/16 08:40:47: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:47: Line 237: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F002FBF304EA7544

2025/07/16 08:40:47: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:47: Line 237: ByteString.concat arguments
1: ByteString: 0F02

ByteString: FBF304EA7544F002FBF304EA75440F02

2025/07/16 08:40:47: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:47: Line 238: ByteString.concat arguments
1: ByteString: F003

ByteString: FBF304EA7544F003

2025/07/16 08:40:47: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:47: Line 238: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F003FBF304EA7544

2025/07/16 08:40:47: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:47: Line 238: ByteString.concat arguments
1: ByteString: 0F03

ByteString: FBF304EA7544F003FBF304EA75440F03

2025/07/16 08:40:47: Line 242: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsEncDiv, c_kDKenc);
2025/07/16 08:40:47: Line 242: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F001FBF304EA75440F01

4: Key

Void: undefined

2025/07/16 08:40:47: Line 243: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsMacDiv, c_kDKmac);
2025/07/16 08:40:47: Line 243: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F002FBF304EA75440F02

4: Key

Void: undefined

2025/07/16 08:40:47: Line 244: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsDekDiv, c_kDKdek);
2025/07/16 08:40:47: Line 244: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F003FBF304EA75440F03

4: Key

Void: undefined

2025/07/16 08:40:47: Line 245: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsDekDiv, c_kDKdekT0);
2025/07/16 08:40:47: Line 245: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F003FBF304EA75440F03

4: Key

Void: undefined

2025/07/16 08:40:47: Line 247: c_kDKenc.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:47: Line 247: Key.getKcv arguments
1: Double: 1048576

ByteString: 2F60DAE9569C6DE8

2025/07/16 08:40:47: Line 248: c_kDKmac.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:47: Line 248: Key.getKcv arguments
1: Double: 1048576

ByteString: 5CCE4854D71634D1

2025/07/16 08:40:47: Line 249: c_kDKdek.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:47: Line 249: Key.getKcv arguments
1: Double: 1048576

ByteString: 36B975605BE0D863

2025/07/16 08:40:47: Line 253: var bsSeqPad = bsIuRtn.bytes(12,2).concat(bsZero12); // Get and pad sequence count
2025/07/16 08:40:47: Line 253: ByteString.bytes arguments
1: Int: 12

2: Int: 2

ByteString: 0006

2025/07/16 08:40:47: Line 253: var bsSeqPad = bsIuRtn.bytes(12,2).concat(bsZero12); // Get and pad sequence count
2025/07/16 08:40:47: Line 253: ByteString.concat arguments
1: ByteString: 000000000000000000000000

ByteString: 0006000000000000000000000000

2025/07/16 08:40:47: Line 254: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEnc);
2025/07/16 08:40:47: Line 254: ByteString.concat arguments
1: ByteString: 0006000000000000000000000000

ByteString: 01820006000000000000000000000000

2025/07/16 08:40:47: Line 254: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEnc);
2025/07/16 08:40:47: Line 254: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01820006000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:47: Line 255: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEncT2);
2025/07/16 08:40:47: Line 255: ByteString.concat arguments
1: ByteString: 0006000000000000000000000000

ByteString: 01820006000000000000000000000000

2025/07/16 08:40:47: Line 255: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEncT2);
2025/07/16 08:40:47: Line 255: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01820006000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:47: Line 256: crypto.deriveKey(c_kDKmac, Crypto.DES_CBC, bs0101.concat(bsSeqPad), c_kSkuMac);
2025/07/16 08:40:47: Line 256: ByteString.concat arguments
1: ByteString: 0006000000000000000000000000

ByteString: 01010006000000000000000000000000

2025/07/16 08:40:47: Line 256: crypto.deriveKey(c_kDKmac, Crypto.DES_CBC, bs0101.concat(bsSeqPad), c_kSkuMac);
2025/07/16 08:40:47: Line 256: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01010006000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:47: Line 257: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDek);
2025/07/16 08:40:47: Line 257: ByteString.concat arguments
1: ByteString: 0006000000000000000000000000

ByteString: 01810006000000000000000000000000

2025/07/16 08:40:47: Line 257: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDek);
2025/07/16 08:40:47: Line 257: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01810006000000000000000000000000

4: Key: 0188000000183BCD4C71F3A357FC5E1070AC51C0317AE22E5652C98A3B79000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010100000107000000010101000001080000000101010000010A0000000101000000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C000000010100000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333930393030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B000000010100800001280000000101000000000300000000000000017000000001010100000000000000000000083BAD73E02974117E0000001823094808DD496493607D090BE1F399382B7ADB33A7E3BF01

Void: undefined

2025/07/16 08:40:47: Line 258: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDekT3);
2025/07/16 08:40:47: Line 258: ByteString.concat arguments
1: ByteString: 0006000000000000000000000000

ByteString: 01810006000000000000000000000000

2025/07/16 08:40:47: Line 258: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDekT3);
2025/07/16 08:40:47: Line 258: Crypto.deriveKey arguments
1: Key: 01880000001840712628C3ABECF288CB42D42D7857CE951E7620CCD20768000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101000000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C000000010101000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333931303030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B00000001010080000128000000010100000000030000000000000001700000000101010000000000000000000008C9B6DB6C4B96828F000000182E07B46DD8B2074B4B42AEF504CE121D2B7ADB33A7E3BF01

2: Double: 2

3: ByteString: 01810006000000000000000000000000

4: Key: 0188000000183BCD4C71F3A357FC5E1070AC51C0317AE22E5652C98A3B79000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101000000010400000001010100000105000000010101000001090000000101000000010B0000000101000000010C000000010100000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333930393030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B000000010100800001280000000101000000000300000000000000017000000001010100000000000000000000083C07320467EFF4D400000018785356CC41080B826A83EB02976318EB2B7ADB33A7E3BF01

Void: undefined

2025/07/16 08:40:47: Line 260: c_kSkuEnc.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:47: Line 260: Key.getKcv arguments
1: Double: 1048576

ByteString: A19D5BCC7926DA73

2025/07/16 08:40:47: Line 261: c_kSkuMac.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:47: Line 261: Key.getKcv arguments
1: Double: 1048576

ByteString: 424F25A82BBE909B

2025/07/16 08:40:47: Line 262: c_kSkuDek.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:47: Line 262: Key.getKcv arguments
1: Double: 1048576

ByteString: 7EDBE68343DF2B56

2025/07/16 08:40:47: Line 266: var kTmp = new Key();
2025/07/16 08:40:47: Line 266: Function.Key arguments

Key: 

2025/07/16 08:40:47: Line 267: crypto.wrap(c_kKek, Crypto.DES_ECB, c_kSkuMac, kTmp);
2025/07/16 08:40:47: Line 267: Crypto.wrap arguments
1: Key

2: Double: 5

3: Key

4: Key: 

Void: undefined

2025/07/16 08:40:47: Line 268: var bsTmp = new ByteString();
2025/07/16 08:40:47: Line 268: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:47: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:47: Line 269: Key.getComponent arguments
1: Double: 393216

ByteString: 7E8FD233E893B5C31401CFFEA7F57B57

2025/07/16 08:40:47: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:47: Line 269: ByteString.left arguments
1: Int: 8

ByteString: 7E8FD233E893B5C3

2025/07/16 08:40:47: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:47: Line 269: Art.execute arguments
1: String: UBDesECB

2: String: DecryptKey3

3: ByteString

4: ByteString: 7E8FD233E893B5C3

5: ByteString: 

Int: 0

2025/07/16 08:40:47: Line 270: c_kSkuMacT3s.setComponent(Key.DES, bsTmp);
2025/07/16 08:40:47: Line 270: Key.setComponent arguments
1: Double: 393216

2: ByteString

Void: undefined

2025/07/16 08:40:47: Line 315: var bsRcard = bsIuRtn.bytes(12,8);      // Get card random number
2025/07/16 08:40:47: Line 315: ByteString.bytes arguments
1: Int: 12

2: Int: 8

ByteString: 00062E557977ABF0

2025/07/16 08:40:47: Line 316: var bsMacDat = bsRterm.concat(bsRcard).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:47: Line 316: ByteString.concat arguments
1: ByteString: 00062E557977ABF0

ByteString: 7696685D104AC83400062E557977ABF0

2025/07/16 08:40:47: Line 316: var bsMacDat = bsRterm.concat(bsRcard).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:47: Line 316: ByteString.pad arguments
1: Double: 37

ByteString: 7696685D104AC83400062E557977ABF08000000000000000

2025/07/16 08:40:47: Line 317: var bsMac = crypto.sign(c_kSkuEncT2, Crypto.DES_MAC, bsMacDat);
2025/07/16 08:40:47: Line 317: Crypto.sign arguments
1: Key: 0188000000182CE82A7C5C4CC321349A103064559D6ADD6BB3673607ACF1000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101010000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C000000010100000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333931303030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B000000010100800001280000000101000000000300000000000000017000000001010100000000000000000000083C54CEC5636A110A000000187386A72765E878B765EDFB134CA479572B7ADB33A7E3BF01

2: Double: 8

3: ByteString: 7696685D104AC83400062E557977ABF08000000000000000

ByteString: E3BB3E863A084938

2025/07/16 08:40:47: Line 321: var bsCrdCg = bsIuRtn.bytes(20,8); // Card's cryptogram
2025/07/16 08:40:47: Line 321: ByteString.bytes arguments
1: Int: 20

2: Int: 8

ByteString: E3BB3E863A084938

2025/07/16 08:40:47: Line 322: if (bsMac.equals(bsCrdCg))
2025/07/16 08:40:47: Line 322: ByteString.equals arguments
1: ByteString: E3BB3E863A084938

Int: 1

2025/07/16 08:40:47: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:47: Line 323: ByteString.toString arguments

String: E3BB3E863A084938

2025/07/16 08:40:47: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:47: Line 323: ByteString.toString arguments

String: E3BB3E863A084938

2025/07/16 08:40:47: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:47: Line 323: GPSystem.trace arguments
1: String: 000863.c_Auth(): Authentication passed; Card's cryptogram (E3BB3E863A084938) matches calculated cryptogram (E3BB3E863A084938).

2025/07/16 08:40:47: GPSystem.trace
000863.c_Auth(): Authentication passed; Card's cryptogram (E3BB3E863A084938) matches calculated cryptogram (E3BB3E863A084938).

Boolean: true

2025/07/16 08:40:47: Line 331: var bsCgDat = bsRcard.concat(bsRterm).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:47: Line 331: ByteString.concat arguments
1: ByteString: 7696685D104AC834

ByteString: 00062E557977ABF07696685D104AC834

2025/07/16 08:40:47: Line 331: var bsCgDat = bsRcard.concat(bsRterm).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:47: Line 331: ByteString.pad arguments
1: Double: 37

ByteString: 00062E557977ABF07696685D104AC8348000000000000000

2025/07/16 08:40:47: Line 332: var bsCg = crypto.sign(c_kSkuEncT2, Crypto.DES_MAC, bsCgDat);
2025/07/16 08:40:47: Line 332: Crypto.sign arguments
1: Key

2: Double: 8

3: ByteString: 00062E557977ABF07696685D104AC8348000000000000000

ByteString: 764587067BD165DD

2025/07/16 08:40:47: Line 371: function c_sendApduS2(nCla, nIns, nP1, nP2, bsDat, nMech, nSecLvl, bsIcv, sMsg)
2025/07/16 08:40:47: Line 371: UBJSGlobalClass.c_sendApduS2 arguments
1: Int: 132

2: Int: 130

3: Int: 0

4: Int: 0

5: ByteString: 764587067BD165DD

6: Double: 9

7: Int: 0

8: ByteString: 0000000000000000

9: String: External Auth

2025/07/16 08:40:47: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:47: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 132

Boolean: false

2025/07/16 08:40:47: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:47: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 130

Boolean: false

2025/07/16 08:40:47: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:47: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:47: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:47: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:47: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:47: Line 378: UBJSGlobalClass.isNaN arguments
1: Double: 9

Boolean: false

2025/07/16 08:40:47: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:47: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:47: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:47: Line 380: Number.toString arguments
1: Int: 16

String: 84

2025/07/16 08:40:47: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:47: Line 380: Number.toString arguments
1: Int: 16

String: 82

2025/07/16 08:40:47: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:47: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:47: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:47: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:47: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:47: Line 380: ByteString.toString arguments

String: 764587067BD165DD

2025/07/16 08:40:47: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:47: Line 380: Number.toString arguments
1: Int: 16

String: 9

2025/07/16 08:40:47: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:47: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:47: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:47: Line 380: ByteString.toString arguments

String: 0000000000000000

2025/07/16 08:40:47: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:47: Line 380: Function.ByteString arguments
1: String: !!+000863.c_sendApduS2(84, 82, 0, 0, 764587067BD165DD, 9, 0, 0000000000000000, External Auth)

2: Double: 1

ByteString: 21212B3030303836332E635F73656E644170647553322838342C2038322C20302C20302C20373634353837303637424431363544442C20392C20302C20303030303030303030303030303030302C2045787465726E616C204175746829

2025/07/16 08:40:47: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:47: Line 384: Number.toString arguments
1: Int: 16

String: 84

2025/07/16 08:40:47: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:47: Line 384: String.toUpperCase arguments

String: 84

2025/07/16 08:40:47: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:47: Line 384: String.substr arguments
1: Int: -2

2: Int: 2

String: 84

2025/07/16 08:40:47: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:47: Line 385: Number.toString arguments
1: Int: 16

String: 82

2025/07/16 08:40:47: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:47: Line 385: String.toUpperCase arguments

String: 82

2025/07/16 08:40:47: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:47: Line 385: String.substr arguments
1: Int: -2

2: Int: 2

String: 82

2025/07/16 08:40:47: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:47: Line 386: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:47: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:47: Line 386: String.toUpperCase arguments

String: 0

2025/07/16 08:40:47: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:47: Line 386: String.substr arguments
1: Int: -2

2: Int: 2

String: 00

2025/07/16 08:40:47: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:47: Line 387: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:47: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:47: Line 387: String.toUpperCase arguments

String: 0

2025/07/16 08:40:47: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:47: Line 387: String.substr arguments
1: Int: -2

2: Int: 2

String: 00

2025/07/16 08:40:47: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:47: Line 388: Number.toString arguments
1: Int: 16

String: 10

2025/07/16 08:40:47: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:47: Line 388: String.toUpperCase arguments

String: 10

2025/07/16 08:40:47: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:47: Line 388: String.substr arguments
1: Int: -2

2: Int: 2

String: 10

2025/07/16 08:40:47: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:47: Line 392: ByteString.valueOf arguments

ByteString: 764587067BD165DD

2025/07/16 08:40:47: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:47: Line 392: ByteString.toString arguments

String: 764587067BD165DD

2025/07/16 08:40:47: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:47: Line 392: Function.ByteString arguments
1: String: 8482000010764587067BD165DD

2: Double: 4

ByteString: 8482000010764587067BD165DD

2025/07/16 08:40:47: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:47: Line 392: ByteString.pad arguments
1: Double: 37

ByteString: 8482000010764587067BD165DD800000

2025/07/16 08:40:47: Line 393: var bsMac = crypto.sign(c_kSkuMac, nMech, bsCmd, bsIcv); // MAC cmd
2025/07/16 08:40:47: Line 393: Crypto.sign arguments
1: Key

2: Double: 9

3: ByteString: 8482000010764587067BD165DD800000

4: ByteString: 0000000000000000

ByteString: DAE637242A0ACF6F

2025/07/16 08:40:47: Line 402: GPSystem.trace(sMsg); // Log
2025/07/16 08:40:47: Line 402: GPSystem.trace arguments
1: String: External Auth

2025/07/16 08:40:47: GPSystem.trace
External Auth

Boolean: true

2025/07/16 08:40:47: Line 403: var bsRtn = card.sendApdu(nCla,nIns,nP1,nP2,bsDat.concat(bsMac));
2025/07/16 08:40:47: Line 403: ByteString.concat arguments
1: ByteString: DAE637242A0ACF6F

ByteString: 764587067BD165DDDAE637242A0ACF6F

2025/07/16 08:40:47: Line 403: var bsRtn = card.sendApdu(nCla,nIns,nP1,nP2,bsDat.concat(bsMac));
2025/07/16 08:40:47: Line 403: Card.sendApdu arguments
1: Int: 132

2: Int: 130

3: Int: 0

4: Int: 0

5: ByteString: 764587067BD165DDDAE637242A0ACF6F

2025/07/16 08:40:47: DCC9kServer IC Commands
0000: 84 82 00 00 10 76 45 87-06 7B D1 65 DD DA E6 37          vE  { e   7
0010: 24 2A 0A CF 6F 21 53 57-02 2B 2A                    $*  o!SW +*     

2025/07/16 08:40:47: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:47: Line 407: c_bsChainMac = crypto.encrypt(c_kSkuMacT3s, Crypto.DES_CBC, bsMac); // ICV encryption for C-MAC session
2025/07/16 08:40:47: Line 407: Crypto.encrypt arguments
1: Key

2: Double: 2

3: ByteString: DAE637242A0ACF6F

ByteString: F4A9E3460F16A022

2025/07/16 08:40:47: Line 411: new ByteString("!"+"!-"+CALL+"("+bsRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:47: Line 411: ByteString.toString arguments

String: 

2025/07/16 08:40:47: Line 411: new ByteString("!"+"!-"+CALL+"("+bsRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:47: Line 411: Function.ByteString arguments
1: String: !!-000863.c_sendApduS2()

2: Double: 1

ByteString: 21212D3030303836332E635F73656E644170647553322829

2025/07/16 08:40:47: Line 412: UBJSGlobalClass.c_sendApduS2 result
ByteString: 

2025/07/16 08:40:47: Line 343: new ByteString("!"+"!-"+CALL+"("+bsIuRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:47: Line 343: ByteString.toString arguments

String: FFFFFFFFFBF304EA7544010200062E557977ABF0E3BB3E863A084938

2025/07/16 08:40:47: Line 343: new ByteString("!"+"!-"+CALL+"("+bsIuRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:47: Line 343: Function.ByteString arguments
1: String: !!-000863.c_Auth(FFFFFFFFFBF304EA7544010200062E557977ABF0E3BB3E863A084938)

2: Double: 1

ByteString: 21212D3030303836332E635F4175746828464646464646464646424633303445413735343430313032303030363245353537393737414246304533424233453836334130383439333829

2025/07/16 08:40:47: Line 344: UBJSGlobalClass.c_Auth result
ByteString: FFFFFFFFFBF304EA7544010200062E557977ABF0E3BB3E863A084938

2025/07/16 08:40:47: Line 1121: function t_PpsePerso()
2025/07/16 08:40:47: Line 1121: UBJSGlobalClass.t_PpsePerso arguments

2025/07/16 08:40:47: Line 1128: new ByteString("!"+"!+"+CALL+"()",ASCII); // Log begin func
2025/07/16 08:40:47: Line 1128: Function.ByteString arguments
1: String: !!+000863.t_PpsePerso()

2: Double: 1

ByteString: 21212B3030303836332E745F50707365506572736F2829

2025/07/16 08:40:47: Line 1136: var bsAid = new ByteString("2PAY.SYS.DDF01",ASCII);
2025/07/16 08:40:47: Line 1136: Function.ByteString arguments
1: String: 2PAY.SYS.DDF01

2: Double: 1

ByteString: 325041592E5359532E4444463031

2025/07/16 08:40:47: Line 1137: var bsDel = new TLV(0x4F, bsAid, TLV.EMV).getTLV();
2025/07/16 08:40:47: Line 1137: Function.TLV arguments
1: Int: 79

2: ByteString: 325041592E5359532E4444463031

3: Double: 2

TLV: 4F0E325041592E5359532E4444463031

2025/07/16 08:40:47: Line 1137: var bsDel = new TLV(0x4F, bsAid, TLV.EMV).getTLV();
2025/07/16 08:40:47: Line 1137: TLV.getTLV arguments

ByteString: 4F0E325041592E5359532E4444463031

2025/07/16 08:40:47: Line 1138: card.sendApdu(0x80,0xE4,0x00,0x00,bsDel,0x00,[0x9000,0x6A88]);//Delete PPSE
2025/07/16 08:40:47: Line 1138: Card.sendApdu arguments
1: Int: 128

2: Int: 228

3: Int: 0

4: Int: 0

5: ByteString: 4F0E325041592E5359532E4444463031

6: Int: 0

7: Array: 36864,27272

2025/07/16 08:40:47: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: E4 00 00 10 4F 0E 32 50-41 59 2E 53 59 53 2E 44         O 2PAY.SYS.D
0020: 44 46 30 31 00 21 53 57-02 2B 2A                    DF01 !SW +*     

2025/07/16 08:40:47: DCC9kServer IC Response: Result = 0, SW1SW2 = 6A88

ByteString: 

2025/07/16 08:40:47: Line 1144: var sAid = bsAid.toString();
2025/07/16 08:40:47: Line 1144: ByteString.toString arguments

String: 325041592E5359532E4444463031

2025/07/16 08:40:47: Line 437: function c_InstallFmt(sLodAid, sModAid, sAid, sPriv, sC9, sC6, sC7, sC8, sTok)
2025/07/16 08:40:47: Line 437: UBJSGlobalClass.c_InstallFmt arguments
1: String: A000000708000001010000

2: String: A000000708010001010001

3: String: 325041592E5359532E4444463031

4: String: 00

5: String: 

6: String: 

7: String: 

8: String: 

9: String: 

2025/07/16 08:40:47: Line 446: new ByteString("!"+"!+"+CALL+"("+sLodAid+", "+sModAid+", "+sAid+", "+sPriv+", "+sC9+", "+sC6+", "+sC7+", "+sC8+", "+sTok+")",ASCII); // Log begin func
2025/07/16 08:40:47: Line 446: Function.ByteString arguments
1: String: !!+000863.c_InstallFmt(A000000708000001010000, A000000708010001010001, 325041592E5359532E4444463031, 00, , , , , )

2: Double: 1

ByteString: 21212B3030303836332E635F496E7374616C6C466D7428413030303030303730383030303030313031303030302C20413030303030303730383031303030313031303030312C20333235303431353932453533353935333245343434343436333033312C2030302C202C202C202C202C2029

2025/07/16 08:40:47: Line 450: var bsLodAid = new ByteString(sLodAid, HEX);
2025/07/16 08:40:47: Line 450: Function.ByteString arguments
1: String: A000000708000001010000

2: Double: 4

ByteString: A000000708000001010000

2025/07/16 08:40:47: Line 451: var bsModAid = new ByteString(sModAid, HEX);
2025/07/16 08:40:47: Line 451: Function.ByteString arguments
1: String: A000000708010001010001

2: Double: 4

ByteString: A000000708010001010001

2025/07/16 08:40:47: Line 452: var bsAid    = new ByteString(sAid, HEX);
2025/07/16 08:40:47: Line 452: Function.ByteString arguments
1: String: 325041592E5359532E4444463031

2: Double: 4

ByteString: 325041592E5359532E4444463031

2025/07/16 08:40:47: Line 453: var bsPriv   = new ByteString(sPriv, HEX);
2025/07/16 08:40:47: Line 453: Function.ByteString arguments
1: String: 00

2: Double: 4

ByteString: 00

2025/07/16 08:40:47: Line 454: var bsTok    = new ByteString(sTok, HEX);
2025/07/16 08:40:47: Line 454: Function.ByteString arguments
1: String: 

2: Double: 4

ByteString: 

2025/07/16 08:40:47: Line 459: var tDat = new TLV(0xC9, new ByteString(sC9, HEX), TLV.EMV);
2025/07/16 08:40:47: Line 459: Function.ByteString arguments
1: String: 

2: Double: 4

ByteString: 

2025/07/16 08:40:47: Line 459: var tDat = new TLV(0xC9, new ByteString(sC9, HEX), TLV.EMV);
2025/07/16 08:40:47: Line 459: Function.TLV arguments
1: Int: 201

2: ByteString: 

3: Double: 2

TLV: C900

2025/07/16 08:40:47: Line 460: var bsApPrm = tDat.getTLV();
2025/07/16 08:40:47: Line 460: TLV.getTLV arguments

ByteString: C900

2025/07/16 08:40:47: Line 463: var bsSyPrm = new ByteString();
2025/07/16 08:40:47: Line 463: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:47: Line 464: var tlDat = new TLVList(new ByteString(), TLV.EMV);
2025/07/16 08:40:47: Line 464: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:47: Line 464: var tlDat = new TLVList(new ByteString(), TLV.EMV);
2025/07/16 08:40:47: Line 464: Function.TLVList arguments
1: ByteString: 

2: Double: 2

TLVList: 

2025/07/16 08:40:47: Line 481: var bsPrm = bsApPrm.concat(bsSyPrm);
2025/07/16 08:40:47: Line 481: ByteString.concat arguments
1: ByteString: 

ByteString: C900

2025/07/16 08:40:47: Line 485: var bsOut =         bsLodAid.getLV(TLV.EMV)
2025/07/16 08:40:47: Line 485: ByteString.getLV arguments
1: Double: 2

ByteString: 0BA000000708000001010000

2025/07/16 08:40:47: Line 486: .concat(bsModAid.getLV(TLV.EMV))
2025/07/16 08:40:47: Line 486: ByteString.getLV arguments
1: Double: 2

ByteString: 0BA000000708010001010001

2025/07/16 08:40:47: Line 486: .concat(bsModAid.getLV(TLV.EMV))
2025/07/16 08:40:47: Line 486: ByteString.concat arguments
1: ByteString: 0BA000000708010001010001

ByteString: 0BA0000007080000010100000BA000000708010001010001

2025/07/16 08:40:47: Line 487: .concat(   bsAid.getLV(TLV.EMV))
2025/07/16 08:40:47: Line 487: ByteString.getLV arguments
1: Double: 2

ByteString: 0E325041592E5359532E4444463031

2025/07/16 08:40:47: Line 487: .concat(   bsAid.getLV(TLV.EMV))
2025/07/16 08:40:47: Line 487: ByteString.concat arguments
1: ByteString: 0E325041592E5359532E4444463031

ByteString: 0BA0000007080000010100000BA0000007080100010100010E325041592E5359532E4444463031

2025/07/16 08:40:47: Line 488: .concat(  bsPriv.getLV(TLV.EMV))
2025/07/16 08:40:47: Line 488: ByteString.getLV arguments
1: Double: 2

ByteString: 0100

2025/07/16 08:40:47: Line 488: .concat(  bsPriv.getLV(TLV.EMV))
2025/07/16 08:40:47: Line 488: ByteString.concat arguments
1: ByteString: 0100

ByteString: 0BA0000007080000010100000BA0000007080100010100010E325041592E5359532E44444630310100

2025/07/16 08:40:47: Line 489: .concat(   bsPrm.getLV(TLV.EMV))
2025/07/16 08:40:47: Line 489: ByteString.getLV arguments
1: Double: 2

ByteString: 02C900

2025/07/16 08:40:47: Line 489: .concat(   bsPrm.getLV(TLV.EMV))
2025/07/16 08:40:47: Line 489: ByteString.concat arguments
1: ByteString: 02C900

ByteString: 0BA0000007080000010100000BA0000007080100010100010E325041592E5359532E4444463031010002C900

2025/07/16 08:40:47: Line 490: .concat(   bsTok.getLV(TLV.EMV));
2025/07/16 08:40:47: Line 490: ByteString.getLV arguments
1: Double: 2

ByteString: 00

2025/07/16 08:40:47: Line 490: .concat(   bsTok.getLV(TLV.EMV));
2025/07/16 08:40:47: Line 490: ByteString.concat arguments
1: ByteString: 00

ByteString: 0BA0000007080000010100000BA0000007080100010100010E325041592E5359532E4444463031010002C90000

2025/07/16 08:40:47: Line 494: new ByteString("!"+"!-"+CALL+"("+bsOut.toString()+")",ASCII); // Log end func
2025/07/16 08:40:47: Line 494: ByteString.toString arguments

String: 0BA0000007080000010100000BA0000007080100010100010E325041592E5359532E4444463031010002C90000

2025/07/16 08:40:47: Line 494: new ByteString("!"+"!-"+CALL+"("+bsOut.toString()+")",ASCII); // Log end func
2025/07/16 08:40:47: Line 494: Function.ByteString arguments
1: String: !!-000863.c_InstallFmt(0BA0000007080000010100000BA0000007080100010100010E325041592E5359532E4444463031010002C90000)

2: Double: 1

ByteString: 21212D3030303836332E635F496E7374616C6C466D742830424130303030303037303830303030303130313030303030424130303030303037303830313030303130313030303130453332353034313539324535333539353332453434343434363330333130313030303243393030303029

2025/07/16 08:40:47: Line 495: UBJSGlobalClass.c_InstallFmt result
ByteString: 0BA0000007080000010100000BA0000007080100010100010E325041592E5359532E4444463031010002C90000

2025/07/16 08:40:47: Line 1146: card.sendApdu(0x80,0xE6,0x0C,0x00,bsDat,0x00); //Install PPSE
2025/07/16 08:40:47: Line 1146: Card.sendApdu arguments
1: Int: 128

2: Int: 230

3: Int: 12

4: Int: 0

5: ByteString: 0BA0000007080000010100000BA0000007080100010100010E325041592E5359532E4444463031010002C90000

6: Int: 0

2025/07/16 08:40:47: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: E6 0C 00 2D 0B A0 00 00-07 08 00 00 01 01 00 00        -            
0020: 0B A0 00 00 07 08 01 00-01 01 00 01 0E 32 50 41                  2PA
0030: 59 2E 53 59 53 2E 44 44-46 30 31 01 00 02 C9 00     Y.SYS.DDF01     
0040: 00 00 21 53 57 02 2B 2A-                              !SW +*        

2025/07/16 08:40:47: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: 00                                                                  

ByteString: 00

2025/07/16 08:40:47: Line 49: function c_Auth(bsAid, nMeth, nVr, nId, nSecLvl)
2025/07/16 08:40:47: Line 49: UBJSGlobalClass.c_Auth arguments
1: ByteString: 325041592E5359532E4444463031

2: Int: 22

3: Int: 0

4: Int: 0

5: Int: 0

2025/07/16 08:40:47: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:47: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 22

Boolean: false

2025/07/16 08:40:47: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:47: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:47: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:47: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:47: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:47: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:47: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:47: Line 58: ByteString.toString arguments

String: 325041592E5359532E4444463031

2025/07/16 08:40:47: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:47: Line 58: Number.toString arguments
1: Int: 10

String: 22

2025/07/16 08:40:47: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:47: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:47: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:47: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:47: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:47: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:47: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:47: Line 58: Function.ByteString arguments
1: String: !!+000863.c_Auth(325041592E5359532E4444463031, 22, 0, 0, 0)

2: Double: 1

ByteString: 21212B3030303836332E635F4175746828333235303431353932453533353935333245343434343436333033312C2032322C20302C20302C203029

2025/07/16 08:40:47: Line 62: var bsF001 = new ByteString("F001", HEX);
2025/07/16 08:40:47: Line 62: Function.ByteString arguments
1: String: F001

2: Double: 4

ByteString: F001

2025/07/16 08:40:47: Line 63: var bsF002 = new ByteString("F002", HEX);
2025/07/16 08:40:47: Line 63: Function.ByteString arguments
1: String: F002

2: Double: 4

ByteString: F002

2025/07/16 08:40:47: Line 64: var bsF003 = new ByteString("F003", HEX);
2025/07/16 08:40:47: Line 64: Function.ByteString arguments
1: String: F003

2: Double: 4

ByteString: F003

2025/07/16 08:40:47: Line 65: var bs0F01 = new ByteString("0F01", HEX);
2025/07/16 08:40:47: Line 65: Function.ByteString arguments
1: String: 0F01

2: Double: 4

ByteString: 0F01

2025/07/16 08:40:47: Line 66: var bs0F02 = new ByteString("0F02", HEX);
2025/07/16 08:40:47: Line 66: Function.ByteString arguments
1: String: 0F02

2: Double: 4

ByteString: 0F02

2025/07/16 08:40:47: Line 67: var bs0F03 = new ByteString("0F03", HEX);
2025/07/16 08:40:47: Line 67: Function.ByteString arguments
1: String: 0F03

2: Double: 4

ByteString: 0F03

2025/07/16 08:40:47: Line 68: var bs0182 = new ByteString("0182", HEX);
2025/07/16 08:40:47: Line 68: Function.ByteString arguments
1: String: 0182

2: Double: 4

ByteString: 0182

2025/07/16 08:40:47: Line 69: var bs0101 = new ByteString("0101", HEX);
2025/07/16 08:40:47: Line 69: Function.ByteString arguments
1: String: 0101

2: Double: 4

ByteString: 0101

2025/07/16 08:40:47: Line 70: var bs0181 = new ByteString("0181", HEX);
2025/07/16 08:40:47: Line 70: Function.ByteString arguments
1: String: 0181

2: Double: 4

ByteString: 0181

2025/07/16 08:40:47: Line 71: var bsZero12 = new ByteString("000000000000000000000000",HEX);
2025/07/16 08:40:47: Line 71: Function.ByteString arguments
1: String: 000000000000000000000000

2: Double: 4

ByteString: 000000000000000000000000

2025/07/16 08:40:47: Line 72: var bsZero8  = new ByteString("0000000000000000",HEX);
2025/07/16 08:40:47: Line 72: Function.ByteString arguments
1: String: 0000000000000000

2: Double: 4

ByteString: 0000000000000000

2025/07/16 08:40:47: Line 77: card.sendApdu(0x00,0xA4,0x04,0x00,bsAid,0x00); //Select AID
2025/07/16 08:40:47: Line 77: Card.sendApdu arguments
1: Int: 0

2: Int: 164

3: Int: 4

4: Int: 0

5: ByteString: 325041592E5359532E4444463031

6: Int: 0

2025/07/16 08:40:47: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 00     !IOCTL ISOCase4 
0010: A4 04 00 0E 32 50 41 59-2E 53 59 53 2E 44 44 46         2PAY.SYS.DDF
0020: 30 31 00 21 53 57 02 2B-2A                          01 !SW +*       

2025/07/16 08:40:47: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: 6F 10 84 0E 32 50 41 59-2E 53 59 53 2E 44 44 46     o   2PAY.SYS.DDF
0010: 30 31                                               01              

ByteString: 6F10840E325041592E5359532E4444463031

2025/07/16 08:40:47: Line 81: var bsRterm = crypto.generateRandom(8);
2025/07/16 08:40:47: Line 81: Crypto.generateRandom arguments
1: Int: 8

ByteString: B5BDBCD7B2B44B3A

2025/07/16 08:40:47: Line 87: var bsIuRtn = card.sendApdu(0x80,0x50,nVr,nId,bsRterm,0x00);//Init update
2025/07/16 08:40:47: Line 87: Card.sendApdu arguments
1: Int: 128

2: Int: 80

3: Int: 0

4: Int: 0

5: ByteString: B5BDBCD7B2B44B3A

6: Int: 0

2025/07/16 08:40:47: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: 50 00 00 08 B5 BD BC D7-B2 B4 4B 3A 00 21 53 57     P         K: !SW
0020: 02 2B 2A                                             +*             

2025/07/16 08:40:48: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: FF FF FF FF FB F3 04 EA-75 44 01 02 00 07 B0 91             uD      
0010: 2F 66 F0 3B 3A F2 5E 57-F1 3F EC A6                 /f ;: ^W ?      

ByteString: FFFFFFFFFBF304EA754401020007B0912F66F03B3AF25E57F13FECA6

2025/07/16 08:40:48: Line 235: var bsIuDiv  = bsIuRtn.bytes(4,6);
2025/07/16 08:40:48: Line 235: ByteString.bytes arguments
1: Int: 4

2: Int: 6

ByteString: FBF304EA7544

2025/07/16 08:40:48: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 236: ByteString.concat arguments
1: ByteString: F001

ByteString: FBF304EA7544F001

2025/07/16 08:40:48: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 236: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F001FBF304EA7544

2025/07/16 08:40:48: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 236: ByteString.concat arguments
1: ByteString: 0F01

ByteString: FBF304EA7544F001FBF304EA75440F01

2025/07/16 08:40:48: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 237: ByteString.concat arguments
1: ByteString: F002

ByteString: FBF304EA7544F002

2025/07/16 08:40:48: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 237: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F002FBF304EA7544

2025/07/16 08:40:48: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 237: ByteString.concat arguments
1: ByteString: 0F02

ByteString: FBF304EA7544F002FBF304EA75440F02

2025/07/16 08:40:48: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 238: ByteString.concat arguments
1: ByteString: F003

ByteString: FBF304EA7544F003

2025/07/16 08:40:48: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 238: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F003FBF304EA7544

2025/07/16 08:40:48: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 238: ByteString.concat arguments
1: ByteString: 0F03

ByteString: FBF304EA7544F003FBF304EA75440F03

2025/07/16 08:40:48: Line 242: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsEncDiv, c_kDKenc);
2025/07/16 08:40:48: Line 242: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F001FBF304EA75440F01

4: Key

Void: undefined

2025/07/16 08:40:48: Line 243: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsMacDiv, c_kDKmac);
2025/07/16 08:40:48: Line 243: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F002FBF304EA75440F02

4: Key

Void: undefined

2025/07/16 08:40:48: Line 244: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsDekDiv, c_kDKdek);
2025/07/16 08:40:48: Line 244: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F003FBF304EA75440F03

4: Key

Void: undefined

2025/07/16 08:40:48: Line 245: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsDekDiv, c_kDKdekT0);
2025/07/16 08:40:48: Line 245: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F003FBF304EA75440F03

4: Key

Void: undefined

2025/07/16 08:40:48: Line 247: c_kDKenc.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:48: Line 247: Key.getKcv arguments
1: Double: 1048576

ByteString: 2F60DAE9569C6DE8

2025/07/16 08:40:48: Line 248: c_kDKmac.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:48: Line 248: Key.getKcv arguments
1: Double: 1048576

ByteString: 5CCE4854D71634D1

2025/07/16 08:40:48: Line 249: c_kDKdek.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:48: Line 249: Key.getKcv arguments
1: Double: 1048576

ByteString: 36B975605BE0D863

2025/07/16 08:40:48: Line 253: var bsSeqPad = bsIuRtn.bytes(12,2).concat(bsZero12); // Get and pad sequence count
2025/07/16 08:40:48: Line 253: ByteString.bytes arguments
1: Int: 12

2: Int: 2

ByteString: 0007

2025/07/16 08:40:48: Line 253: var bsSeqPad = bsIuRtn.bytes(12,2).concat(bsZero12); // Get and pad sequence count
2025/07/16 08:40:48: Line 253: ByteString.concat arguments
1: ByteString: 000000000000000000000000

ByteString: 0007000000000000000000000000

2025/07/16 08:40:48: Line 254: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEnc);
2025/07/16 08:40:48: Line 254: ByteString.concat arguments
1: ByteString: 0007000000000000000000000000

ByteString: 01820007000000000000000000000000

2025/07/16 08:40:48: Line 254: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEnc);
2025/07/16 08:40:48: Line 254: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01820007000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:48: Line 255: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEncT2);
2025/07/16 08:40:48: Line 255: ByteString.concat arguments
1: ByteString: 0007000000000000000000000000

ByteString: 01820007000000000000000000000000

2025/07/16 08:40:48: Line 255: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEncT2);
2025/07/16 08:40:48: Line 255: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01820007000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:48: Line 256: crypto.deriveKey(c_kDKmac, Crypto.DES_CBC, bs0101.concat(bsSeqPad), c_kSkuMac);
2025/07/16 08:40:48: Line 256: ByteString.concat arguments
1: ByteString: 0007000000000000000000000000

ByteString: 01010007000000000000000000000000

2025/07/16 08:40:48: Line 256: crypto.deriveKey(c_kDKmac, Crypto.DES_CBC, bs0101.concat(bsSeqPad), c_kSkuMac);
2025/07/16 08:40:48: Line 256: Crypto.deriveKey arguments
1: Key: 018800000018CBBF06B3292727B3C2E642F9DBD1163DB9AB4B268F8C7749000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101000000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C000000010101000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333931313030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B0000000101008000012800000001010000000003000000000000000170000000010101000000000000000000000852769D04151B67A900000018DE8FAEF7F076821ECCFD916B274192FC2B7ADB33A7E3BF01

2: Double: 2

3: ByteString: 01010007000000000000000000000000

4: Key: 01880000001869584242F4D7E8778EBA6BAC55606FB4159665B9E6288FB6000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101010000010400000001010100000105000000010100000001090000000101000000010B0000000101000000010C000000010100000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333931303030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B000000010100800001280000000101000000000300000000000000017000000001010100000000000000000000089E00FE6BBEDFBDC400000018EF8D9C3B6A6E6D59E8DD0B9811F236EB2B7ADB33A7E3BF01

Void: undefined

2025/07/16 08:40:48: Line 257: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDek);
2025/07/16 08:40:48: Line 257: ByteString.concat arguments
1: ByteString: 0007000000000000000000000000

ByteString: 01810007000000000000000000000000

2025/07/16 08:40:48: Line 257: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDek);
2025/07/16 08:40:48: Line 257: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01810007000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:48: Line 258: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDekT3);
2025/07/16 08:40:48: Line 258: ByteString.concat arguments
1: ByteString: 0007000000000000000000000000

ByteString: 01810007000000000000000000000000

2025/07/16 08:40:48: Line 258: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDekT3);
2025/07/16 08:40:48: Line 258: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01810007000000000000000000000000

4: Key: 018800000018501C6184C2F9389266D4936D911E65C775EA9146E42F4C7F000001400000001D00000000000000040100000004000001000000000401000000140000000100000001010000000002000000010101000001030000000101010000010600000001010000000107000000010100000001080000000101010000010A0000000101000000010400000001010100000105000000010101000001090000000101000000010B0000000101000000010C000000010100000001640000000101008000012900000001010100000162000000010101000001650000000101000000016100000004010000001080000102000000100132303235303731363035333931303030800001030000000000000001630000000101000000010200000000000000011000000000000000011100000000008000012B00000001010080000128000000010100000000030000000000000001700000000101010000000000000000000008542BF049DCED1688000000187D8CEDE8F7370E427C39FAF70B5C00F42B7ADB33A7E3BF01

Void: undefined

2025/07/16 08:40:48: Line 260: c_kSkuEnc.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:48: Line 260: Key.getKcv arguments
1: Double: 1048576

ByteString: FDD3D14CD28FEAE9

2025/07/16 08:40:48: Line 261: c_kSkuMac.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:48: Line 261: Key.getKcv arguments
1: Double: 1048576

ByteString: 21B28B8F21AE6393

2025/07/16 08:40:48: Line 262: c_kSkuDek.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:48: Line 262: Key.getKcv arguments
1: Double: 1048576

ByteString: A94B368B42CD71DD

2025/07/16 08:40:48: Line 266: var kTmp = new Key();
2025/07/16 08:40:48: Line 266: Function.Key arguments

Key: 

2025/07/16 08:40:48: Line 267: crypto.wrap(c_kKek, Crypto.DES_ECB, c_kSkuMac, kTmp);
2025/07/16 08:40:48: Line 267: Crypto.wrap arguments
1: Key

2: Double: 5

3: Key

4: Key: 

Void: undefined

2025/07/16 08:40:48: Line 268: var bsTmp = new ByteString();
2025/07/16 08:40:48: Line 268: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:48: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:48: Line 269: Key.getComponent arguments
1: Double: 393216

ByteString: 054053751F1E086149A6B122F4792008

2025/07/16 08:40:48: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:48: Line 269: ByteString.left arguments
1: Int: 8

ByteString: 054053751F1E0861

2025/07/16 08:40:48: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:48: Line 269: Art.execute arguments
1: String: UBDesECB

2: String: DecryptKey3

3: ByteString

4: ByteString: 054053751F1E0861

5: ByteString: 

Int: 0

2025/07/16 08:40:48: Line 270: c_kSkuMacT3s.setComponent(Key.DES, bsTmp);
2025/07/16 08:40:48: Line 270: Key.setComponent arguments
1: Double: 393216

2: ByteString

Void: undefined

2025/07/16 08:40:48: Line 315: var bsRcard = bsIuRtn.bytes(12,8);      // Get card random number
2025/07/16 08:40:48: Line 315: ByteString.bytes arguments
1: Int: 12

2: Int: 8

ByteString: 0007B0912F66F03B

2025/07/16 08:40:48: Line 316: var bsMacDat = bsRterm.concat(bsRcard).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:48: Line 316: ByteString.concat arguments
1: ByteString: 0007B0912F66F03B

ByteString: B5BDBCD7B2B44B3A0007B0912F66F03B

2025/07/16 08:40:48: Line 316: var bsMacDat = bsRterm.concat(bsRcard).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:48: Line 316: ByteString.pad arguments
1: Double: 37

ByteString: B5BDBCD7B2B44B3A0007B0912F66F03B8000000000000000

2025/07/16 08:40:48: Line 317: var bsMac = crypto.sign(c_kSkuEncT2, Crypto.DES_MAC, bsMacDat);
2025/07/16 08:40:48: Line 317: Crypto.sign arguments
1: Key

2: Double: 8

3: ByteString: B5BDBCD7B2B44B3A0007B0912F66F03B8000000000000000

ByteString: 3AF25E57F13FECA6

2025/07/16 08:40:48: Line 321: var bsCrdCg = bsIuRtn.bytes(20,8); // Card's cryptogram
2025/07/16 08:40:48: Line 321: ByteString.bytes arguments
1: Int: 20

2: Int: 8

ByteString: 3AF25E57F13FECA6

2025/07/16 08:40:48: Line 322: if (bsMac.equals(bsCrdCg))
2025/07/16 08:40:48: Line 322: ByteString.equals arguments
1: ByteString: 3AF25E57F13FECA6

Int: 1

2025/07/16 08:40:48: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:48: Line 323: ByteString.toString arguments

String: 3AF25E57F13FECA6

2025/07/16 08:40:48: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:48: Line 323: ByteString.toString arguments

String: 3AF25E57F13FECA6

2025/07/16 08:40:48: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:48: Line 323: GPSystem.trace arguments
1: String: 000863.c_Auth(): Authentication passed; Card's cryptogram (3AF25E57F13FECA6) matches calculated cryptogram (3AF25E57F13FECA6).

2025/07/16 08:40:48: GPSystem.trace
000863.c_Auth(): Authentication passed; Card's cryptogram (3AF25E57F13FECA6) matches calculated cryptogram (3AF25E57F13FECA6).

Boolean: true

2025/07/16 08:40:48: Line 331: var bsCgDat = bsRcard.concat(bsRterm).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:48: Line 331: ByteString.concat arguments
1: ByteString: B5BDBCD7B2B44B3A

ByteString: 0007B0912F66F03BB5BDBCD7B2B44B3A

2025/07/16 08:40:48: Line 331: var bsCgDat = bsRcard.concat(bsRterm).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:48: Line 331: ByteString.pad arguments
1: Double: 37

ByteString: 0007B0912F66F03BB5BDBCD7B2B44B3A8000000000000000

2025/07/16 08:40:48: Line 332: var bsCg = crypto.sign(c_kSkuEncT2, Crypto.DES_MAC, bsCgDat);
2025/07/16 08:40:48: Line 332: Crypto.sign arguments
1: Key

2: Double: 8

3: ByteString: 0007B0912F66F03BB5BDBCD7B2B44B3A8000000000000000

ByteString: 98F17FC47358F7CC

2025/07/16 08:40:48: Line 371: function c_sendApduS2(nCla, nIns, nP1, nP2, bsDat, nMech, nSecLvl, bsIcv, sMsg)
2025/07/16 08:40:48: Line 371: UBJSGlobalClass.c_sendApduS2 arguments
1: Int: 132

2: Int: 130

3: Int: 0

4: Int: 0

5: ByteString: 98F17FC47358F7CC

6: Double: 9

7: Int: 0

8: ByteString: 0000000000000000

9: String: External Auth

2025/07/16 08:40:48: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:48: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 132

Boolean: false

2025/07/16 08:40:48: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:48: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 130

Boolean: false

2025/07/16 08:40:48: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:48: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:48: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:48: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:48: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:48: Line 378: UBJSGlobalClass.isNaN arguments
1: Double: 9

Boolean: false

2025/07/16 08:40:48: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:48: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: Number.toString arguments
1: Int: 16

String: 84

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: Number.toString arguments
1: Int: 16

String: 82

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: ByteString.toString arguments

String: 98F17FC47358F7CC

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: Number.toString arguments
1: Int: 16

String: 9

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: ByteString.toString arguments

String: 0000000000000000

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: Function.ByteString arguments
1: String: !!+000863.c_sendApduS2(84, 82, 0, 0, 98F17FC47358F7CC, 9, 0, 0000000000000000, External Auth)

2: Double: 1

ByteString: 21212B3030303836332E635F73656E644170647553322838342C2038322C20302C20302C20393846313746433437333538463743432C20392C20302C20303030303030303030303030303030302C2045787465726E616C204175746829

2025/07/16 08:40:48: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 384: Number.toString arguments
1: Int: 16

String: 84

2025/07/16 08:40:48: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 384: String.toUpperCase arguments

String: 84

2025/07/16 08:40:48: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 384: String.substr arguments
1: Int: -2

2: Int: 2

String: 84

2025/07/16 08:40:48: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 385: Number.toString arguments
1: Int: 16

String: 82

2025/07/16 08:40:48: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 385: String.toUpperCase arguments

String: 82

2025/07/16 08:40:48: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 385: String.substr arguments
1: Int: -2

2: Int: 2

String: 82

2025/07/16 08:40:48: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 386: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:48: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 386: String.toUpperCase arguments

String: 0

2025/07/16 08:40:48: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 386: String.substr arguments
1: Int: -2

2: Int: 2

String: 00

2025/07/16 08:40:48: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 387: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:48: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 387: String.toUpperCase arguments

String: 0

2025/07/16 08:40:48: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 387: String.substr arguments
1: Int: -2

2: Int: 2

String: 00

2025/07/16 08:40:48: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 388: Number.toString arguments
1: Int: 16

String: 10

2025/07/16 08:40:48: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 388: String.toUpperCase arguments

String: 10

2025/07/16 08:40:48: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 388: String.substr arguments
1: Int: -2

2: Int: 2

String: 10

2025/07/16 08:40:48: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:48: Line 392: ByteString.valueOf arguments

ByteString: 98F17FC47358F7CC

2025/07/16 08:40:48: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:48: Line 392: ByteString.toString arguments

String: 98F17FC47358F7CC

2025/07/16 08:40:48: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:48: Line 392: Function.ByteString arguments
1: String: 848200001098F17FC47358F7CC

2: Double: 4

ByteString: 848200001098F17FC47358F7CC

2025/07/16 08:40:48: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:48: Line 392: ByteString.pad arguments
1: Double: 37

ByteString: 848200001098F17FC47358F7CC800000

2025/07/16 08:40:48: Line 393: var bsMac = crypto.sign(c_kSkuMac, nMech, bsCmd, bsIcv); // MAC cmd
2025/07/16 08:40:48: Line 393: Crypto.sign arguments
1: Key

2: Double: 9

3: ByteString: 848200001098F17FC47358F7CC800000

4: ByteString: 0000000000000000

ByteString: F58A2C8118BC2ADE

2025/07/16 08:40:48: Line 402: GPSystem.trace(sMsg); // Log
2025/07/16 08:40:48: Line 402: GPSystem.trace arguments
1: String: External Auth

2025/07/16 08:40:48: GPSystem.trace
External Auth

Boolean: true

2025/07/16 08:40:48: Line 403: var bsRtn = card.sendApdu(nCla,nIns,nP1,nP2,bsDat.concat(bsMac));
2025/07/16 08:40:48: Line 403: ByteString.concat arguments
1: ByteString: F58A2C8118BC2ADE

ByteString: 98F17FC47358F7CCF58A2C8118BC2ADE

2025/07/16 08:40:48: Line 403: var bsRtn = card.sendApdu(nCla,nIns,nP1,nP2,bsDat.concat(bsMac));
2025/07/16 08:40:48: Line 403: Card.sendApdu arguments
1: Int: 132

2: Int: 130

3: Int: 0

4: Int: 0

5: ByteString: 98F17FC47358F7CCF58A2C8118BC2ADE

2025/07/16 08:40:48: DCC9kServer IC Commands
0000: 84 82 00 00 10 98 F1 7F-C4 73 58 F7 CC F5 8A 2C             sX    ,
0010: 81 18 BC 2A DE 21 53 57-02 2B 2A                       * !SW +*     

2025/07/16 08:40:48: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:48: Line 407: c_bsChainMac = crypto.encrypt(c_kSkuMacT3s, Crypto.DES_CBC, bsMac); // ICV encryption for C-MAC session
2025/07/16 08:40:48: Line 407: Crypto.encrypt arguments
1: Key

2: Double: 2

3: ByteString: F58A2C8118BC2ADE

ByteString: 1DFD61A73AA6D8A9

2025/07/16 08:40:48: Line 411: new ByteString("!"+"!-"+CALL+"("+bsRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:48: Line 411: ByteString.toString arguments

String: 

2025/07/16 08:40:48: Line 411: new ByteString("!"+"!-"+CALL+"("+bsRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:48: Line 411: Function.ByteString arguments
1: String: !!-000863.c_sendApduS2()

2: Double: 1

ByteString: 21212D3030303836332E635F73656E644170647553322829

2025/07/16 08:40:48: Line 412: UBJSGlobalClass.c_sendApduS2 result
ByteString: 

2025/07/16 08:40:48: Line 343: new ByteString("!"+"!-"+CALL+"("+bsIuRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:48: Line 343: ByteString.toString arguments

String: FFFFFFFFFBF304EA754401020007B0912F66F03B3AF25E57F13FECA6

2025/07/16 08:40:48: Line 343: new ByteString("!"+"!-"+CALL+"("+bsIuRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:48: Line 343: Function.ByteString arguments
1: String: !!-000863.c_Auth(FFFFFFFFFBF304EA754401020007B0912F66F03B3AF25E57F13FECA6)

2: Double: 1

ByteString: 21212D3030303836332E635F4175746828464646464646464646424633303445413735343430313032303030374230393132463636463033423341463235453537463133464543413629

2025/07/16 08:40:48: Line 344: UBJSGlobalClass.c_Auth result
ByteString: FFFFFFFFFBF304EA754401020007B0912F66F03B3AF25E57F13FECA6

2025/07/16 08:40:48: Line 1156: var bsDat =        art.getVariableValue("tCtP3i_4F_Aid")
2025/07/16 08:40:48: Line 1156: Art.getVariableValue arguments
1: String: tCtP3i_4F_Aid

ByteString: 4F07A0000000031010

2025/07/16 08:40:48: Line 1157: .concat(art.getVariableValue("tCtP3i_50_ApLb"))
2025/07/16 08:40:48: Line 1157: Art.getVariableValue arguments
1: String: tCtP3i_50_ApLb

ByteString: 500A56697361204465626974

2025/07/16 08:40:48: Line 1157: .concat(art.getVariableValue("tCtP3i_50_ApLb"))
2025/07/16 08:40:48: Line 1157: ByteString.concat arguments
1: ByteString: 500A56697361204465626974

ByteString: 4F07A0000000031010500A56697361204465626974

2025/07/16 08:40:48: Line 1158: .concat(art.getVariableValue("xPsP3i_1F73_Pdt"))
2025/07/16 08:40:48: Line 1158: Art.getVariableValue arguments
1: String: xPsP3i_1F73_Pdt

ByteString: 

2025/07/16 08:40:48: Line 1158: .concat(art.getVariableValue("xPsP3i_1F73_Pdt"))
2025/07/16 08:40:48: Line 1158: ByteString.concat arguments
1: ByteString: 

ByteString: 4F07A0000000031010500A56697361204465626974

2025/07/16 08:40:48: Line 1159: .concat(art.getVariableValue("tCtP3i_87_Api"));
2025/07/16 08:40:48: Line 1159: Art.getVariableValue arguments
1: String: tCtP3i_87_Api

ByteString: 870101

2025/07/16 08:40:48: Line 1159: .concat(art.getVariableValue("tCtP3i_87_Api"));
2025/07/16 08:40:48: Line 1159: ByteString.concat arguments
1: ByteString: 870101

ByteString: 4F07A0000000031010500A56697361204465626974870101

2025/07/16 08:40:48: Line 1160: var bs61   = new TLV(0x61, bsDat, TLV.EMV).getTLV();
2025/07/16 08:40:48: Line 1160: Function.TLV arguments
1: Int: 97

2: ByteString: 4F07A0000000031010500A56697361204465626974870101

3: Double: 2

TLV: 61184F07A0000000031010500A56697361204465626974870101

2025/07/16 08:40:48: Line 1160: var bs61   = new TLV(0x61, bsDat, TLV.EMV).getTLV();
2025/07/16 08:40:48: Line 1160: TLV.getTLV arguments

ByteString: 61184F07A0000000031010500A56697361204465626974870101

2025/07/16 08:40:48: Line 1161: var bsBf0c = new TLV(0xBF0C, bs61, TLV.EMV).getTLV();
2025/07/16 08:40:48: Line 1161: Function.TLV arguments
1: Int: 48908

2: ByteString: 61184F07A0000000031010500A56697361204465626974870101

3: Double: 2

TLV: BF0C1A61184F07A0000000031010500A56697361204465626974870101

2025/07/16 08:40:48: Line 1161: var bsBf0c = new TLV(0xBF0C, bs61, TLV.EMV).getTLV();
2025/07/16 08:40:48: Line 1161: TLV.getTLV arguments

ByteString: BF0C1A61184F07A0000000031010500A56697361204465626974870101

2025/07/16 08:40:48: Line 1162: var bsA5   = new TLV(0xA5, bsBf0c, TLV.EMV).getTLV();
2025/07/16 08:40:48: Line 1162: Function.TLV arguments
1: Int: 165

2: ByteString: BF0C1A61184F07A0000000031010500A56697361204465626974870101

3: Double: 2

TLV: A51DBF0C1A61184F07A0000000031010500A56697361204465626974870101

2025/07/16 08:40:48: Line 1162: var bsA5   = new TLV(0xA5, bsBf0c, TLV.EMV).getTLV();
2025/07/16 08:40:48: Line 1162: TLV.getTLV arguments

ByteString: A51DBF0C1A61184F07A0000000031010500A56697361204465626974870101

2025/07/16 08:40:48: Line 1166: var bsDgi = new TLV(0x9102, bsA5, TLV.DGI).getTLV();
2025/07/16 08:40:48: Line 1166: Function.TLV arguments
1: Int: 37122

2: ByteString: A51DBF0C1A61184F07A0000000031010500A56697361204465626974870101

3: Double: 1

TLV: 91021FA51DBF0C1A61184F07A0000000031010500A56697361204465626974870101

2025/07/16 08:40:48: Line 1166: var bsDgi = new TLV(0x9102, bsA5, TLV.DGI).getTLV();
2025/07/16 08:40:48: Line 1166: TLV.getTLV arguments

ByteString: 91021FA51DBF0C1A61184F07A0000000031010500A56697361204465626974870101

2025/07/16 08:40:48: Line 1167: card.sendApdu(0x80,0xE2,0x80,nP2++,bsDgi); //PPSE 9102
2025/07/16 08:40:48: Line 1167: Card.sendApdu arguments
1: Int: 128

2: Int: 226

3: Int: 128

4: Int: 0

5: ByteString: 91021FA51DBF0C1A61184F07A0000000031010500A56697361204465626974870101

2025/07/16 08:40:48: DCC9kServer IC Commands
0000: 80 E2 80 00 22 91 02 1F-A5 1D BF 0C 1A 61 18 4F         "        a O
0010: 07 A0 00 00 00 03 10 10-50 0A 56 69 73 61 20 44             P Visa D
0020: 65 62 69 74 87 01 01 21-53 57 02 2B 2A              ebit   !SW +*   

2025/07/16 08:40:48: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:48: Line 1171: new ByteString("!"+"!-"+CALL+"()",ASCII); // Log end func
2025/07/16 08:40:48: Line 1171: Function.ByteString arguments
1: String: !!-000863.t_PpsePerso()

2: Double: 1

ByteString: 21212D3030303836332E745F50707365506572736F2829

2025/07/16 08:40:48: Line 1172: UBJSGlobalClass.t_PpsePerso result
Void: undefined

2025/07/16 08:40:48: Line 1401: new ByteString("!"+"!-"+CALL+"()",ASCII); // Log end func
2025/07/16 08:40:48: Line 1401: Function.ByteString arguments
1: String: !!-000863.t_Main()

2: Double: 1

ByteString: 21212D3030303836332E745F4D61696E2829

2025/07/16 08:40:48: Line 1402: UBJSGlobalClass.t_Main result
Void: undefined

2025/07/16 08:40:48: Function: UBExecuteJavaScript, result: 0

2025/07/16 08:40:48: Function: UBExecuteJavaScript, arguments: aCrd_JsPersoEnd
2025/07/16 08:40:48: Line 22: art.enableExtensions();
2025/07/16 08:40:48: Line 22: Art.enableExtensions arguments

Void: undefined

2025/07/16 08:40:48: Line 23: art.getErrorMessages(); // Clear error messages
2025/07/16 08:40:48: Line 23: Art.getErrorMessages arguments

String: 

2025/07/16 08:40:48: Line 55: function c_PersoEnd()
2025/07/16 08:40:48: Line 55: UBJSGlobalClass.c_PersoEnd arguments

2025/07/16 08:40:48: Line 62: new ByteString("!"+"!+"+CALL+"()",ASCII); // Log begin func
2025/07/16 08:40:48: Line 62: Function.ByteString arguments
1: String: !!+000863.c_PersoEnd()

2: Double: 1

ByteString: 21212B3030303836332E635F506572736F456E642829

2025/07/16 08:40:48: Line 49: function c_Auth(bsAid, nMeth, nVr, nId, nSecLvl)
2025/07/16 08:40:48: Line 49: UBJSGlobalClass.c_Auth arguments
1: ByteString: A000000151000000

2: Int: 22

3: Int: 0

4: Int: 0

5: Int: 0

2025/07/16 08:40:48: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:48: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 22

Boolean: false

2025/07/16 08:40:48: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:48: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:48: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:48: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:48: Line 56: if ((bsAid == undefined)||(bsAid.constructor != ByteString)||(isNaN(nMeth))||(isNaN(nVr))||(isNaN(nId))||(isNaN(nSecLvl)))
2025/07/16 08:40:48: Line 56: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:48: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 58: ByteString.toString arguments

String: A000000151000000

2025/07/16 08:40:48: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 58: Number.toString arguments
1: Int: 10

String: 22

2025/07/16 08:40:48: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:48: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:48: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 58: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:48: Line 58: new ByteString("!"+"!+"+CALL+"("+bsAid.toString()+", "+nMeth.toString(10)+", "+nVr.toString(16)+", "+nId.toString(16)+", "+nSecLvl.toString(16)+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 58: Function.ByteString arguments
1: String: !!+000863.c_Auth(A000000151000000, 22, 0, 0, 0)

2: Double: 1

ByteString: 21212B3030303836332E635F4175746828413030303030303135313030303030302C2032322C20302C20302C203029

2025/07/16 08:40:48: Line 62: var bsF001 = new ByteString("F001", HEX);
2025/07/16 08:40:48: Line 62: Function.ByteString arguments
1: String: F001

2: Double: 4

ByteString: F001

2025/07/16 08:40:48: Line 63: var bsF002 = new ByteString("F002", HEX);
2025/07/16 08:40:48: Line 63: Function.ByteString arguments
1: String: F002

2: Double: 4

ByteString: F002

2025/07/16 08:40:48: Line 64: var bsF003 = new ByteString("F003", HEX);
2025/07/16 08:40:48: Line 64: Function.ByteString arguments
1: String: F003

2: Double: 4

ByteString: F003

2025/07/16 08:40:48: Line 65: var bs0F01 = new ByteString("0F01", HEX);
2025/07/16 08:40:48: Line 65: Function.ByteString arguments
1: String: 0F01

2: Double: 4

ByteString: 0F01

2025/07/16 08:40:48: Line 66: var bs0F02 = new ByteString("0F02", HEX);
2025/07/16 08:40:48: Line 66: Function.ByteString arguments
1: String: 0F02

2: Double: 4

ByteString: 0F02

2025/07/16 08:40:48: Line 67: var bs0F03 = new ByteString("0F03", HEX);
2025/07/16 08:40:48: Line 67: Function.ByteString arguments
1: String: 0F03

2: Double: 4

ByteString: 0F03

2025/07/16 08:40:48: Line 68: var bs0182 = new ByteString("0182", HEX);
2025/07/16 08:40:48: Line 68: Function.ByteString arguments
1: String: 0182

2: Double: 4

ByteString: 0182

2025/07/16 08:40:48: Line 69: var bs0101 = new ByteString("0101", HEX);
2025/07/16 08:40:48: Line 69: Function.ByteString arguments
1: String: 0101

2: Double: 4

ByteString: 0101

2025/07/16 08:40:48: Line 70: var bs0181 = new ByteString("0181", HEX);
2025/07/16 08:40:48: Line 70: Function.ByteString arguments
1: String: 0181

2: Double: 4

ByteString: 0181

2025/07/16 08:40:48: Line 71: var bsZero12 = new ByteString("000000000000000000000000",HEX);
2025/07/16 08:40:48: Line 71: Function.ByteString arguments
1: String: 000000000000000000000000

2: Double: 4

ByteString: 000000000000000000000000

2025/07/16 08:40:48: Line 72: var bsZero8  = new ByteString("0000000000000000",HEX);
2025/07/16 08:40:48: Line 72: Function.ByteString arguments
1: String: 0000000000000000

2: Double: 4

ByteString: 0000000000000000

2025/07/16 08:40:48: Line 77: card.sendApdu(0x00,0xA4,0x04,0x00,bsAid,0x00); //Select AID
2025/07/16 08:40:48: Line 77: Card.sendApdu arguments
1: Int: 0

2: Int: 164

3: Int: 4

4: Int: 0

5: ByteString: A000000151000000

6: Int: 0

2025/07/16 08:40:48: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 00     !IOCTL ISOCase4 
0010: A4 04 00 08 A0 00 00 01-51 00 00 00 00 21 53 57             Q    !SW
0020: 02 2B 2A                                             +*             

2025/07/16 08:40:48: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: 6F 10 A5 04 9F 65 01 FF-84 08 A0 00 00 01 51 00     o    e        Q 
0010: 00 00                                                               

ByteString: 6F10A5049F6501FF8408A000000151000000

2025/07/16 08:40:48: Line 81: var bsRterm = crypto.generateRandom(8);
2025/07/16 08:40:48: Line 81: Crypto.generateRandom arguments
1: Int: 8

ByteString: 463CAE580846AC49

2025/07/16 08:40:48: Line 87: var bsIuRtn = card.sendApdu(0x80,0x50,nVr,nId,bsRterm,0x00);//Init update
2025/07/16 08:40:48: Line 87: Card.sendApdu arguments
1: Int: 128

2: Int: 80

3: Int: 0

4: Int: 0

5: ByteString: 463CAE580846AC49

6: Int: 0

2025/07/16 08:40:48: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: 50 00 00 08 46 3C AE 58-08 46 AC 49 00 21 53 57     P   F< X F I !SW
0020: 02 2B 2A                                             +*             

2025/07/16 08:40:48: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000
0000: FF FF FF FF FB F3 04 EA-75 44 01 02 00 08 C3 D0             uD      
0010: 7C 87 B0 35 C2 49 B5 C6-48 D9 9D 69                 |  5 I  H  i    

ByteString: FFFFFFFFFBF304EA754401020008C3D07C87B035C249B5C648D99D69

2025/07/16 08:40:48: Line 235: var bsIuDiv  = bsIuRtn.bytes(4,6);
2025/07/16 08:40:48: Line 235: ByteString.bytes arguments
1: Int: 4

2: Int: 6

ByteString: FBF304EA7544

2025/07/16 08:40:48: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 236: ByteString.concat arguments
1: ByteString: F001

ByteString: FBF304EA7544F001

2025/07/16 08:40:48: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 236: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F001FBF304EA7544

2025/07/16 08:40:48: Line 236: var bsEncDiv = bsIuDiv.concat(bsF001).concat(bsIuDiv).concat(bs0F01); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 236: ByteString.concat arguments
1: ByteString: 0F01

ByteString: FBF304EA7544F001FBF304EA75440F01

2025/07/16 08:40:48: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 237: ByteString.concat arguments
1: ByteString: F002

ByteString: FBF304EA7544F002

2025/07/16 08:40:48: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 237: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F002FBF304EA7544

2025/07/16 08:40:48: Line 237: var bsMacDiv = bsIuDiv.concat(bsF002).concat(bsIuDiv).concat(bs0F02); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 237: ByteString.concat arguments
1: ByteString: 0F02

ByteString: FBF304EA7544F002FBF304EA75440F02

2025/07/16 08:40:48: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 238: ByteString.concat arguments
1: ByteString: F003

ByteString: FBF304EA7544F003

2025/07/16 08:40:48: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 238: ByteString.concat arguments
1: ByteString: FBF304EA7544

ByteString: FBF304EA7544F003FBF304EA7544

2025/07/16 08:40:48: Line 238: var bsDekDiv = bsIuDiv.concat(bsF003).concat(bsIuDiv).concat(bs0F03); // [CPG2.1.1] pg 26
2025/07/16 08:40:48: Line 238: ByteString.concat arguments
1: ByteString: 0F03

ByteString: FBF304EA7544F003FBF304EA75440F03

2025/07/16 08:40:48: Line 242: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsEncDiv, c_kDKenc);
2025/07/16 08:40:48: Line 242: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F001FBF304EA75440F01

4: Key

Void: undefined

2025/07/16 08:40:48: Line 243: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsMacDiv, c_kDKmac);
2025/07/16 08:40:48: Line 243: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F002FBF304EA75440F02

4: Key

Void: undefined

2025/07/16 08:40:48: Line 244: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsDekDiv, c_kDKdek);
2025/07/16 08:40:48: Line 244: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F003FBF304EA75440F03

4: Key

Void: undefined

2025/07/16 08:40:48: Line 245: crypto.deriveKey(c_kKmc, Crypto.DES_ECB, bsDekDiv, c_kDKdekT0);
2025/07/16 08:40:48: Line 245: Crypto.deriveKey arguments
1: Key

2: Double: 5

3: ByteString: FBF304EA7544F003FBF304EA75440F03

4: Key

Void: undefined

2025/07/16 08:40:48: Line 247: c_kDKenc.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:48: Line 247: Key.getKcv arguments
1: Double: 1048576

ByteString: 2F60DAE9569C6DE8

2025/07/16 08:40:48: Line 248: c_kDKmac.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:48: Line 248: Key.getKcv arguments
1: Double: 1048576

ByteString: 5CCE4854D71634D1

2025/07/16 08:40:48: Line 249: c_kDKdek.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:48: Line 249: Key.getKcv arguments
1: Double: 1048576

ByteString: 36B975605BE0D863

2025/07/16 08:40:48: Line 253: var bsSeqPad = bsIuRtn.bytes(12,2).concat(bsZero12); // Get and pad sequence count
2025/07/16 08:40:48: Line 253: ByteString.bytes arguments
1: Int: 12

2: Int: 2

ByteString: 0008

2025/07/16 08:40:48: Line 253: var bsSeqPad = bsIuRtn.bytes(12,2).concat(bsZero12); // Get and pad sequence count
2025/07/16 08:40:48: Line 253: ByteString.concat arguments
1: ByteString: 000000000000000000000000

ByteString: 0008000000000000000000000000

2025/07/16 08:40:48: Line 254: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEnc);
2025/07/16 08:40:48: Line 254: ByteString.concat arguments
1: ByteString: 0008000000000000000000000000

ByteString: 01820008000000000000000000000000

2025/07/16 08:40:48: Line 254: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEnc);
2025/07/16 08:40:48: Line 254: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01820008000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:48: Line 255: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEncT2);
2025/07/16 08:40:48: Line 255: ByteString.concat arguments
1: ByteString: 0008000000000000000000000000

ByteString: 01820008000000000000000000000000

2025/07/16 08:40:48: Line 255: crypto.deriveKey(c_kDKenc, Crypto.DES_CBC, bs0182.concat(bsSeqPad), c_kSkuEncT2);
2025/07/16 08:40:48: Line 255: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01820008000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:48: Line 256: crypto.deriveKey(c_kDKmac, Crypto.DES_CBC, bs0101.concat(bsSeqPad), c_kSkuMac);
2025/07/16 08:40:48: Line 256: ByteString.concat arguments
1: ByteString: 0008000000000000000000000000

ByteString: 01010008000000000000000000000000

2025/07/16 08:40:48: Line 256: crypto.deriveKey(c_kDKmac, Crypto.DES_CBC, bs0101.concat(bsSeqPad), c_kSkuMac);
2025/07/16 08:40:48: Line 256: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01010008000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:48: Line 257: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDek);
2025/07/16 08:40:48: Line 257: ByteString.concat arguments
1: ByteString: 0008000000000000000000000000

ByteString: 01810008000000000000000000000000

2025/07/16 08:40:48: Line 257: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDek);
2025/07/16 08:40:48: Line 257: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01810008000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:48: Line 258: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDekT3);
2025/07/16 08:40:48: Line 258: ByteString.concat arguments
1: ByteString: 0008000000000000000000000000

ByteString: 01810008000000000000000000000000

2025/07/16 08:40:48: Line 258: crypto.deriveKey(c_kDKdek, Crypto.DES_CBC, bs0181.concat(bsSeqPad), c_kSkuDekT3);
2025/07/16 08:40:48: Line 258: Crypto.deriveKey arguments
1: Key

2: Double: 2

3: ByteString: 01810008000000000000000000000000

4: Key

Void: undefined

2025/07/16 08:40:48: Line 260: c_kSkuEnc.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:48: Line 260: Key.getKcv arguments
1: Double: 1048576

ByteString: 0601A1900AFD9141

2025/07/16 08:40:48: Line 261: c_kSkuMac.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:48: Line 261: Key.getKcv arguments
1: Double: 1048576

ByteString: EB8C2E45093B8908

2025/07/16 08:40:48: Line 262: c_kSkuDek.getKcv(Key.EIGHTZEROS);
2025/07/16 08:40:48: Line 262: Key.getKcv arguments
1: Double: 1048576

ByteString: C2EFC83C4A1D1C07

2025/07/16 08:40:48: Line 266: var kTmp = new Key();
2025/07/16 08:40:48: Line 266: Function.Key arguments

Key: 

2025/07/16 08:40:48: Line 267: crypto.wrap(c_kKek, Crypto.DES_ECB, c_kSkuMac, kTmp);
2025/07/16 08:40:48: Line 267: Crypto.wrap arguments
1: Key

2: Double: 5

3: Key

4: Key: 

Void: undefined

2025/07/16 08:40:48: Line 268: var bsTmp = new ByteString();
2025/07/16 08:40:48: Line 268: Function.ByteString arguments

ByteString: 

2025/07/16 08:40:48: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:48: Line 269: Key.getComponent arguments
1: Double: 393216

ByteString: ABFD50309BD5725876242D5265363C54

2025/07/16 08:40:48: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:48: Line 269: ByteString.left arguments
1: Int: 8

ByteString: ABFD50309BD57258

2025/07/16 08:40:48: Line 269: art.execute("UBDesECB", "DecryptKey3", c_bsKek, kTmp.getComponent(Key.DES).left(8), bsTmp);
2025/07/16 08:40:48: Line 269: Art.execute arguments
1: String: UBDesECB

2: String: DecryptKey3

3: ByteString

4: ByteString: ABFD50309BD57258

5: ByteString: 

Int: 0

2025/07/16 08:40:48: Line 270: c_kSkuMacT3s.setComponent(Key.DES, bsTmp);
2025/07/16 08:40:48: Line 270: Key.setComponent arguments
1: Double: 393216

2: ByteString

Void: undefined

2025/07/16 08:40:48: Line 315: var bsRcard = bsIuRtn.bytes(12,8);      // Get card random number
2025/07/16 08:40:48: Line 315: ByteString.bytes arguments
1: Int: 12

2: Int: 8

ByteString: 0008C3D07C87B035

2025/07/16 08:40:48: Line 316: var bsMacDat = bsRterm.concat(bsRcard).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:48: Line 316: ByteString.concat arguments
1: ByteString: 0008C3D07C87B035

ByteString: 463CAE580846AC490008C3D07C87B035

2025/07/16 08:40:48: Line 316: var bsMacDat = bsRterm.concat(bsRcard).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:48: Line 316: ByteString.pad arguments
1: Double: 37

ByteString: 463CAE580846AC490008C3D07C87B0358000000000000000

2025/07/16 08:40:48: Line 317: var bsMac = crypto.sign(c_kSkuEncT2, Crypto.DES_MAC, bsMacDat);
2025/07/16 08:40:48: Line 317: Crypto.sign arguments
1: Key

2: Double: 8

3: ByteString: 463CAE580846AC490008C3D07C87B0358000000000000000

ByteString: C249B5C648D99D69

2025/07/16 08:40:48: Line 321: var bsCrdCg = bsIuRtn.bytes(20,8); // Card's cryptogram
2025/07/16 08:40:48: Line 321: ByteString.bytes arguments
1: Int: 20

2: Int: 8

ByteString: C249B5C648D99D69

2025/07/16 08:40:48: Line 322: if (bsMac.equals(bsCrdCg))
2025/07/16 08:40:48: Line 322: ByteString.equals arguments
1: ByteString: C249B5C648D99D69

Int: 1

2025/07/16 08:40:48: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:48: Line 323: ByteString.toString arguments

String: C249B5C648D99D69

2025/07/16 08:40:48: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:48: Line 323: ByteString.toString arguments

String: C249B5C648D99D69

2025/07/16 08:40:48: Line 323: GPSystem.trace(CALL+"(): Authentication passed; Card's cryptogram ("+bsCrdCg.toString()+") matches calculated cryptogram ("+bsMac.toString()+").");
2025/07/16 08:40:48: Line 323: GPSystem.trace arguments
1: String: 000863.c_Auth(): Authentication passed; Card's cryptogram (C249B5C648D99D69) matches calculated cryptogram (C249B5C648D99D69).

2025/07/16 08:40:48: GPSystem.trace
000863.c_Auth(): Authentication passed; Card's cryptogram (C249B5C648D99D69) matches calculated cryptogram (C249B5C648D99D69).

Boolean: true

2025/07/16 08:40:48: Line 331: var bsCgDat = bsRcard.concat(bsRterm).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:48: Line 331: ByteString.concat arguments
1: ByteString: 463CAE580846AC49

ByteString: 0008C3D07C87B035463CAE580846AC49

2025/07/16 08:40:48: Line 331: var bsCgDat = bsRcard.concat(bsRterm).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:48: Line 331: ByteString.pad arguments
1: Double: 37

ByteString: 0008C3D07C87B035463CAE580846AC498000000000000000

2025/07/16 08:40:48: Line 332: var bsCg = crypto.sign(c_kSkuEncT2, Crypto.DES_MAC, bsCgDat);
2025/07/16 08:40:48: Line 332: Crypto.sign arguments
1: Key

2: Double: 8

3: ByteString: 0008C3D07C87B035463CAE580846AC498000000000000000

ByteString: EDE2B1CE1AB90154

2025/07/16 08:40:48: Line 371: function c_sendApduS2(nCla, nIns, nP1, nP2, bsDat, nMech, nSecLvl, bsIcv, sMsg)
2025/07/16 08:40:48: Line 371: UBJSGlobalClass.c_sendApduS2 arguments
1: Int: 132

2: Int: 130

3: Int: 0

4: Int: 0

5: ByteString: EDE2B1CE1AB90154

6: Double: 9

7: Int: 0

8: ByteString: 0000000000000000

9: String: External Auth

2025/07/16 08:40:48: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:48: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 132

Boolean: false

2025/07/16 08:40:48: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:48: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 130

Boolean: false

2025/07/16 08:40:48: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:48: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:48: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:48: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:48: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:48: Line 378: UBJSGlobalClass.isNaN arguments
1: Double: 9

Boolean: false

2025/07/16 08:40:48: Line 378: if ((isNaN(nCla))||(isNaN(nIns))||(isNaN(nP1))||(isNaN(nP2))||(bsDat == undefined)||(bsDat.constructor != ByteString)||(isNaN(nMech))||(isNaN(nSecLvl))||(bsIcv == undefined)||(bsIcv.constructor != ByteString)||(sMsg == undefined)||(sMsg.constructor != String))
2025/07/16 08:40:48: Line 378: UBJSGlobalClass.isNaN arguments
1: Int: 0

Boolean: false

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: Number.toString arguments
1: Int: 16

String: 84

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: Number.toString arguments
1: Int: 16

String: 82

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: ByteString.toString arguments

String: EDE2B1CE1AB90154

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: Number.toString arguments
1: Int: 16

String: 9

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: ByteString.toString arguments

String: 0000000000000000

2025/07/16 08:40:48: Line 380: new ByteString("!"+"!+"+CALL+"("+nCla.toString(16)+", "+nIns.toString(16)+", "+nP1.toString(16)+", "+nP2.toString(16)+", "+bsDat.toString()+", "+nMech.toString(16)+", "+nSecLvl.toString(16)+", "+bsIcv.toString()+", "+sMsg+")",ASCII); // Log begin func
2025/07/16 08:40:48: Line 380: Function.ByteString arguments
1: String: !!+000863.c_sendApduS2(84, 82, 0, 0, EDE2B1CE1AB90154, 9, 0, 0000000000000000, External Auth)

2: Double: 1

ByteString: 21212B3030303836332E635F73656E644170647553322838342C2038322C20302C20302C20454445324231434531414239303135342C20392C20302C20303030303030303030303030303030302C2045787465726E616C204175746829

2025/07/16 08:40:48: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 384: Number.toString arguments
1: Int: 16

String: 84

2025/07/16 08:40:48: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 384: String.toUpperCase arguments

String: 84

2025/07/16 08:40:48: Line 384: var sCla = ("0"+nCla.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 384: String.substr arguments
1: Int: -2

2: Int: 2

String: 84

2025/07/16 08:40:48: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 385: Number.toString arguments
1: Int: 16

String: 82

2025/07/16 08:40:48: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 385: String.toUpperCase arguments

String: 82

2025/07/16 08:40:48: Line 385: var sIns = ("0"+nIns.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 385: String.substr arguments
1: Int: -2

2: Int: 2

String: 82

2025/07/16 08:40:48: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 386: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:48: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 386: String.toUpperCase arguments

String: 0

2025/07/16 08:40:48: Line 386: var sP1  = ("0"+nP1.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 386: String.substr arguments
1: Int: -2

2: Int: 2

String: 00

2025/07/16 08:40:48: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 387: Number.toString arguments
1: Int: 16

String: 0

2025/07/16 08:40:48: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 387: String.toUpperCase arguments

String: 0

2025/07/16 08:40:48: Line 387: var sP2  = ("0"+nP2.toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 387: String.substr arguments
1: Int: -2

2: Int: 2

String: 00

2025/07/16 08:40:48: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 388: Number.toString arguments
1: Int: 16

String: 10

2025/07/16 08:40:48: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 388: String.toUpperCase arguments

String: 10

2025/07/16 08:40:48: Line 388: var sLc  = ("0"+(bsDat.length+8).toString(16).toUpperCase()).substr(-2,2);
2025/07/16 08:40:48: Line 388: String.substr arguments
1: Int: -2

2: Int: 2

String: 10

2025/07/16 08:40:48: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:48: Line 392: ByteString.valueOf arguments

ByteString: EDE2B1CE1AB90154

2025/07/16 08:40:48: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:48: Line 392: ByteString.toString arguments

String: EDE2B1CE1AB90154

2025/07/16 08:40:48: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:48: Line 392: Function.ByteString arguments
1: String: 8482000010EDE2B1CE1AB90154

2: Double: 4

ByteString: 8482000010EDE2B1CE1AB90154

2025/07/16 08:40:48: Line 392: var bsCmd = new ByteString(sCla+sIns+sP1+sP2+sLc+bsDat,HEX).pad(Crypto.ISO9797_METHOD_2);
2025/07/16 08:40:48: Line 392: ByteString.pad arguments
1: Double: 37

ByteString: 8482000010EDE2B1CE1AB90154800000

2025/07/16 08:40:48: Line 393: var bsMac = crypto.sign(c_kSkuMac, nMech, bsCmd, bsIcv); // MAC cmd
2025/07/16 08:40:48: Line 393: Crypto.sign arguments
1: Key

2: Double: 9

3: ByteString: 8482000010EDE2B1CE1AB90154800000

4: ByteString: 0000000000000000

ByteString: 855F57C9828EF1EA

2025/07/16 08:40:48: Line 402: GPSystem.trace(sMsg); // Log
2025/07/16 08:40:48: Line 402: GPSystem.trace arguments
1: String: External Auth

2025/07/16 08:40:48: GPSystem.trace
External Auth

Boolean: true

2025/07/16 08:40:48: Line 403: var bsRtn = card.sendApdu(nCla,nIns,nP1,nP2,bsDat.concat(bsMac));
2025/07/16 08:40:48: Line 403: ByteString.concat arguments
1: ByteString: 855F57C9828EF1EA

ByteString: EDE2B1CE1AB90154855F57C9828EF1EA

2025/07/16 08:40:48: Line 403: var bsRtn = card.sendApdu(nCla,nIns,nP1,nP2,bsDat.concat(bsMac));
2025/07/16 08:40:48: Line 403: Card.sendApdu arguments
1: Int: 132

2: Int: 130

3: Int: 0

4: Int: 0

5: ByteString: EDE2B1CE1AB90154855F57C9828EF1EA

2025/07/16 08:40:48: DCC9kServer IC Commands
0000: 84 82 00 00 10 ED E2 B1-CE 1A B9 01 54 85 5F 57                 T _W
0010: C9 82 8E F1 EA 21 53 57-02 2B 2A                         !SW +*     

2025/07/16 08:40:48: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:48: Line 407: c_bsChainMac = crypto.encrypt(c_kSkuMacT3s, Crypto.DES_CBC, bsMac); // ICV encryption for C-MAC session
2025/07/16 08:40:48: Line 407: Crypto.encrypt arguments
1: Key

2: Double: 2

3: ByteString: 855F57C9828EF1EA

ByteString: D785F72B0EDD01A4

2025/07/16 08:40:48: Line 411: new ByteString("!"+"!-"+CALL+"("+bsRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:48: Line 411: ByteString.toString arguments

String: 

2025/07/16 08:40:48: Line 411: new ByteString("!"+"!-"+CALL+"("+bsRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:48: Line 411: Function.ByteString arguments
1: String: !!-000863.c_sendApduS2()

2: Double: 1

ByteString: 21212D3030303836332E635F73656E644170647553322829

2025/07/16 08:40:48: Line 412: UBJSGlobalClass.c_sendApduS2 result
ByteString: 

2025/07/16 08:40:48: Line 343: new ByteString("!"+"!-"+CALL+"("+bsIuRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:48: Line 343: ByteString.toString arguments

String: FFFFFFFFFBF304EA754401020008C3D07C87B035C249B5C648D99D69

2025/07/16 08:40:48: Line 343: new ByteString("!"+"!-"+CALL+"("+bsIuRtn.toString()+")",ASCII); // Log end func
2025/07/16 08:40:48: Line 343: Function.ByteString arguments
1: String: !!-000863.c_Auth(FFFFFFFFFBF304EA754401020008C3D07C87B035C249B5C648D99D69)

2: Double: 1

ByteString: 21212D3030303836332E635F4175746828464646464646464646424633303445413735343430313032303030384333443037433837423033354332343942354336343844393944363929

2025/07/16 08:40:48: Line 344: UBJSGlobalClass.c_Auth result
ByteString: FFFFFFFFFBF304EA754401020008C3D07C87B035C249B5C648D99D69

2025/07/16 08:40:48: Line 79: card.sendApdu(0x80,0xF0,0x80,0x0F,c_bsCmAid,0x00); //Lock CM
2025/07/16 08:40:48: Line 79: Card.sendApdu arguments
1: Int: 128

2: Int: 240

3: Int: 128

4: Int: 15

5: ByteString: A000000151000000

6: Int: 0

2025/07/16 08:40:48: DCC9kServer IC Commands
0000: 21 49 4F 43 54 4C 08 49-53 4F 43 61 73 65 34 80     !IOCTL ISOCase4 
0010: F0 80 0F 08 A0 00 00 01-51 00 00 00 00 21 53 57             Q    !SW
0020: 02 2B 2A                                             +*             

2025/07/16 08:40:49: DCC9kServer IC Response: Result = 0, SW1SW2 = 9000

ByteString: 

2025/07/16 08:40:49: Line 83: new ByteString("!"+"!-"+CALL+"()",ASCII); // Log end func
2025/07/16 08:40:49: Line 83: Function.ByteString arguments
1: String: !!-000863.c_PersoEnd()

2: Double: 1

ByteString: 21212D3030303836332E635F506572736F456E642829

2025/07/16 08:40:49: Line 84: UBJSGlobalClass.c_PersoEnd result
Void: undefined

2025/07/16 08:40:49: Function: UBExecuteJavaScript, result: 0

2025/07/16 08:40:49: Function: IF, arguments: (aCrd_ArtIc == 'ubique')

Value of aCrd_ArtIc:
0000: 64 63 63 39 6B 73 65 72-76 65 72                    dcc9kserver     

2025/07/16 08:40:49: Function: IF, result: 0

2025/07/16 08:40:49: Function: ENDIF, arguments: <none>

2025/07/16 08:40:49: Function: ENDIF, result: 0

2025/07/16 08:40:49: EMBOSS Commands
0000: 3C 4E 42 53 4A 4F 42 3E-20 20 20 20 20 20 20 20     <NBSJOB>        
0010: 20 20 20 20 20 20 20 20-3C 43 61 72 64 4C 61 79             <CardLay
0020: 6F 75 74 3E 20 20 20 20-20 20 20 20 20 20 20 20     out>            
0030: 20 20 20 20 20 3C 46 72-6F 6E 74 3E 20 20 20 20          <Front>    
0040: 20 20 20 20 20 20 20 20-20 20 20 20 20 20 3C 54                   <T
0050: 65 78 74 20 4E 61 6D 65-3D 22 70 61 6E 22 3E 34     ext Name="pan">4
0060: 32 36 33 37 31 30 33 30-30 31 39 38 31 30 36 3C     263710300198106<
0070: 2F 54 65 78 74 3E 20 20-20 20 20 20 20 20 20 20     /Text>          
0080: 20 20 20 20 20 20 20 20-3C 54 65 78 74 20 4E 61             <Text Na
0090: 6D 65 3D 22 63 61 72 64-48 6F 6C 64 65 72 4E 61     me="cardHolderNa
00A0: 6D 65 22 3E 4D 55 48 41-4D 4D 41 44 20 46 55 52     me">MUHAMMAD FUR
00B0: 51 41 4E 3C 2F 54 65 78-74 3E 20 20 20 20 20 20     QAN</Text>      
00C0: 20 20 20 20 20 20 20 20-20 20 20 20 3C 54 65 78                 <Tex
00D0: 74 20 4E 61 6D 65 3D 22-65 78 70 44 61 74 65 22     t Name="expDate"
00E0: 3E 30 37 2F 33 30 3C 2F-54 65 78 74 3E 20 20 20     >07/30</Text>   
00F0: 20 20 20 20 20 20 20 20-20 20 20 20 20 20 20 3C                    <
0100: 54 65 78 74 20 4E 61 6D-65 3D 22 63 76 76 22 3E     Text Name="cvv">
0110: 34 33 34 3C 2F 54 65 78-74 3E 20 20 20 20 20 20     434</Text>      
0120: 20 20 20 20 20 20 20 20-20 20 20 3C 2F 46 72 6F                </Fro
0130: 6E 74 3E 20 20 20 20 20-20 20 20 20 20 20 20 20     nt>             
0140: 20 20 20 20 3C 42 61 63-6B 3E 20 20 20 20 20 20         <Back>      
0150: 20 20 20 20 20 20 20 20-20 20 20 20 3C 4D 61 67                 <Mag
0160: 53 74 72 69 70 65 3E 20-20 20 20 20 20 20 20 20     Stripe>         
0170: 20 20 20 20 20 20 20 20-20 20 3C 54 72 61 63 6B               <Track
0180: 20 4E 75 6D 62 65 72 3D-22 31 22 3E 25 42 34 32      Number="1">%B42
0190: 36 33 37 31 30 33 30 30-31 39 38 31 30 36 5E 46     63710300198106^F
01A0: 55 52 51 41 4E 2F 4D 55-48 41 4D 4D 41 44 5E 33     URQAN/MUHAMMAD^3
01B0: 30 30 37 32 32 36 31 32-35 38 33 30 30 30 30 30     0072261258300000
01C0: 30 30 30 30 30 31 39 37-30 30 30 30 30 30 3F 3C     00000197000000?<
01D0: 2F 54 72 61 63 6B 3E 20-20 20 20 20 20 20 20 20     /Track>         
01E0: 20 20 20 20 20 20 20 20-20 20 3C 54 72 61 63 6B               <Track
01F0: 20 4E 75 6D 62 65 72 3D-22 32 22 3E 3B 34 32 36      Number="2">;426
0200: 33 37 31 30 33 30 30 31-39 38 31 30 36 3D 33 30     3710300198106=30
0210: 30 37 32 32 36 31 32 35-38 33 31 39 37 3F 3C 2F     0722612583197?</
0220: 54 72 61 63 6B 3E 20 20-20 20 20 20 20 20 20 20     Track>          
0230: 20 20 20 20 20 20 20 20-3C 2F 4D 61 67 53 74 72             </MagStr
0240: 69 70 65 3E 20 20 20 20-20 20 20 20 20 20 20 20     ipe>            
0250: 20 20 20 20 20 3C 2F 42-61 63 6B 3E 20 20 20 20          </Back>    
0260: 20 20 20 20 20 20 20 20-20 20 20 20 3C 2F 43 61                 </Ca
0270: 72 64 4C 61 79 6F 75 74-3E 20 20 20 20 20 20 20     rdLayout>       
0280: 20 20 20 20 20 20 20 20-3C 2F 4E 42 53 4A 4F 42             </NBSJOB
0290: 3E                                                  >               

